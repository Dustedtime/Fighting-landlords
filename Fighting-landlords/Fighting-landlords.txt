#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>


struct persons
{
	int card[21];
	int dizhu;
};
struct kinds
{
	int feiji[4][2];
	int liandui[4][2];
	int shunzi[5][2];
	int sandai[7];
	int zhadan[6];
};

void wash(int* cards)
{
	int temp[54];
	int d;
	for (int a = 0; a < 50; a++)
	{
		int b = rand() % 54;
		int c = rand() % 54;
		while (b == c)
			c = rand() % 54;
		if (b > c)
		{
			int tmp = b;
			b = c;
			c = tmp;
		}
		d = 0;
		while (b + d <= c)
		{
			temp[d] = cards[b + d];
			d++;
		}
		while (++c < 54)
			cards[b++] = cards[c];
		for (c = 0; c < d; c++)
			cards[b++] = temp[c];
	}
	return;
}
void distribute(int* cards, persons* person)
{
	int a, b;
	for (a = 0, b = 1; a <= 48; a += 3)
		person[0].card[b++] = cards[a];
	for (a = 1, b = 1; a <= 49; a += 3)
		person[1].card[b++] = cards[a];
	for (a = 2, b = 1; a <= 50; a += 3)
		person[2].card[b++] = cards[a];
	person[0].card[0] = person[1].card[0] = person[2].card[0] = 17;
	person[0].dizhu = person[1].dizhu = person[2].dizhu = 0;
	return;
}
void sort(persons* person)
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = 1; j < person[i].card[0]; j++)
		{
			for (int k = j + 1; k <= person[i].card[0]; k++)
			{
				if (person[i].card[k] < person[i].card[j])
				{
					int tmp = person[i].card[k];
					person[i].card[k] = person[i].card[j];
					person[i].card[j] = tmp;
				}
			}
		}
	}
	return;
}
void show(persons* person, int flag, char shows[][10], int* cards)
{
	if (!flag)
		printf("%90s\n", "底牌：* * *");
	else
		printf("%90s%s%s%s\n", "底牌：", shows[cards[51]], shows[cards[52]], shows[cards[53]]);
	printf("   %-180s%s\n", "2号", "1号");
	if (person[0].dizhu == 0 && person[1].dizhu == 0 && person[2].dizhu == 0)
		printf("\n");
	else
	{
		if (person[0].dizhu == 1)
			printf("  %-180s%s\n", "农民", "地主");
		else if (person[1].dizhu == 1)
			printf("  %-180s%s\n", "地主", "农民");
		else
			printf("  %-180s%s\n", "农民", "农民");
	}
	printf("   %-180d%d\n\n\n\n\n", person[1].card[0], person[0].card[0]);
	if (person[2].dizhu)
		printf("                                                                               你：地主\n");
	else
		printf("                                                                               你：农民\n");
	printf("                                                    ");
	for (int i = 1; i <= person[2].card[0]; i++)
		printf("%s", shows[person[2].card[i]]);
	//printf("\n");
	//for (int i = 1; i <= person[0].card[0]; i++)
		//printf("%s", shows[person[0].card[i]]);
	//printf("\n");
	//for (int i = 1; i <= person[1].card[0]; i++)
		//printf("%s", shows[person[1].card[i]]);
	printf("\n\n\n\n");
	return;
}
void call(persons* person, int* cards, char shows[][10])
{
	while (1)
	{
		int a, b, c, d, e, f, g, aa, bb;
		for (a = b = 0, d = 1; d < 17; d++)
		{
			a += person[0].card[d];
			b += person[1].card[d];
		}
		d = rand() % 3;
		e = f = g = 0;
		while (1)
		{
			if (d == 0)
			{
				aa = rand() % 159 + 79;
				if (a >= aa)
				{
					if (f == 0)
					{
						printf("一号：叫地主！\n");
						e = 1;
						f++;
						if (g == 2)
							break;
					}
					else
					{
						printf("一号：抢地主！\n");
						e = 1;
						g = 0;
						f++;
						if (f == 4)
							break;
					}
				}
				else
				{
					if (f == 0)
						printf("一号：不叫！\n");
					else
					{
						printf("一号：不抢！\n");
						f++;
						if (f == 4)
							break;
					}
					g++;
					if (g == 3)
						break;
					else if (g == 2 && e)
						break;
				}
				d++;
			}
			if (d == 1)
			{
				bb = rand() % 159 + 79;
				if (b >= bb)
				{
					if (f == 0)
					{
						printf("二号：叫地主！\n");
						e = 2;
						f++;
						if (g == 2)
							break;
					}
					else
					{
						printf("二号：抢地主！\n");
						e = 2;
						g = 0;
						f++;
						if (f == 4)
							break;
					}
				}
				else
				{
					if (f == 0)
						printf("二号：不叫！\n");
					else
					{
						printf("二号：不抢！\n");
						f++;
						if (f == 4)
							break;
					}
					g++;
					if (g == 3)
						break;
					else if (g == 2 && e)
						break;
				}
				d++;
			}
			if (d == 2)
			{
				if (f == 0)
				{
					printf("是否叫地主？\n1：是   其他：否\n");
					scanf_s("%d", &c);
					if (c == 1)
					{
						e = 3;
						f++;
						if (g == 2)
							break;
					}
					else
					{
						g++;
						if (g == 3)
							break;
						else if (g == 2 && e)
							break;
					}
				}
				else
				{
					printf("是否抢地主？\n1：是   其他：否\n");
					scanf_s("%d", &c);
					if (c == 1)
					{
						e = 3;
						f++;
						if (f == 4)
							break;
						g = 0;
					}
					else
					{
						f++;
						if (f == 4)
							break;
						g++;
						if (g == 3)
							break;
						else if (g == 2 && e)
							break;
					}
				}
				d = 0;
			}
		}
		if (!e)
		{
			printf("因无人叫地主，重新发牌！\n");
			wash(cards);
			distribute(cards, person);
			sort(person);
			show(person, 0, shows, cards);
			continue;
		}
		if (e == 1 || e == 2)
			printf("%d号是地主！\n", e);
		else
			printf("你是地主！\n");
		for (int i = 1; i < 4; i++)
		{
			if (i == e)
				person[i - 1].dizhu = 1;
			else
				person[i - 1].dizhu = 0;
		}
		person[e - 1].card[0] = 20;
		person[e - 1].card[18] = cards[51];
		person[e - 1].card[19] = cards[52];
		person[e - 1].card[20] = cards[53];
		sort(person);
		break;
	}
	return;
}
void check(kinds* kind, int* pai)
{
	kind->feiji[0][0] = kind->liandui[0][0] = kind->sandai[0] = kind->shunzi[0][0] = kind->zhadan[0] = 0;
	for (int i = 3; i < 14; i++)
	{
		if (pai[i] >= 3)
		{
			int j = i + 1;
			for (; j <= 14 && pai[j] >= 3; j++);
			if (j - 1 != i)
			{
				kind->feiji[++(kind->feiji[0][0])][0] = i;
				kind->feiji[kind->feiji[0][0]][1] = j - 1;
			}
			i = j;
		}
	}
	for (int i = 3; i < 13; i++)
	{
		if (pai[i] == 2 && pai[i + 1] == 2)
		{
			int j = i + 2;
			for (; j <= 14 && pai[j] == 2; j++);
			if (j - 2 != i)
			{
				kind->liandui[++(kind->liandui[0][0])][0] = i;
				kind->liandui[kind->liandui[0][0]][1] = j - 1;
			}
			i = j;
		}
	}
	for (int i = 3; i < 11; i++)
	{
		if (pai[i] && pai[i + 1] && pai[i + 2] && pai[i + 3])
		{
			int j = i + 4;
			for (; j <= 14 && pai[j]; j++);
			if (j - 4 != i)
			{
				kind->shunzi[++(kind->shunzi[0][0])][0] = i;
				kind->shunzi[kind->shunzi[0][0]][1] = j - 1;
			}
			i = j;
		}
	}
	for (int i = 3; i < 16; i++)
	{
		if (pai[i] == 3)
			kind->sandai[++(kind->sandai[0])] = i;
		else if (pai[i] == 4)
			kind->zhadan[++(kind->zhadan[0])] = i;
	}
	return;
}
void zhengli(persons* person, int now, int* pais)
{
	for (int a = 1; a <= pais[0]; a++)
	{
		for (int b = 1; b <= person[now].card[0]; b++)
		{
			if (person[now].card[b] == pais[a])
			{
				for (; b < person[now].card[0]; b++)
					person[now].card[b] = person[now].card[b + 1];
				person[now].card[0]--;
				break;
			}
		}
	}
	return;
}
int lastpais(persons* person, int now, int num)
{
	if (person[now].dizhu)
	{
		if (person[(now + 1) % 3].card[0] == num || person[(now + 2) % 3].card[0] == num)
			return 0;
		else
			return 1;
	}
	else
	{
		if (person[(now + 1) % 3].dizhu)
		{
			if (person[(now + 1) % 3].card[0] == num)
				return 0;
			else
				return 1;
		}
		else
		{
			if (person[(now + 2) % 3].card[0] == num)
				return 0;
			else
				return 1;
		}
	}
}
void feiji_2_0(int one, int* pais)
{
	pais[0] = 6;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = one + 1;
	return;
}
void feiji_2_2(int* pai, int one, int* pais)
{
	pais[0] = 8;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = one + 1;
	int a = 7;
	for (int b = 3; b < 18 && a < 9; b++)
	{
		if (pai[b] && (b < one || b > one + 1))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_2_2_zhadan(int* pai, int one, int* pais)
{
	pais[0] = 8;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = one + 1;
	int a = 7;
	for (int b = 3; b < 18 && a < 9; b++)
	{
		if (pai[b] && pai[b] != 4 && (b < one || b > one + 1))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_2_2_dui(int* pai, int one, int* pais)
{
	int dui[21] = { 0 };
	for (int a = 3; a < 18; a++)
		if (pai[a] == 2)
			dui[a]++;
	pais[0] = 8;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = one + 1;
	int a = 7;
	for (int b = 3; b < 18 && a < 9; b++)
	{
		if (pai[b] && dui[b] == 0 && (b < one || b > one + 1))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_2_2_san(int* pai, int one, int* pais)
{
	int san[21] = { 0 };
	for (int a = 3; a < 16; a++)
		if (pai[a] == 3)
			san[a]++;
	pais[0] = 8;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = one + 1;
	int a = 7;
	for (int b = 3; b < 18 && a < 9; b++)
	{
		if (pai[b] && san[b] == 0 && (b < one || b > one + 1))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_2_2_dui_zhadan(int* pai, int one, int* pais)
{
	int dui[21] = { 0 };
	for (int a = 3; a < 16; a++)
		if (pai[a] == 2)
			dui[a]++;
	pais[0] = 8;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = one + 1;
	int a = 7;
	for (int b = 3; b < 18 && a < 9; b++)
	{
		if (pai[b] && dui[b] == 0 && pai[b] != 4 && (b < one || b > one + 1))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_2_2_san_zhadan(int* pai, int one, int* pais)
{
	int san[21] = { 0 };
	for (int a = 3; a < 16; a++)
		if (pai[a] == 3)
			san[a]++;
	pais[0] = 8;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = one + 1;
	int a = 7;
	for (int b = 3; b < 18 && a < 9; b++)
	{
		if (pai[b] && san[b] == 0 && pai[b] != 4 && (b < one || b > one + 1))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_2_4(int* pai, int one, int* pais)
{
	pais[0] = 10;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = one + 1;
	int a = 7;
	for (int b = 3; b < 18 && a < 11; b++)
	{
		if (pai[b] == 2)
		{
			pais[a] = pais[a + 1] = b;
			a += 2;
		}
	}
	return;
}
void feiji_3_0(int one, int* pais)
{
	pais[0] = 9;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	return;
}
void feiji_3_3(int* pai, int one, int* pais)
{
	pais[0] = 12;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	int a = 10;
	for (int b = 3; b < 18 && a < 13; b++)
	{
		if (pai[b] && (b < one || b > one + 2))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_3_3_zhadan(int* pai, int one, int* pais)
{
	pais[0] = 12;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	int a = 10;
	for (int b = 3; b < 18 && a < 13; b++)
	{
		if (pai[b] && pai[b] != 4 && (b < one || b > one + 2))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_3_3_dui(int* pai, int one, int* pais)
{
	int dui[21] = { 0 };
	for (int a = 3; a < 16; a++)
		if (pai[a] == 2)
			dui[a]++;
	pais[0] = 12;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	int a = 10;
	for (int b = 3; b < 18 && a < 13; b++)
	{
		if (pai[b] && dui[b] == 0 && (b < one || b > one + 2))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
}
void feiji_3_3_san(int* pai, int one, int* pais)
{
	int san[21] = { 0 };
	for (int a = 3; a < 16; a++)
		if (pai[a] == 3)
			san[a]++;
	pais[0] = 12;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	int a = 10;
	for (int b = 3; b < 18 && a < 13; b++)
	{
		if (pai[b] && san[b] == 0 && (b < one || b > one + 2))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
}
void feiji_3_6(int* pai, int one, int* pais)
{
	pais[0] = 15;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	int a = 10;
	for (int b = 3; b < 18 && a < 16; b++)
	{
		if (pai[b] == 2)
		{
			pais[a] = pais[a + 1] = b;
			a += 2;
		}
	}
	return;
}
void feiji_4_0(int one, int* pais)
{
	pais[0] = 12;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	return;
}
void feiji_4_4(int* pai, int one, int* pais)
{
	pais[0] = 16;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	int a = 13;
	for (int b = 3; b < 18 && a < 17; b++)
	{
		if (pai[b] && (b < one || b > one + 3))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_4_4_dui(int* pai, int one, int* pais)
{
	int dui[21] = { 0 };
	for (int a = 3; a < 16; a++)
		if (pai[a] == 2)
			dui[a]++;
	pais[0] = 16;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	int a = 13;
	for (int b = 3; b < 18 && a < 17; b++)
	{
		if (pai[b] && dui[b] == 0 && (b < one || b > one + 3))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_4_4_san(int* pai, int one, int* pais)
{
	int san[21] = { 0 };
	for (int a = 3; a < 16; a++)
		if (pai[a] == 3)
			san[a]++;
	pais[0] = 16;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	int a = 13;
	for (int b = 3; b < 18 && a < 17; b++)
	{
		if (pai[b] && san[b] == 0 && (b < one || b > one + 3))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_4_4_zhadan(int* pai, int one, int* pais)
{
	pais[0] = 16;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	int a = 13;
	for (int b = 3; b < 18 && a < 17; b++)
	{
		if (pai[b] && pai[b] != 4 && (b < one || b > one + 3))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_4_8(int* pai, int one, int* pais)
{
	pais[0] = 20;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	int a = 13;
	for (int b = 3; b < 18 && a < 21; b++)
	{
		if (pai[b] == 2)
		{
			pais[a] = pais[a + 1] = b;
			a += 2;
		}
	}
	return;
}
void feiji_5_0(int one, int* pais)
{
	pais[0] = 15;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	pais[13] = pais[14] = pais[15] = pais[10] + 1;
	return;
}
void feiji_5_5(int* pai, int one, int* pais)
{
	pais[0] = 20;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	pais[13] = pais[14] = pais[15] = pais[10] + 1;
	int a = 16;
	for (int b = 3; b < 18 && a < 21; b++)
	{
		if (pai[b] && (b < one || b > one + 4))
		{
			pai[b]--;
			pais[a++] = b--;
		}
	}
	return;
}
void feiji_6_0(int one, int* pais)
{
	pais[0] = 18;
	pais[1] = pais[2] = pais[3] = one;
	pais[4] = pais[5] = pais[6] = pais[1] + 1;
	pais[7] = pais[8] = pais[9] = pais[4] + 1;
	pais[10] = pais[11] = pais[12] = pais[7] + 1;
	pais[13] = pais[14] = pais[15] = pais[10] + 1;
	pais[16] = pais[17] = pais[18] = pais[13] + 1;
	return;
}
void renji_chupai(persons* person, int now, int* pais, int* yishi, int* yishi2)
{
	int pai[18] = { 0 };
	for (int i = 1; i <= person[now].card[0]; i++)
		pai[person[now].card[i]]++;
	kinds kind;
	check(&kind, pai);
	int flag = 0;
	int dan[21] = { 0 };
	int dui[11] = { 0 };
	int san[11] = { 0 };
	int si[11] = { 0 };
	for (int a = 3; a < 16; a++)
	{
		if (pai[a] == 1)
			dan[++dan[0]] = a;
		else if (pai[a] == 2)
			dui[++dui[0]] = a;
		else if (pai[a] == 3)
			san[++san[0]] = a;
		else if (pai[a] == 4)
			si[++si[0]] = a;
	}
	int a = person[now].card[0];
	if (a == 1)
	{
		pais[0] = 1;
		if (dan[0])
			pais[1] = dan[1];
		else if (pai[16])
			pais[1] = 16;
		else
			pais[1] = 17;
		return;
	}
	else if (a == 2)
	{
		if (dui[0])
		{
			pais[0] = 2;
			pais[1] = pais[2] = dui[1];
			return;
		}
		else if (pai[16] && pai[17])
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
		else
		{
			pais[0] = 1;
			pais[1] = dan[1];
			return;
		}
	}
	else if (a == 3)
	{
		if (san[0])
		{
			pais[0] = 3;
			pais[1] = pais[2] = pais[3] = san[1];
			return;
		}
		else if (pai[16] && pai[17])
		{
			pais[0] = 1;
			pais[1] = dan[1];
			return;
		}
	}
	else if (a == 4)
	{
		if (si[0])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		if (san[0])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = san[1];
			if (dan[0])
				pais[4] = dan[1];
			else if (pai[16])
				pais[4] = 16;
			else
				pais[4] = 17;
			return;
		}
		else if (pai[16] && pai[17])
		{
			if (dui[0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			else
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
		}
	}
	else if (a == 5)
	{
		if (san[0] && dui[0])
		{
			pais[0] = 5;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = pais[5] = dui[1];
			return;
		}
		if (si[0])
		{
			pais[0] = 1;
			if (dan[0])
				pais[1] = dan[1];
			else if (pai[16])
				pais[1] = 16;
			else
				pais[1] = 17;
			return;
		}
		if (pai[16] && pai[17])
		{
			if (san[0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			else
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
		}
		if (kind.shunzi[0][0])
		{
			pais[0] = 5;
			int one = 1;
			while (kind.shunzi[1][0] <= kind.shunzi[1][1])
				pais[one++] = kind.shunzi[1][0]++;
			return;
		}
	}
	if (a == 6)
	{
		if (kind.liandui[0][0])
		{
			pais[0] = 6;
			flag = 1;
			for (int b = kind.liandui[1][0]; b <= kind.liandui[1][1]; b++)
			{
				pais[flag] = pais[flag + 1] = b;
				flag += 2;
			}
			return;
		}
		if (kind.feiji[0][0])
		{
			feiji_2_0(kind.feiji[1][0], pais);
			return;
		}
		if (kind.shunzi[0][0])
		{
			if (kind.shunzi[1][1] - kind.shunzi[1][0] == 5)
			{
				pais[0] = 6;
				int one = 1;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
					pais[one++] = b;
				return;
			}
			else
			{
				pais[0] = 5;
				int one = 1;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
					pais[one++] = b;
				return;
			}
		}
		if (si[0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			else if (dui[0])
			{
				if (lastpais(person, now, 2) || dui[1] > 14)
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[1];
					return;
				}
			}
			pais[0] = 1;
			pais[1] = dan[1];
			return;
		}
		if (pai[16] && pai[17])
		{
			if (san[1])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			else if (dui[0] == 2)
			{
				if (lastpais(person, now, 2) || dui[2] > 14)
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[2];
					return;
				}
			}
			else
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
		}
	}
	if (a == 7)
	{
		if (kind.shunzi[0][0] && kind.shunzi[1][1] - kind.shunzi[1][0] >= 5)
		{
			pais[0] = kind.shunzi[1][1] - kind.shunzi[1][0] + 1;
			int one = 1;
			for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
				pais[one++] = b;
			return;
		}
		if (si[0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			if (san[0])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = san[1];
				return;
			}
		}
		if (pai[16] && pai[17])
		{
			if (san[0] && dui[0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			if (kind.shunzi[0][0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			if (san[0] && dan[0])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
		}
		if (kind.feiji[0][0])
		{
			feiji_2_0(kind.feiji[1][0], pais);
			return;
		}
	}
	if (a == 8)
	{
		if (kind.liandui[0][0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			if (kind.liandui[1][1] - kind.liandui[1][0] == 3)
			{
				pais[0] = 8;
				int one = 1;
				for (int b = kind.liandui[1][0]; b <= kind.liandui[1][1]; b++)
				{
					pais[one] = pais[one + 1] = b;
					one += 2;
				}
				return;
			}
		}
		if (kind.shunzi[0][0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = kind.shunzi[1][1] - kind.shunzi[1][0] + 1;
				int one = 1;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
					pais[one++] = b;
				return;
			}
			if (kind.shunzi[1][1] - kind.shunzi[1][0] >= 6)
			{
				pais[0] = kind.shunzi[1][1] - kind.shunzi[1][0] + 1;
				int one = 1;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
					pais[one++] = b;
				return;
			}
		}
		if (kind.feiji[0][0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			feiji_2_2(pai, kind.feiji[1][0], pais);
			return;
		}
		if (si[0] == 2)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 1)
		{
			if (pai[16] && pai[17])
			{
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
			}
			if (dui[0] == 2)
			{
				if (lastpais(person, now, 2) || dui[1] > 13)
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[1];
					return;
				}
				else
				{
					if (dui[2] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[2];
						return;
					}
					else
					{
						pais[0] = 8;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						pais[7] = pais[8] = dui[2];
						return;
					}
				}
			}
		}
		if (san[0] == 2 && dan[0])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = dan[1];
			return;
		}
	}
	if (a == 9)
	{
		if (kind.liandui[0][0] && kind.liandui[1][1] - kind.liandui[1][0] == 3)
		{
			pais[0] = 8;
			int one = 1;
			for (int b = kind.liandui[1][0]; b <= kind.liandui[1][1]; b++)
			{
				pais[one] = pais[one + 1] = b;
				one += 2;
			}
			return;
		}
		if (kind.shunzi[0][0] && kind.shunzi[1][1] - kind.shunzi[1][0] >= 7)
		{
			pais[0] = kind.shunzi[1][1] - kind.shunzi[1][0] + 1;
			int one = 1;
			for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
				pais[one++] = b;
			return;
		}
		if (san[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				if (lastpais(person, now, 4) || san[2] > 14)
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[2];
					pais[4] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 3) || san[2] > 14)
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[2];
						return;
					}
					else
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[2] = san[2];
						return;
					}
				}
			}
			else
			{
				if (dan[0] && dui[0])
				{
					if (dan[1] <= dui[1])
					{
						if (lastpais(person, now, 4) || san[2] > 14)
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = san[2];
							pais[4] = dan[1];
							return;
						}
						else
						{
							if (lastpais(person, now, 5) || san[2] > 14)
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = san[2];
								pais[4] = pais[5] = dui[1];
								return;
							}
							else
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = dan[1];
								return;
							}
						}
					}
					else
					{
						if (lastpais(person, now, 5))
						{
							pais[0] = 5;
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = pais[5] = dui[1];
							return;
						}
						else
						{
							if (lastpais(person, now, 4))
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = dan[1];
								return;
							}
							else
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = dui[1];
								return;
							}
						}
					}
				}
				if (dan[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = dan[1];
					return;
				}
				else
				{
					pais[0] = 5;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = dui[1];
					return;
				}
			}
		}
		if (si[0] == 2)
		{
			pais[0] = 1;
			if (dan[0])
				pais[1] = dan[1];
			else if (pai[16])
				pais[1] = 16;
			else
				pais[1] = 17;
			return;
		}
		else if (si[0] == 1)
		{
			if (pai[16] && pai[17])
			{
				if (san[0])
				{
					if (lastpais(person, now, 3))
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
					else
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
				}
				else
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
			}
			if (san[0] && dui[0])
			{
				pais[0] = 5;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = dui[1];
			}
			if (san[0] && dan[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = dan[1];
				return;
			}
			if (kind.shunzi[0][0])
			{
				int flag = 0;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
				{
					if (pai[b] == 4)
					{
						flag = 1;
						break;
					}
				}
				if (!flag)
				{
					pais[0] = 5;
					int one = 1;
					for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
						pais[one++] = b;
					return;
				}
			}
		}
	}
	if (a == 10)
	{
		if (san[0] == 2 && dui[0] == 2)
		{
			pais[0] = 5;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = pais[5] = dui[1];
			return;
		}
		if (si[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			if (dan[0])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			if (dui[0])
			{
				if (lastpais(person, now, 2) || dui[1] > 14)
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[1];
					return;
				}
				else
				{
					pais[0] = 1;
					pais[1] = dui[1];
					return;
				}
			}
		}
		else if (si[0] == 1)
		{
			if (pai[16] && pai[17])
			{
				if (san[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = dan[1];
					return;
				}
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 2))
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						if (dui[2] > 14)
						{
							pais[0] = 2;
							pais[1] = pais[2] = dui[2];
							return;
						}
						else
						{
							pais[0] = 2;
							pais[1] = 16;
							pais[2] = 17;
							return;
						}
					}
				}
			}
		}
		if (pai[16] && pai[17])
		{
			if (san[0] == 2)
			{
				if (dan[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[2];
					pais[4] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 5))
					{
						pais[0] = 5;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = pais[5] = dui[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3) || san[1] > 13)
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
						else
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = dui[1];
							return;
						}
					}
				}
			}
		}
	}
	if (a == 11)
	{
		if (si[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			else
			{
				if (san[0])
				{
					if (lastpais(person, now, 3) || san[1] > 14)
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
					else
					{
						pais[0] = 1;
						pais[1] = san[1];
						return;
					}
				}
				else
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
			}
		}
		else if (si[0] == 1)
		{
			if (pai[16] && pai[17])
			{
				if (san[0] && dui[0])
				{
					if (lastpais(person, now, 5) || san[1] > 14)
					{
						pais[0] = 5;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = pais[5] = dui[1];
						return;
					}
					else
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
				}
			}
		}
	}
	if (a == 12)
	{
		if (si[0] == 3)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
					}
					else
					{
						pais[0] = 1;
						pais[1] = dui[1];
						return;
					}
				}
			}
			else
			{
				if (san[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					if (dan[0])
						pais[4] = dan[1];
					else if (pai[16])
						pais[4] = 16;
					else
						pais[4] = 17;
					return;
				}
			}
		}
	}
	if (a == 13)
	{
		if (si[0] == 3)
		{
			pais[0] = 1;
			if (dan[0])
				pais[1] = dan[1];
			else if (pai[16])
				pais[1] = 16;
			else
				pais[1] = 17;
			return;
		}
		else if (si[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 3) || san[1] > 14)
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
					else
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
				}
			}
			else if (san[0] && dui[0])
			{
				pais[0] = 5;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = dui[1];
				return;
			}
			else if (san[0] && dan[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = dan[1];
				return;
			}
		}
	}
	if (a == 14)
	{
		if (si[0] == 3)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			else
			{
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					pais[0] = 1;
					pais[1] = dui[1];
					return;
				}
			}
		}
	}
	if (a == 15)
	{
		if (si[0] == 3)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			else if (san[0])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = san[1];
				return;
			}
			else
			{
				pais[0] = 1;
				if (dan[0])
					pais[1] = dan[1];
				else if (pai[16])
					pais[1] = 16;
				else
					pais[1] = 17;
				return;
			}
		}
	}
	if (a == 16)
	{
		if (si[0] == 4)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 3)
		{
			if (pai[16] && pai[17])
			{
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					pais[0] = 1;
					pais[1] = dui[1];
					return;
				}
			}
			else if (san[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				if (dan[0])
					pais[4] = dan[1];
				else if (pai[16])
					pais[4] = 16;
				else
					pais[4] = 17;
				return;
			}
		}
	}
	if (a == 17)
	{
		if (si[0] == 4)
		{
			pais[0] = 1;
			if (dan[0])
				pais[1] = dan[1];
			else if (pai[16])
				pais[1] = 16;
			else
				pais[1] = 17;
			return;
		}
		else if (si[0] == 3)
		{
			if (pai[16] && pai[17])
			{
				if (san[0])
				{
					if (lastpais(person, now, 3) || san[1] > 14)
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
					else
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
				}
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			else
			{
				if (san[0])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					if (dan[0])
					{
						pais[0] = 4;
						pais[4] = dan[1];
					}
					else
					{
						pais[0] = 5;
						pais[4] = pais[5] = dui[1];
						return;
					}
				}
			}
		}
	}
	if (a == 18)
	{
		if (si[0] == 4)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			else
			{
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 1;
						pais[1] = dui[1];
						return;
					}
				}
			}
		}
	}
	if (a == 19)
	{
		if (si[0] == 4)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			else if (san[0])
			{
				if (lastpais(person, now, 3) || san[1] > 14)
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = san[1];
					return;
				}
				else
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					return;
				}
			}
			else
			{
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					pais[0] = 1;
					if (pai[16])
						pais[1] = 16;
					else
						pais[1] = 17;
					return;
				}
			}
		}
	}
	if (a == 20)
	{
		if (si[0] == 5)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 4)
		{
			if (pai[16] && pai[17])
			{
				if (dui[0])
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
				}
				pais[0] = 1;
				if (dan[0])
					pais[1] = dan[1];
				else
					pais[1] = dui[1];
				return;
			}
			else if (san[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				if (dan[0])
					pais[4] = dan[1];
				else if (pai[16])
					pais[4] = 16;
				else
					pais[4] = 17;
				return;
			}
			else
			{
				if (dan[0])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[2] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[2];
						return;
					}
					else
					{
						pais[0] = 1;
						pais[1] = dui[1];
						return;
					}
				}
			}
		}
	}
	if (person[now].dizhu == 0)
	{
		a = 0;
		int b = 0;
		if (person[(now + 1) % 3].dizhu == 0)
		{
			a = person[(now + 1) % 3].card[0];
			b = 1;
		}
		else
		{
			a = person[(now + 2) % 3].card[0];
			b = 2;
		}
		if (a == 1)
		{
			if (*yishi == 0)
			{
				int count = 3;
				while (count < 18)
				{
					if (pai[count] && pai[count] < 4)
						break;
					else
						count++;
				}
				if (count <= 10)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
				if (count < 18)
				{
					pais[0] = 1;
					pais[1] = count;
					*yishi = 1;
					return;
				}
			}
		}
		if (a == 2)
		{
			if (*yishi2 == 0)
			{
				if (b == 1 || (b == 2 && person[(now + 1) % 3].card[0] != 2))
				{
					if (dui[0] && dui[1] <= 10)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						*yishi2 = 1;
						return;
					}
				}
			}
		}
	}
	if (kind.feiji[0][0])
	{
		flag = 1;
		for (int i = 1; i <= kind.feiji[0][0]; i++)
		{
			for (int j = kind.feiji[i][0]; j <= kind.feiji[i][1]; j++)
			{
				int flag = 0;
				if (pai[j] == 4)
				{
					if (j - kind.feiji[i][0] - 1 >= 1)
					{
						flag = 1;
						if (kind.feiji[i][1] - 1 - j >= 1)
							flag = 3;
					}
					else if (kind.feiji[i][1] - 1 - j >= 1)
						flag = 2;
					else
					{
						if (j - kind.feiji[i][0] == 1 && kind.feiji[i][1] - j == 1)
							flag = -1;
						else
						{
							if (j == kind.feiji[i][0])
							{
								if (j < 7 || pai[j + 1] == 4)
									flag = -1;
								else
								{
									int k = j - 1, one = 0, two = 0, three = 0, four = 0;
									for (; k >= 3 && k >= j - 4; k--)
									{
										if (pai[k] == 1)
											one++;
										else if (pai[k] == 2)
											two++;
										else if (pai[k] == 3)
											three++;
										else if (pai[k] == 4)
											four++;
										else
											break;
									}
									if (j - k < 5 || four || three)
										flag = -1;
									else if (k >= 3)
									{
										if (pai[k] == 4)
										{
											if (one == 1)
											{
												if (pai[k + 1] == 1 || pai[k + 4] == 1)
													flag = -1;
											}
											else if (one == 0)
												flag = -1;
										}
										else if (pai[k] == 3 || pai[k] == 1)
											flag = -1;
										else if (pai[k] == 2)
										{
											if (one == 4)
											{
												if (k - 2 < 3)
													flag = -1;
												else if (pai[k - 1] != 2 || pai[k - 2] != 2)
													flag = -1;
											}
											else if (one == 3)
											{
												if (pai[k + 1] == 2)
												{
													if (k - 1 < 3)
														flag = -1;
													else if (pai[k - 1] == 2)
														flag = -1;
												}
												else
												{
													if (k - 2 < 3)
														flag = -1;
													else if (pai[k - 1] != 2 || pai[k - 2] != 2)
														flag = -1;
												}
											}
											else if (one == 2)
											{
												if (pai[k + 1] == 2 && pai[k + 2] == 2)
													flag = -1;
												else
												{
													if (pai[k + 1] == 2 && pai[k + 2] != 2)
													{
														if (k - 1 >= 3 && pai[k - 1] == 2)
															flag = -1;
													}
												}
											}
											else
												flag = -1;
										}
										else
										{
											if (!one)
												flag = -1;
											else if (one == 1)
												if (pai[k + 1] == 1 || pai[k + 4] == 1)
													flag = -1;
										}
									}
									else
									{
										if (!one)
											flag = -1;
										else if (one == 1)
											if (pai[k + 1] == 1 || pai[k + 4] == 1)
												flag = -1;
									}
								}
							}
							else
							{
								if (j > 10)
									flag = -1;
								else
								{
									int k = j + 1, one = 0, two = 0, three = 0, four = 0;
									for (; k <= 14 && k <= j + 4; k++)
									{
										if (pai[k] == 1)
											one++;
										else if (pai[k] == 2)
											two++;
										else if (pai[k] == 3)
											three++;
										else if (pai[k] == 4)
											four++;
										else
											break;
									}
									if (k - j < 5 || three || four)
										flag = -1;
									else if (k <= 14)
									{
										if (pai[k] == 4)
										{
											if (one == 1)
											{
												if (pai[j + 1] == 1 || pai[k - 1] == 1)
													flag = -1;
											}
											else if (one == 0)
												flag = -1;
										}
										else if (pai[k] == 1 || pai[k] == 3)
											flag = -1;
										else if (pai[k] == 2)
										{
											if (one >= 3)
												flag = -1;
											else if (one == 2)
											{
												if (pai[k - 1] == 2)
												{
													if (pai[k - 2] == 2)
														flag = -1;
													else
													{
														if (k + 1 <= 14)
														{
															if (pai[k + 1] == 1 || pai[k + 1] == 2)
																flag = -1;
														}
													}
												}
												else
												{
													if (k + 2 > 14)
														flag = -1;
													else
													{
														if (pai[k + 1] != 2 || pai[k + 2] != 2)
															flag = -1;
													}
												}
											}
											else
												flag = -1;
										}
										else
										{
											if (one <= 1)
												flag = -1;
										}
									}
									else
									{
										if (one <= 1)
											flag = -1;
									}
								}
							}
						}
					}
					if (flag != 0)
					{
						if (flag == -1)
						{
							for (int j = i; j < kind.feiji[0][0]; j++)
							{
								kind.feiji[j][0] = kind.feiji[j + 1][0];
								kind.feiji[j][1] = kind.feiji[j + 1][1];
							}
							kind.feiji[0][0]--;
						}
						else if (flag == 1)
							kind.feiji[i][1] = j - 1;
						else if (flag == 2)
							kind.feiji[i][0] = j + 1;
						else if (flag == 3)
						{
							for (int k = kind.feiji[0][0]; k > i; k--)
							{
								kind.feiji[k + 1][0] = kind.feiji[k][0];
								kind.feiji[k + 1][1] = kind.feiji[k][1];
							}
							kind.feiji[i + 1][1] = kind.feiji[i][1];
							kind.feiji[i + 1][0] = j + 1;
							kind.feiji[i][1] = j - 1;
							kind.feiji[0][0]++;
						}
						i = 0;
					}
					break;
				}
			}
		}
		if(kind.feiji[0][0])
		{
			int one = 0, two = 0, three = 0, four = 0;
			for (int i = 1; i <= person[now].card[0]; i++)
			{
				if (pai[person[now].card[i]] == 1)
					one++;
				else if (pai[person[now].card[i]] == 2)
					two++;
				else if (pai[person[now].card[i]] == 3)
					three++;
				else if (pai[person[now].card[i]] == 4)
					four++;
			}
			for (int i = 1; i <= kind.feiji[0][0]; i++)
			{
				if (kind.feiji[i][1] - kind.feiji[i][0] == 1)
				{
					if (pai[kind.feiji[i][0]] == 4 || pai[kind.feiji[i][1]] == 4)
					{
						int k;
						int count = 0;
						for (k = i + 1; k <= kind.feiji[0][0]; k++)
						{
							count = 0;
							for (int j = kind.feiji[k][0]; j <= kind.feiji[k][1]; j++)
								if (pai[j] == 4)
									count++;
							if (!count)
								break;
						}
						if (i + 1 > kind.feiji[0][0])
							count = 1;
						if (!count)
						{
							i = k - 1;
							continue;
						}
						for (int a = 1; a <= kind.liandui[0][0]; a++)
						{
							int left = kind.liandui[a][0], right = kind.liandui[a][1];
							if (left > kind.feiji[i][1])
							{
								if (left + 2 > 13)
									break;
								else if (right == 14)
									right = 13;
							}
							left--;
							while (left >= 3 && pai[left] == 1)
								left--;
							left++;
							right++;
							while (right <= 14 && pai[right] == 1)
								right++;
							right--;
							if (kind.liandui[a][1] - left >= 4 && right - kind.liandui[a][0] >= 4 && kind.liandui[a][0] > left && kind.liandui[a][1] < right)
							{
								pais[0] = kind.liandui[a][1] - left + 1;
								one = 1;
								while (left <= kind.liandui[a][1])
									pais[one++] = left++;
								return;
							}
							else
							{
								if (kind.liandui[a][1] == 14)
									kind.liandui[a][1] = 13;
								pais[0] = (kind.liandui[a][1] - kind.liandui[a][0] + 1) * 2;
								one = 1;
								while (kind.liandui[a][0] <= kind.liandui[a][1])
								{
									pais[one] = pais[one + 1] = kind.liandui[a][0];
									one += 2;
									kind.liandui[a][0]++;
								}
								return;
							}
						}
						for (int a = 1; a <= kind.shunzi[0][0]; a++)
						{
							int left = kind.shunzi[a][0], right = kind.shunzi[a][1];
							if (kind.feiji[i][0] == 4)
							{
								if (kind.feiji[i][0] > left && kind.feiji[i][0] <= right)
								{
									if (kind.feiji[i][0] - left > 4)
									{
										int b = kind.feiji[i][0] - 5;
										if (pai[b] == 4)
										{
											if (b - left > 4)
											{
												int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
												for (int c = left; c < b; c++)
												{
													if (pai[c] == 1)
														one1++;
													else if (pai[c] == 2)
														two1++;
													else if (pai[c] == 3)
														three1++;
													else if (pai[c] == 4)
														four1++;
												}
												int right1 = b - 1;
												while (right1 - left > 5)
												{
													if (pai[left] == 4)
													{
														left++;
														four1--;
													}
													else if (pai[right1] == 4)
													{
														right1--;
														four1--;
													}
													else if (pai[left] == 3)
													{
														left++;
														three1--;
													}
													else if (pai[right1] == 3)
													{
														right1--;
														three1--;
													}
													else if (pai[left] == 2)
													{
														left++;
														two1--;
													}
													else if (pai[right1] == 2)
													{
														right1--;
														two1--;
													}
													else
														break;
												}
												if (three1 > 1 || four1)
													continue;
												if (three1 == 0 && two1 == 0)
												{
													pais[0] = right1 - left + 1;
													one = 1;
													while (left <= right1)
														pais[one++] = left++;
													return;
												}
												int sum1 = one1, sum2 = two1;
												int left2 = left + 4, right2 = right1 - 4;
												int max = 0, end = 0;
												if (left2 <= right2)
												{
													if (pai[left2] == 2 || pai[left2] == 3)
													{
														while (left2 >= left && pai[left2] >= 2 && pai[left2] <= 3)
															left2--;
														left2++;
													}
													if (pai[right2] == 2 || pai[right2] == 3)
													{
														while (right2 <= right1 && pai[right2] >= 2 && pai[right2] <= 3)
															right2++;
														right2--;
													}
													for (int c = left2; c <= right2; c++)
													{
														if (pai[c] >= 2 && pai[c] <= 3)
														{
															int maxx = 0;
															while (c <= right2 && pai[c] >= 2 && pai[c] <= 3)
															{
																c++;
																maxx++;
															}
															c--;
															if (maxx > max)
															{
																max = maxx;
																end = c;
															}
														}
													}
													if (max)
													{
														sum2 -= max;
														for (int c = end - max + 1; c <= end; c++)
															if (pai[c] == 3)
																sum2++;
													}
													if (sum1 < sum2)
													{
														for (int c = left; c <= right1; c++)
														{
															if (pai[c] == 1)
															{
																pais[0] = 1;
																pais[1] = c;
																return;
															}
															else
															{
																if (lastpais(person, now, 2) == 0)
																	continue;
																pais[0] = 2;
																pais[1] = pais[2] = c;
																return;
															}
														}
													}
													else
													{
														if (end)
														{
															pais[0] = end - left + 1;
															one = 1;
															while (left <= end)
																pais[one++] = left++;
														}
														else
														{
															pais[0] = right1 - left + 1;
															one = 1;
															while (left <= right1)
																pais[one++] = left++;
														}
														return;
													}
												}
												else
												{
													if (pai[right2] == 2 || pai[right2] == 3)
													{
														while (right2 >= left && pai[right2] >= 2 && pai[right2] <= 3)
															right2--;
														right2++;
													}
													if (pai[left2] == 2 || pai[left2] == 3)
													{
														while (left2 <= right1 && pai[left2] >= 2 && pai[left2] <= 3)
															left2++;
														left2--;
													}
													int c = right2;
													while (c <= left2 && pai[c] >= 2 && pai[c] <= 3)
														c++;
													if (c > left2)
													{
														sum2 -= (left2 - right2 + 1);
														for (int d = right2; d <= left2; d++)
															if (pai[d] == 3)
																sum2++;
													}
													if (sum1 < sum2)
													{
														for (int c = left; c <= right1; c++)
														{
															if (pai[c] == 1)
															{
																pais[0] = 1;
																pais[1] = c;
																return;
															}
															else
															{
																if (lastpais(person, now, 2) == 0)
																	continue;
																pais[0] = 2;
																pais[1] = pais[2] = c;
																return;
															}
														}
													}
													else
													{
														if (c > left2)
														{
															pais[0] = left2 - left + 1;
															one = 1;
															while (left <= left2)
																pais[one++] = left++;
														}
														else
														{
															pais[0] = right1 - left + 1;
															one = 1;
															while (left <= right1)
																pais[one++] = left++;
														}
														return;
													}
												}
											}
											else
											{
												if (one + two <= three)
													continue;
												while (left < b)
												{
													if (pai[left] == 1)
													{
														pais[0] = 1;
														pais[1] = left;
														return;
													}
													else if (pai[left] == 2)
													{
														if (lastpais(person, now, 2) == 0)
														{
															left++;
															continue;
														}
														pais[0] = 2;
														pais[1] = pais[2] = left;
														return;
													}
													left++;
												}
												pais[0] = 5;
												one = 1;
												b = kind.feiji[i][0] - 4;
												while (b <= kind.feiji[i][0])
													pais[one++] = b++;
												return;
											}
										}
									}
									else if (kind.feiji[i][0] - left == 4)
									{
										pais[0] = 5;
										one = 1;
										while (left <= kind.feiji[i][0])
											pais[one++] = left++;
										return;
									}
									else
									{
										int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
										for (int c = left; c < kind.feiji[i][0]; c++)
										{
											if (pai[c] == 1)
												one1++;
											else if (pai[c] == 2)
												two1++;
											else if (pai[c] == 3)
												three1++;
											else
												four1++;
										}
										if (one + two <= three || three1)
											continue;
										else if (one1 || two1)
										{
											int c;
											for (c = left; c < kind.feiji[i][0]; c++)
											{
												if (pai[c] == 1)
												{
													pais[0] = 1;
													pais[1] = c;
													return;
												}
												else if (pai[c] == 2)
												{
													if (lastpais(person, now, 2) == 0)
														continue;
													pais[0] = 2;
													pais[1] = pais[2] = c;
													return;
												}
											}
											continue;
										}
									}
								}
								if (right < kind.feiji[i][0])
								{
									int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
									for (int b = left; b <= right; b++)
									{
										if (pai[b] == 1)
											one1++;
										else if (pai[b] == 2)
											two1++;
										else if (pai[b] == 3)
											three1++;
										else if (pai[b] == 4)
											four1++;
									}
									while (right - left > 4)
									{
										if (pai[left] == 4)
										{
											left++;
											four1--;
										}
										else if (pai[right] == 4)
										{
											right--;
											four1--;
										}
										else if (pai[left] == 3)
										{
											left++;
											three1--;
										}
										else if (pai[right] == 3)
										{
											right--;
											three1--;
										}
										else if (pai[left] == 2)
										{
											left++;
											two1--;
										}
										else if (pai[right] == 2)
										{
											right--;
											two1--;
										}
										else
											break;
									}
									if (three1 > 1 || four1)
										continue;
									if (two1 == 0 && three1 == 0)
									{
										pais[0] = right - left + 1;
										one = 1;
										while (left <= right)
											pais[one++] = left++;
										return;
									}
									else
									{
										int sum1 = one1, sum2 = two1;
										int left1 = left + 4, right1 = right - 4;
										if (left1 <= right1)
										{
											if (pai[left1] >= 2)
											{
												while (left1 >= left && pai[left1] >= 2)
													left1--;
												left1++;
											}
											if (pai[right1] >= 2)
											{
												while (right1 <= right && pai[right1] >= 2)
													right1++;
												right1--;
											}
											int max = 0, end = 0;
											for (int b = left1; b <= right1; b++)
											{
												if (pai[b] >= 2)
												{
													int maxx = 0;
													while (b <= right1 && pai[b] >= 2)
													{
														b++;
														maxx++;
													}
													b--;
													if (maxx > max)
													{
														max = maxx;
														end = b;
													}
												}
											}
											if (end)
											{
												sum2 -= max;
												for (int c = end - max + 1; c <= end; c++)
													if (pai[c] == 3)
														sum2++;
											}
											if (sum1 < sum2)
											{
												if (one + two > three)
												{
													for (int b = left; b <= right; b++)
													{
														if (pai[b] == 1)
														{
															pais[0] = 1;
															pais[1] = b;
															return;
														}
														else if (pai[b] == 2)
														{
															if (lastpais(person, now, 2) == 0)
																continue;
															pais[0] = 2;
															pais[1] = pais[2] = b;
															return;
														}
													}
												}
												continue;
											}
											else
											{
												if (end)
												{
													pais[0] = end - left + 1;
													one = 1;
													while (left <= end)
														pais[one++] = left++;
													return;
												}
												else
												{
													pais[0] = right - left + 1;
													one = 1;
													while (left <= right)
														pais[one++] = left++;
													return;
												}
											}
										}
										else
										{
											if (pai[left1] >= 2)
											{
												while (left1 <= right && pai[left1] >= 2)
													left1++;
												left1--;
											}
											if (pai[right1] >= 2)
											{
												while (right1 >= left && pai[right1] >= 2)
													right1--;
												right1++;
											}
											int b = right1;
											while (b <= left1 && pai[b] >= 2)
												b++;
											if (b > left1)
											{
												sum2 -= (left1 - right1 + 1);
												for (int c = right1; c <= left1; c++)
													if (pai[c] == 3)
														sum2++;
											}
											if (sum1 < sum2)
											{
												if (one + two > three)
												{
													for (int b = left; b <= right; b++)
													{
														if (pai[b] == 1)
														{
															pais[0] = 1;
															pais[1] = b;
															return;
														}
														else if (pai[b] == 2)
														{
															if (lastpais(person, now, 2) == 0)
																continue;
															pais[0] = 2;
															pais[1] = pais[2] = b;
															return;
														}
													}
												}
												continue;
											}
											else
											{
												if (b > left1)
												{
													pais[0] = left1 - left + 1;
													one = 1;
													while (left <= left1)
														pais[one++] = left++;
													return;
												}
												else
												{
													pais[0] = right - left + 1;
													one = 1;
													while (left <= right)
														pais[one++] = left++;
													return;
												}
											}
										}
									}
								}
								if (left >= kind.feiji[i][0])
									break;
							}
							if (kind.feiji[i][1] == 4)
							{
								if (right < kind.feiji[i][0])
								{
									int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
									for (int b = left; b <= right; b++)
									{
										if (pai[b] == 1)
											one1++;
										else if (pai[b] == 2)
											two1++;
										else if (pai[b] == 3)
											three1++;
										else if (pai[b] == 4)
											four1++;
									}
									while (right - left > 4)
									{
										if (pai[left] == 4)
										{
											left++;
											four1--;
										}
										else if (pai[right] == 4)
										{
											right--;
											four1--;
										}
										else if (pai[left] == 3)
										{
											left++;
											three1--;
										}
										else if (pai[right] == 3)
										{
											right--;
											three1--;
										}
										else if (pai[left] == 2)
										{
											left++;
											two1--;
										}
										else if (pai[right] == 2)
										{
											right--;
											two1--;
										}
										else
											break;
									}
									if (three1 > 1 || four1)
										continue;
									if (two1 == 0 && three1 == 0)
									{
										pais[0] = right - left + 1;
										one = 1;
										while (left <= right)
											pais[one++] = left++;
										return;
									}
									else
									{
										int sum1 = one1, sum2 = two1;
										int left1 = left + 4, right1 = right - 4;
										if (left1 <= right1)
										{
											if (pai[left1] >= 2)
											{
												while (left1 >= left && pai[left1] >= 2)
													left1--;
												left1++;
											}
											if (pai[right1] >= 2)
											{
												while (right1 <= right && pai[right1] >= 2)
													right1++;
												right1--;
											}
											int max = 0, end = 0;
											for (int b = left1; b <= right1; b++)
											{
												if (pai[b] >= 2)
												{
													int maxx = 0;
													while (b <= right1 && pai[b] >= 2)
													{
														b++;
														maxx++;
													}
													b--;
													if (maxx > max)
													{
														max = maxx;
														end = b;
													}
												}
											}
											if (end)
											{
												sum2 -= max;
												for (int b = end - max + 1; b <= end; b++)
													if (pai[b] == 3)
														sum2++;
											}
											if (sum1 < sum2)
											{
												if (one + two > three)
												{
													for (int b = left; b <= right; b++)
													{
														if (pai[b] == 1)
														{
															pais[0] = 1;
															pais[1] = b;
															return;
														}
														else if (pai[b] == 2)
														{
															if (lastpais(person, now, 2) == 0)
																continue;
															pais[0] = 2;
															pais[1] = pais[2] = b;
															return;
														}
													}
												}
												continue;
											}
											else
											{
												if (end)
												{
													pais[0] = end - left + 1;
													one = 1;
													while (left <= end)
														pais[one++] = left++;
													return;
												}
												else
												{
													pais[0] = right - left + 1;
													one = 1;
													while (left <= right)
														pais[one++] = left++;
													return;
												}
											}
										}
										else
										{
											if (pai[left1] >= 2)
											{
												while (left1 <= right && pai[left1] >= 2)
													left1++;
												left1--;
											}
											if (pai[right1] >= 2)
											{
												while (right1 >= left && pai[right1] >= 2)
													right1--;
												right1++;
											}
											int b = right1;
											while (b <= left1 && pai[b] >= 2)
												b++;
											if (b > left1)
											{
												sum2 -= (left1 - right1 + 1);
												for (int c = right1; c <= left1; c++)
													if (pai[c] == 3)
														sum2++;
											}
											if (sum1 < sum2)
											{
												if (one + two > three)
												{
													for (int b = left; b <= right; b++)
													{
														if (pai[b] == 1)
														{
															pais[0] = 1;
															pais[1] = b;
															return;
														}
														else if (pai[b] == 2)
														{
															if (lastpais(person, now, 2) == 0)
																continue;
															pais[0] = 2;
															pais[1] = pais[2] = b;
															return;
														}
													}
												}
												continue;
											}
											else
											{
												if (b > left1)
												{
													pais[0] = left1 - left + 1;
													one = 1;
													while (left <= left1)
														pais[one++] = left++;
													return;
												}
												else
												{
													pais[0] = right - left + 1;
													one = 1;
													while (left <= right)
														pais[one++] = left++;
													return;
												}
											}
										}
									}
								}
								if (kind.feiji[i][0] >= left && kind.feiji[i][1] < right)
								{
									int right1 = kind.feiji[i][0] - 1;
									if (right1 - left < 4)
										continue;
									else
									{
										int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
										for (int b = left; b <= right1; b++)
										{
											if (pai[b] == 1)
												one1++;
											else if (pai[b] == 2)
												two1++;
											else if (pai[b] == 3)
												three1++;
											else if (pai[b] == 4)
												four1++;
										}
										while (right1 - left > 4)
										{
											if (pai[left] == 4)
											{
												left++;
												four1--;
											}
											else if (pai[right1] == 4)
											{
												right1--;
												four1--;
											}
											else if (pai[left] == 3)
											{
												left++;
												three1--;
											}
											else if (pai[right1] == 3)
											{
												right1--;
												three1--;
											}
											else if (pai[left] == 2)
											{
												left++;
												two1--;
											}
											else if (pai[right1] == 2)
											{
												right1--;
												two1--;
											}
											else
												break;
										}
										if (three1 > 1 || four1)
											continue;
										if (two1 == 0 && three1 == 0)
										{
											pais[0] = right1 - left + 1;
											one = 1;
											while (left <= right1)
												pais[one++] = left++;
											return;
										}
										else
										{
											int sum1 = one1, sum2 = two1;
											right = right1;
											int left1 = left + 4;
											right1 = right - 4;
											if (left1 <= right1)
											{
												if (pai[left1] >= 2)
												{
													while (left1 >= left && pai[left1] >= 2)
														left1--;
													left1++;
												}
												if (pai[right1] >= 2)
												{
													while (right1 <= right && pai[right1] >= 2)
														right1++;
													right1--;
												}
												int max = 0, end = 0;
												for (int b = left1; b <= right1; b++)
												{
													if (pai[b] >= 2)
													{
														int maxx = 0;
														while (b <= right1 && pai[b] >= 2)
														{
															b++;
															maxx++;
														}
														b--;
														if (maxx > max)
														{
															max = maxx;
															end = b;
														}
													}
												}
												if (end)
												{
													sum2 -= max;
													for (int c = end - max + 1; c <= end; c++)
														if (pai[c] == 3)
															sum2++;
												}
												if (sum1 < sum2)
												{
													if (one + two > three)
													{
														for (int b = left; b <= right; b++)
														{
															if (pai[b] == 1)
															{
																pais[0] = 1;
																pais[1] = b;
																return;
															}
															else if (pai[b] == 2)
															{
																if (lastpais(person, now, 2) == 0)
																	continue;
																pais[0] = 2;
																pais[1] = pais[2] = b;
																return;
															}
														}
													}
													continue;
												}
												else
												{
													if (end)
													{
														pais[0] = end - left + 1;
														one = 1;
														while (left <= end)
															pais[one++] = left++;
														return;
													}
													else
													{
														pais[0] = right - left + 1;
														one = 1;
														while (left <= right)
															pais[one++] = left++;
														return;
													}
												}
											}
											else
											{
												if (pai[left1] >= 2)
												{
													while (left1 <= right && pai[left1] >= 2)
														left1++;
													left1--;
												}
												if (pai[right1] >= 2)
												{
													while (right1 >= left && pai[right1] >= 2)
														right1--;
													right1++;
												}
												int b = right1;
												while (b <= left1 && pai[b] >= 2)
													b++;
												if (b > left1)
												{
													sum2 -= (left1 - right1 + 1);
													for (int c = right1; c <= left1; c++)
														if (pai[c] == 3)
															sum2++;
												}
												if (sum1 < sum2)
												{
													if (one + two > three)
													{
														for (int b = left; b <= right; b++)
														{
															if (pai[b] == 1)
															{
																pais[0] = 1;
																pais[1] = b;
																return;
															}
															else if (pai[b] == 2)
															{
																if (lastpais(person, now, 2) == 0)
																	continue;
																pais[0] = 2;
																pais[1] = pais[2] = b;
																return;
															}
														}
													}
													continue;
												}
												else
												{
													if (b > left1)
													{
														pais[0] = left1 - left + 1;
														one = 1;
														while (left <= left1)
															pais[one++] = left++;
														return;
													}
													else
													{
														pais[0] = right - left + 1;
														one = 1;
														while (left <= right)
															pais[one++] = left++;
														return;
													}
												}
											}
										}
									}
								}
								if (left >= kind.feiji[i][0])
									break;
							}
						}
						for (k = 3; k < 11 || k < kind.feiji[i][0]; k++)
						{
							if (k >= kind.feiji[i][0] && k <= kind.feiji[i][1])
								continue;
							if (pai[k] == 3)
							{
								int dan[21] = { 0 };
								int dui[11] = { 0 };
								for (int a = 3; a < 14; a++)
								{
									if (pai[a] == 1)
									{
										int left = a - 1, right = a + 1;
										while (left >= 3 && pai[left] && pai[left] < 3)
											left--;
										left++;
										while (right < 15 && pai[right] && pai[right] < 3)
											right++;
										right--;
										if (right - left < 4)
										{
											dan[++dan[0]] = a;
											continue;
										}
										else
										{
											while (right - left > 4)
											{
												if (pai[left] == 2)
													left++;
												else if (pai[right] == 2)
													right--;
												else
													break;
											}
											int one1 = 0, two1 = 0;
											for (int c = left; c <= right; c++)
											{
												if (pai[c] == 1)
													one1++;
												else
													two1++;
											}
											int sum1 = one1, sum2 = two1;
											int left1 = left + 4, right1 = right - 4;
											if (left1 <= right1)
											{
												if (pai[left1] == 2)
												{
													while (left1 >= left && pai[left1] == 2)
														left1--;
													left1++;
												}
												if (pai[right1] == 2)
												{
													while (right1 <= right && pai[right1] == 2)
														right1++;
													right1--;
												}
												int max = 0;
												for (int d = left1; d <= right1; d++)
												{
													if (pai[d] == 2)
													{
														int maxx = 0;
														while (d <= right1 && pai[d] == 2)
														{
															d++;
															maxx++;
														}
														d--;
														if (maxx > max)
															max = maxx;
													}
												}
												if (max)
													sum2 -= max;
											}
											else
											{
												if (pai[left1] == 2)
												{
													while (left1 <= right && pai[left1] == 2)
														left1++;
													left1--;
												}
												if (pai[right1] == 2)
												{
													while (right1 >= left && pai[right1] == 2)
														right1--;
													right1++;
												}
												int d = right1;
												while (d <= left1 && pai[d] == 2)
													d++;
												if (d > left1)
													sum2 -= (left1 - right1 + 1);
											}
											if (sum1 < sum2)
												dan[++dan[0]] = a;
										}
									}
									else
									{
										int left = a - 1, right = a + 1;
										while (left >= 3 && pai[left] && pai[left] < 3)
											left--;
										left++;
										while (right < 15 && pai[right] && pai[right] < 3)
											right++;
										right--;
										if (right - left < 4)
										{
											dui[++dui[0]] = a;
											continue;
										}
										else
										{
											int flag = 0;
											while (right - left > 4)
											{
												if (pai[left] == 2)
												{
													if (left == a)
													{
														flag = 1;
														break;
													}
													left++;
												}
												else if (pai[right] == 2)
												{
													if (right == a)
													{
														flag = 1;
														break;
													}
													right--;
												}
												else
													break;
											}
											if (flag)
											{
												dui[++dui[0]] = a;
												continue;
											}
											int one1 = 0, two1 = 0;
											for (int c = left; c <= right; c++)
											{
												if (pai[c] == 1)
													one1++;
												else
													two1++;
											}
											int sum1 = one1, sum2 = two1;
											int left1 = left + 4, right1 = right - 4;
											if (left1 <= right1)
											{
												if (pai[left1] == 2)
												{
													while (left1 >= left && pai[left1] == 2)
														left1--;
													left1++;
												}
												if (pai[right1] == 2)
												{
													while (right1 <= right && pai[right1] == 2)
														right1++;
													right1--;
												}
												int max = 0, end = 0;
												for (int d = left1; d <= right1; d++)
												{
													if (pai[d] == 2)
													{
														int maxx = 0;
														while (d <= right1 && pai[d] == 2)
														{
															d++;
															maxx++;
														}
														d--;
														if (maxx > max)
														{
															max = maxx;
															end = d;
														}
													}
												}
												if (max)
													sum2 -= max;
												if (sum1 < sum2)
													dui[++dui[0]] = a;
												else
												{
													if (end)
													{
														if (a <= end - max || a > end)
															dan[++dan[0]] = a;
													}
													else
														dan[++dan[0]] = a;
												}
											}
											else
											{
												if (pai[left1] == 2)
												{
													while (left1 <= right && pai[left1] == 2)
														left1++;
													left1--;
												}
												if (pai[right1] == 2)
												{
													while (right1 >= left && pai[right1] == 2)
														right1--;
													right1++;
												}
												int d = right1;
												while (d <= left1 && pai[d] == 2)
													d++;
												if (d > left1)
													sum2 -= (left1 - right1 + 1);
												if (sum1 < sum2)
													dui[++dui[0]] = a;
												else
												{
													if (d > left1)
													{
														if (a < right1 || a > left1)
															dan[++dan[0]] = a;
													}
													else
														dan[++dan[0]] = a;
												}
											}
										}
									}
								}
								if (dan[0] == 0 && dui[0] == 0)
									break;
								int he[21] = { 0 };
								int a, b, c;
								for (a = 1, b = 1; a <= dan[0] && b <= dui[0];)
								{
									if (dan[a] < dui[b])
										he[++he[0]] = dan[a++];
									else
										he[++he[0]] = dui[b++];
								}
								if (a > dan[0])
									while (b <= dui[0])
										he[++he[0]] = dui[b++];
								else
									while (a <= dan[0])
										he[++he[0]] = dan[a++];
								for (c = 1; c <= he[0]; c++)
								{
									if (pai[he[c]] == 1)
									{
										if (lastpais(person, now, 4) == 0)
											continue;
										pais[0] = 4;
										pais[1] = pais[2] = pais[3] = k;
										pais[4] = he[c];
										return;
									}
									else
									{
										if (lastpais(person, now, 5) == 0)
											continue;
										pais[0] = 5;
										pais[1] = pais[2] = pais[3] = k;
										pais[4] = pais[5] = he[c];
										return;
									}
								}
								break;
							}
						}
						if (kind.feiji[i][0] == 4)
						{
							for (int a = 3; a < kind.feiji[i][0] - 4; a++)
							{
								if (pai[a] == 1)
								{
									pais[0] = 1;
									pais[1] = a;
									return;
								}
								else if (pai[a] == 2)
								{
									if (lastpais(person, now, 2) == 0)
										continue;
									pais[0] = 2;
									pais[1] = pais[2] = a;
									return;
								}
							}
							pais[0] = 5;
							one = 1;
							for (int a = kind.feiji[i][0] - 4; a <= kind.feiji[i][0]; a++)
								pais[one++] = a;
							return;
						}
						else
						{
							for (int a = 3; a < kind.feiji[i][0]; a++)
							{
								if (pai[a] == 1)
								{
									pais[0] = 1;
									pais[1] = a;
									return;
								}
								else if (pai[a] == 2)
								{
									if (lastpais(person, now, 2) == 0)
										continue;
									pais[0] = 2;
									pais[1] = pais[2] = a;
									return;
								}
							}
							int dan[21] = { 0 };
							int dan1[21] = { 0 };
							int dui[11] = { 0 };
							for (int a = 3; a < kind.feiji[i][0]; a++)
							{
								if (pai[a] == 1)
								{
									int left = a - 1, right = a + 1;
									while (left >= 3 && pai[left] && pai[left] < 3)
										left--;
									left++;
									while (right < kind.feiji[i][0] && pai[right] && pai[right] < 3)
										right++;
									right--;
									if (right - left < 4)
									{
										dan[++dan[0]] = a;
										continue;
									}
									else
									{
										while (right - left > 4)
										{
											if (pai[left] == 2)
												left++;
											else if (pai[right] == 2)
												right--;
											else
												break;
										}
										int one1 = 0, two1 = 0;
										for (int b = left; b <= right; b++)
										{
											if (pai[b] == 1)
												one1++;
											else
												two1++;
										}
										int sum1 = one1, sum2 = two1;
										int left1 = left + 4, right1 = right - 4;
										if (left1 <= right1)
										{
											if (pai[left1] == 2)
											{
												while (left1 >= left && pai[left1] == 2)
													left1--;
												left1++;
											}
											if (pai[right1] == 2)
											{
												while (right1 <= right && pai[right1] == 2)
													right1++;
												right1--;
											}
											int max = 0;
											for (int b = left1; b <= right1; b++)
											{
												if (pai[b] == 2)
												{
													int maxx = 0;
													while (b <= right1 && pai[b] == 2)
													{
														maxx++;
														b++;
													}
													b--;
													if (maxx > max)
														max = maxx;
												}
											}
											sum2 -= max;
										}
										else
										{
											if (pai[left1] == 2)
											{
												while (left1 <= right && pai[left1] == 2)
													left1++;
												left1--;
											}
											if (pai[right1] == 2)
											{
												while (right1 >= left && pai[right1] == 2)
													right1--;
												right1++;
											}
											int b = right1;
											while (b <= left1 && pai[b] == 2)
												b++;
											if (b > left1)
												sum2 -= (left1 - right1 + 1);
										}
										if (sum1 < sum2)
											dan[++dan[0]] = a;
									}
								}
								if (pai[a] == 2)
								{
									int left = a - 1, right = a + 1;
									while (left >= 3 && pai[left] && pai[left] < 3)
										left--;
									left++;
									while (right < kind.feiji[i][0] && pai[right] && pai[right] < 3)
										right++;
									right--;
									if (right - left < 4)
									{
										dui[++dui[0]] = a;
										continue;
									}
									else
									{
										flag = 0;
										while (right - left > 4)
										{
											if (pai[left] == 2)
											{
												if (left == a)
												{
													flag = 1;
													dui[++dui[0]] = a;
													break;
												}
												left++;
											}
											else if (pai[right] == 2)
											{
												if (right == a)
												{
													flag = 1;
													dui[++dui[0]] = a;
													break;
												}
												right--;
											}
											else
												break;
										}
										if (flag)
											continue;
										int one1 = 0, two1 = 0;
										for (int b = left; b <= right; b++)
										{
											if (pai[b] == 1)
												one1++;
											else
												two1++;
										}
										int sum1 = one1, sum2 = two1;
										int left1 = left + 4, right1 = right - 4;
										if (left1 <= right1)
										{
											if (pai[left1] == 2)
											{
												while (left1 >= left && pai[left1] == 2)
													left1--;
												left1++;
											}
											if (pai[right1] == 2)
											{
												while (right1 <= right && pai[right1] == 2)
													right1++;
												right1--;
											}
											int max = 0, end = 0;
											for (int b = left1; b <= right1; b++)
											{
												if (pai[b] == 2)
												{
													int maxx = 0;
													while (b <= right1 && pai[b] == 2)
													{
														maxx++;
														b++;
													}
													b--;
													if (maxx > max)
													{
														max = maxx;
														end = b;
													}
												}
											}
											sum2 -= max;
											if (sum1 < sum2)
												dui[++dui[0]] = a;
											else
											{
												if (end)
												{
													if (a <= end - max || a > end)
														dan[++dan[0]] = a;
												}
												else
													dan[++dan[0]] = a;
											}
										}
										else
										{
											if (pai[left1] == 2)
											{
												while (left1 <= right && pai[left1] == 2)
													left1++;
												left1--;
											}
											if (pai[right1] == 2)
											{
												while (right1 >= left && pai[right1] == 2)
													right1--;
												right1++;
											}
											int b = right1;
											while (b <= left1 && pai[b] == 2)
												b++;
											if (b > left1)
												sum2 -= (left1 - right1 + 1);
											if (sum1 < sum2)
												dui[++dui[0]] = a;
											else
											{
												if (b > left1)
												{
													if (a < right1 || a > left1)
														dan[++dan[0]] = a;
												}
												else
													dan[++dan[0]] = a;
											}
										}
									}
								}
								if (pai[a] == 3)
								{
									if (pai[a - 1] == 3 || pai[a + 1] == 3)
										continue;
									int left = a - 1, right = a + 1;
									while (left >= 3 && pai[left] == 1)
										left--;
									if (left >= 3)
									{
										if (pai[left] == 3)
										{
											if (dui[0])
											{
												if (dui[dui[0]] == left)
													continue;
											}
										}
									}
									left++;
									while (right < kind.feiji[i][0] && pai[right] == 1)
										right++;
									right--;
									if (right - left >= 4)
									{
										for (int b = left; b <= right; b++)
											if (pai[b] == 1)
												dan1[++dan1[0]] = b;
										dui[++dui[0]] = a;
									}
								}
							}
							for (int a = kind.feiji[i][1] + 1; a <= kind.feiji[i][1] + 4; a++)
							{
								if (pai[a] == 2)
									dan[++dan[0]] = a;
								else if (pai[a] == 3)
									dui[++dui[0]] = a;
							}
							for (int a = kind.feiji[i][1] + 5; a < 14; a++)
							{
								if (pai[a] == 1)
								{
									int left = a - 1, right = a + 1;
									while (left > kind.feiji[i][1] + 4 && pai[left] && pai[left] < 3)
										left--;
									left++;
									while (right < 15 && pai[right] && pai[right] < 3)
										right++;
									right--;
									if (right - left < 4)
									{
										dan[++dan[0]] = a;
										continue;
									}
									else
									{
										while (right - left > 4)
										{
											if (pai[left] == 2)
												left++;
											else if (pai[right] == 2)
												right--;
											else
												break;
										}
										int one1 = 0, two1 = 0;
										for (int b = left; b <= right; b++)
										{
											if (pai[b] == 1)
												one1++;
											else
												two1++;
										}
										int sum1 = one1, sum2 = two1;
										int left1 = left + 4, right1 = right - 4;
										if (left1 <= right1)
										{
											if (pai[left1] == 2)
											{
												while (left1 >= left && pai[left1] == 2)
													left1--;
												left1++;
											}
											if (pai[right1] == 2)
											{
												while (right1 <= right && pai[right1] == 2)
													right1++;
												right1--;
											}
											int max = 0;
											for (int b = left1; b <= right1; b++)
											{
												if (pai[b] == 2)
												{
													int maxx = 0;
													while (b <= right1 && pai[b] == 2)
													{
														maxx++;
														b++;
													}
													b--;
													if (maxx > max)
														max = maxx;
												}
											}
											sum2 -= max;
										}
										else
										{
											if (pai[left1] == 2)
											{
												while (left1 <= right && pai[left1] == 2)
													left1++;
												left1--;
											}
											if (pai[right1] == 2)
											{
												while (right1 >= left && pai[right1] == 2)
													right1--;
												right1++;
											}
											int b = right1;
											while (b <= left1 && pai[b] == 2)
												b++;
											if (b > left1)
												sum2 -= (left1 - right1 + 1);
										}
										if (sum1 < sum2)
											dan[++dan[0]] = a;
									}
								}
								if (pai[a] == 2)
								{
									int left = a - 1, right = a + 1;
									while (left > kind.feiji[i][1] + 4 && pai[left] && pai[left] < 3)
										left--;
									left++;
									while (right < 15 && pai[right] && pai[right] < 3)
										right++;
									right--;
									if (right - left < 4)
									{
										left = a - 1;
										right = a + 1;
										while (left > kind.feiji[i][1] + 4 && pai[left] == 2)
											left--;
										left++;
										while (right < 15 && pai[right] == 2)
											right++;
										right--;
										if (right - left >= 2)
										{
											a = right;
											continue;
										}
										dui[++dui[0]] = a;
									}
									else
									{
										flag = 0;
										while (right - left > 4)
										{
											if (pai[left] == 2)
											{
												if (left == a)
												{
													flag = 1;
													dui[++dui[0]] = a;
													break;
												}
												left++;
											}
											else if (pai[right] == 2)
											{
												if (right == a)
												{
													flag = 1;
													dui[++dui[0]] = a;
													break;
												}
												right--;
											}
											else
												break;
										}
										if (flag)
											continue;
										int one1 = 0, two1 = 0;
										for (int b = left; b <= right; b++)
										{
											if (pai[b] == 1)
												one1++;
											else
												two1++;
										}
										int sum1 = one1, sum2 = two1;
										int left1 = left + 4, right1 = right - 4;
										if (left1 <= right1)
										{
											if (pai[left1] == 2)
											{
												while (left1 >= left && pai[left1] == 2)
													left1--;
												left1++;
											}
											if (pai[right1] == 2)
											{
												while (right1 <= right && pai[right1] == 2)
													right1++;
												right1--;
											}
											int max = 0, end = 0;
											for (int b = left1; b <= right1; b++)
											{
												if (pai[b] == 2)
												{
													int maxx = 0;
													while (b <= right1 && pai[b] == 2)
													{
														maxx++;
														b++;
													}
													b--;
													if (maxx > max)
													{
														max = maxx;
														end = b;
													}
												}
											}
											sum2 -= max;
											if (sum1 < sum2)
												dui[++dui[0]] = a;
											else
											{
												if (end)
												{
													if (a <= end - max || a > end)
														dan[++dan[0]] = a;
												}
												else
													dan[++dan[0]] = a;
											}
										}
										else
										{
											if (pai[left1] == 2)
											{
												while (left1 <= right && pai[left1] == 2)
													left1++;
												left1--;
											}
											if (pai[right1] == 2)
											{
												while (right1 >= left && pai[right1] == 2)
													right1--;
												right1++;
											}
											int b = right1;
											while (b <= left1 && pai[b] == 2)
												b++;
											if (b > left1)
												sum2 -= (left1 - right1 + 1);
											if (sum1 < sum2)
												dui[++dui[0]] = a;
											else
											{
												if (b > left1)
												{
													if (a < right1 || a > left1)
														dan[++dan[0]] = a;
												}
												else
													dan[++dan[0]] = a;
											}
										}
									}
								}
								if (pai[a] == 3)
								{
									if (pai[a - 1] == 3 || pai[a + 1] == 3)
										continue;
									int left = a - 1, right = a + 1;
									while (left > kind.feiji[i][1] + 4 && pai[left] == 1)
										left--;
									if (left >= 3)
									{
										if (pai[left] == 3)
										{
											if (dui[0])
											{
												if (dui[dui[0]] == left)
													continue;
											}
										}
									}
									left++;
									while (right < kind.feiji[i][0] && pai[right] == 1)
										right++;
									right--;
									if (right - left >= 4)
									{
										for (int b = left; b <= right; b++)
											if (pai[b] == 1)
												dan1[++dan1[0]] = b;
										dui[++dui[0]] = a;
									}
								}
							}
							for (int a = 1; a <= dan1[0]; a++)
							{
								for (int b = 1; b <= dan[0]; b++)
								{
									if (dan[b] == dan1[a])
									{
										for (int c = b; b < dan[0]; b++)
											dan[c] = dan[c + 1];
										dan[0]--;
										break;
									}
								}
							}
							if (dan[0] + 2 * dui[0] < 2)
							{
								pais[0] = 6;
								pais[1] = pais[2] = pais[3] = kind.feiji[i][0];
								pais[4] = pais[5] = pais[6] = pais[1] + 1;
								return;
							}
							pais[1] = pais[2] = pais[3] = kind.feiji[i][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							if (dan[0] <= 1)
							{
								if (dui[0] > 1)
								{
									pais[0] = 10;
									pais[7] = pais[8] = dui[1];
									pais[9] = pais[10] = dui[2];
									return;
								}
								else
								{
									pais[0] = 8;
									pais[7] = pais[8] = dui[1];
									return;
								}
							}
							else
							{
								if (dui[0] < 2)
								{
									pais[0] = 8;
									pais[7] = dan[1];
									pais[8] = dan[2];
									return;
								}
								else
								{
									if (dan[1] + dan[2] <= dui[1] + dui[2])
									{
										pais[0] = 8;
										pais[7] = dan[1];
										pais[8] = dan[2];
										return;
									}
									else
									{
										pais[0] = 10;
										pais[7] = pais[8] = dui[1];
										pais[9] = pais[10] = dui[2];
										return;
									}
								}
							}
						}
					}
					if (kind.feiji[i][0] == 3 && kind.feiji[i][1] == 3)
					{
						int a = person[now].card[0];
						one = two = three = four = 0;
						for (int b = 3; b < 16; b++)
						{
							if (pai[b] == 1)
								one++;
							else if (pai[b] == 2)
								two++;
							else if (pai[b] == 3)
								three++;
							else if (pai[b] == 4)
								four++;
						}
						if (a <= 7)
						{
							feiji_2_0(kind.feiji[i][0], pais);
							return;
						}
						else if (a == 8)
						{
							if (pai[16] && pai[17])
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
							feiji_2_2(pai, kind.feiji[i][0], pais);
							return;
						}
						else if (a == 9)
						{
							if (pai[16] && pai[17])
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
							feiji_2_2(pai, kind.feiji[i][0], pais);
							return;
						}
						else if (a == 10)
						{
							if (four)
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
							if (pai[16] && pai[17])
							{
								feiji_2_2(pai, kind.feiji[i][0], pais);
								return;
							}
							if (two == 2)
							{
								feiji_2_4(pai, kind.feiji[i][0], pais);
								return;
							}
							else if (two == 1)
							{
								feiji_2_2_dui(pai, kind.feiji[i][0], pais);
								return;
							}
						}
						else if (a == 11)
						{
							if (four)
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
							if (pai[16] && pai[17])
							{
								feiji_2_2(pai, kind.feiji[i][0], pais);
								return;
							}
							if (two == 2)
							{
								feiji_2_4(pai, kind.feiji[i][0], pais);
								return;
							}
							if (three == 3 && two == 1)
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
						}
						else if (a == 12)
						{
							if (four)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_0(kind.feiji[i][0], pais);
									return;
								}
								feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
							if (pai[16] && pai[17])
							{
								if (two == 2)
								{
									feiji_2_4(pai, kind.feiji[i][0], pais);
									return;
								}
								if (two == 1)
								{
									feiji_2_2_dui(pai, kind.feiji[i][0], pais);
									return;
								}
								else
								{
									if (three == 3)
									{
										feiji_2_0(kind.feiji[i][0], pais);
										return;
									}
								}
							}
							if (two == 3)
							{
								feiji_2_4(pai, kind.feiji[i][0], pais);
								return;
							}
						}
						if (a == 13)
						{
							if (four)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_0(kind.feiji[i][0], pais);
									return;
								}
								feiji_2_2(pai, kind.feiji[i][0], pais);
								return;
							}
							if (pai[16] && pai[17])
							{
								if (two == 2)
								{
									feiji_2_4(pai, kind.feiji[i][0], pais);
									return;
								}
								if (three == 3)
								{
									if (two)
									{
										feiji_2_0(kind.feiji[i][0], pais);
										return;
									}
									else
									{
										feiji_2_2_san(pai, kind.feiji[i][0], pais);
										return;
									}
								}
							}
						}
						else if (a == 14)
						{
							if (four == 2)
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
							else if (four == 1)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
								if (two == 2)
								{
									feiji_2_4(pai, kind.feiji[i][0], pais);
									return;
								}
								else if (two == 1)
								{
									feiji_2_2_dui_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
								else if (three == 3)
								{
									feiji_2_0(kind.feiji[i][0], pais);
									return;
								}
							}
							else
							{
								if (pai[16] && pai[17])
								{
									if (two >= 2)
									{
										feiji_2_4(pai, kind.feiji[i][0], pais);
										return;
									}
									if (three == 3)
									{
										feiji_2_2_san(pai, kind.feiji[i][0], pais);
										return;
									}
									if (three == 4)
									{
										feiji_2_2(pai, kind.feiji[i][0], pais);
										return;
									}
								}
							}
						}
						else if (a == 15)
						{
							if (four == 2)
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
							else if (four == 1)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
								if (two == 2)
								{
									feiji_2_4(pai, kind.feiji[i][0], pais);
									return;
								}
								if (three == 3)
								{
									feiji_2_2_san(pai, kind.feiji[i][0], pais);
									return;
								}
							}
						}
						if (a == 16)
						{
							if (four == 2)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_0(kind.feiji[i][0], pais);
									return;
								}
								feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
							else if (four == 1)
							{
								if (pai[16] && pai[17])
								{
									if (two == 2)
									{
										feiji_2_4(pai, kind.feiji[i][0], pais);
										return;
									}
									else if (two == 1)
									{
										feiji_2_2_dui_zhadan(pai, kind.feiji[i][0], pais);
										return;
									}
									else if (three == 3)
									{
										feiji_2_0(kind.feiji[i][0], pais);
										return;
									}
								}
								else
								{
									if (two == 3)
									{
										feiji_2_4(pai, kind.feiji[i][0], pais);
										return;
									}
									else if (three == 3)
									{
										feiji_2_2_san_zhadan(pai, kind.feiji[i][0], pais);
										return;
									}
									else if (three == 4)
									{
										feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
										return;
									}
								}
							}
						}
						else if (a == 17)
						{
							if (four == 2)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_0(kind.feiji[i][0], pais);
									return;
								}
								feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
							else if (four == 1)
							{
								if (pai[16] && pai[17])
								{
									if (two == 2)
									{
										feiji_2_4(pai, kind.feiji[i][0], pais);
										return;
									}
									if (three == 3)
									{
										feiji_2_2_san_zhadan(pai, kind.feiji[i][0], pais);
										return;
									}
								}
							}
						}
						else if (a == 18)
						{
							if (four == 3)
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
							else if (four == 2)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
								if (two == 2)
								{
									feiji_2_4(pai, kind.feiji[i][0], pais);
									return;
								}
								if (three == 3)
								{
									feiji_2_0(kind.feiji[i][0], pais);
									return;
								}
								if (two == 1)
								{
									feiji_2_2_dui_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
								feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
							else if (four == 1)
							{
								if (pai[16] && pai[17])
								{
									if (two >= 2)
									{
										feiji_2_4(pai, kind.feiji[i][0], pais);
										return;
									}
									if (three == 4)
									{
										feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
										return;
									}
									if (three == 3)
									{
										feiji_2_2_san_zhadan(pai, kind.feiji[i][0], pais);
										return;
									}
								}
							}
						}
						if (a == 19)
						{
							if (four == 3)
							{
								feiji_2_0(kind.feiji[i][0], pais);
								return;
							}
							else if (four == 2)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
								if (two == 2)
								{
									feiji_2_4(pai, kind.feiji[i][0], pais);
									return;
								}
								if (three == 3)
								{
									feiji_2_2_san_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
							}
							else if (four == 1)
							{
								if (pai[16] && pai[17])
								{
									if (two == 2 && three == 3)
									{
										feiji_2_4(pai, kind.feiji[i][0], pais);
										return;
									}
								}
							}
						}
						else if (a == 20)
						{
							if (four == 3)
							{
								if (pai[16] && pai[17])
								{
									feiji_2_0(kind.feiji[i][0], pais);
									return;
								}
								feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
							else if (four == 2)
							{
								if (pai[16] && pai[17])
								{
									if (two == 2)
									{
										feiji_2_4(pai, kind.feiji[i][0], pais);
										return;
									}
									if (three == 3)
									{
										feiji_2_0(kind.feiji[i][0], pais);
										return;
									}
									if (two == 1)
									{
										feiji_2_2_dui_zhadan(pai, kind.feiji[i][0], pais);
										return;
									}
									feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
								if (two >= 2)
								{
									feiji_2_4(pai, kind.feiji[i][0], pais);
									return;
								}
								if (three == 3)
								{
									feiji_2_2_san_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
								else if (three == 4)
								{
									feiji_2_2_zhadan(pai, kind.feiji[i][0], pais);
									return;
								}
							}
						}
						for (int a = 1; a <= kind.liandui[0][0]; a++)
						{
							int left, right;
							if (kind.liandui[a][1] < kind.feiji[i][0])
							{
								left = kind.liandui[a][0];
								while (left >= 3 && (pai[left] == 1 || pai[left] == 2))
									left--;
								left++;
								if (kind.liandui[a][0] - left > 4)
								{
									right = kind.liandui[a][0] - 1;
									while (right - left > 4)
									{
										if (pai[left] == 2)
											left++;
										else
											break;
									}
									int one1 = 0, two1 = 0;
									for (int b = left; b <= right; b++)
									{
										if (pai[b] == 1)
											one1++;
										else
											two1++;
									}
									int sum1 = one1, sum2 = two1;
									int left1 = left + 4, right1 = right - 4;
									if (left1 <= right1)
									{
										if (pai[left1] == 2)
										{
											while (left1 >= left && pai[left1] == 2)
												left1--;
											left1++;
										}
										if (pai[right1] == 2)
										{
											while (right1 <= right && pai[right1] == 2)
												right1++;
											right1--;
										}
										int max = 0, end = 0;
										for (int b = left1; b <= right1; b++)
										{
											if (pai[b] == 2)
											{
												int maxx = 0;
												while (b <= right1 && pai[b] == 2)
												{
													b++;
													maxx++;
												}
												b--;
												if (maxx > max)
												{
													max = maxx;
													end = b;
												}
											}
										}
										sum2 -= max;
										if (sum1 < sum2)
										{
											pais[0] = 2 * (kind.liandui[a][1] - kind.liandui[a][0] + 1);
											one = 1;
											for (int b = kind.liandui[a][0]; b <= kind.liandui[a][1]; b++)
											{
												pais[one] = pais[one + 1] = b;
												one += 2;
											}
											return;
										}
										else
										{
											if (end)
											{
												pais[0] = end - left + 1;
												one = 1;
												while (left <= end)
													pais[one++] = left++;
												return;
											}
											else
											{
												pais[0] = right - left + 1;
												one = 1;
												while (left <= right)
													pais[one++] = left++;
												return;
											}
										}
									}
									else
									{
										if (pai[left1] == 2)
										{
											while (left1 <= right && pai[left1] == 2)
												left1++;
											left1--;
										}
										if (pai[right1] == 2)
										{
											while (right1 >= left && pai[right1] == 2)
												right1--;
											right1++;
										}
										int b = right1;
										while (b <= left1 && pai[b] == 2)
											b++;
										if (b > left1)
											sum2 -= (left1 - right1 + 1);
										if (sum1 < sum2)
										{
											pais[0] = 2 * (kind.liandui[a][1] - kind.liandui[a][0] + 1);
											one = 1;
											for (int b = kind.liandui[a][0]; b <= kind.liandui[a][1]; b++)
											{
												pais[one] = pais[one + 1] = b;
												one += 2;
											}
											return;
										}
										else
										{
											if (b > left1)
											{
												pais[0] = left1 - left + 1;
												one = 1;
												while (left <= left1)
													pais[one++] = left++;
												return;
											}
											else
											{
												pais[0] = right - left + 1;
												one = 1;
												while (left <= right)
													pais[one++] = left++;
												return;
											}
										}
									}
								}
								if (kind.liandui[a][0] - left <= 4)
								{
									pais[0] = 2 * (kind.liandui[a][1] - kind.liandui[a][0] + 1);
									one = 1;
									for (int b = kind.liandui[a][0]; b <= kind.liandui[a][1]; b++)
									{
										pais[one] = pais[one + 1] = b;
										one += 2;
									}
									return;
								}
							}
							if (kind.liandui[a][1] > kind.feiji[i][1])
								break;
						}
						for (int a = 1; a <= kind.shunzi[0][0]; a++)
						{
							int left = 0, right = 0;
							if (kind.shunzi[a][0] < kind.feiji[i][0])
							{
								left = kind.shunzi[a][0];
								if (kind.shunzi[a][1] >= kind.feiji[i][1])
									right = kind.feiji[i][0] - 1;
								else
									right = kind.shunzi[a][1];
								while (right - left > 4)
								{
									if (pai[left] == 4)
										left++;
									else if (pai[right] == 4)
										right--;
									else if (pai[left] == 3)
										left++;
									else if (pai[right] == 3)
										right--;
									else if (pai[left] == 2)
										left++;
									else if (pai[right] == 2)
										right--;
									else
										break;
								}
								if (right - left < 4)
								{
									continue;
								}
								if (right - left >= 4)
								{
									int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
									for (int b = left; b <= right; b++)
									{
										if (pai[b] == 1)
											one1++;
										else if (pai[b] == 2)
											two1++;
										else if (pai[b] == 3)
											three1++;
										else
											four1++;
									}
									if (three1 > 1 || four1)
										continue;
									int sum1 = two1, sum2 = two1;
									int left1 = left + 4, right1 = right - 4;
									if (left1 <= right1)
									{
										if (pai[left1] == 2)
										{
											while (left1 >= left && pai[left1] >= 2)
												left1--;
											left1++;
										}
										if (pai[right1] == 2)
										{
											while (right1 <= right && pai[right1] >= 2)
												right1++;
											right1--;
										}
										int max = 0, end = 0;
										for (int b = left1; b <= right1; b++)
										{
											if (pai[b] > 1)
											{
												int maxx = 0;
												while (b <= right1 && pai[b] > 1)
												{
													b++;
													maxx++;
												}
												b--;
												if (maxx > max)
												{
													max = maxx;
													end = b;
												}
											}
										}
										if (max)
										{
											sum2 -= max;
											for (int b = end - max + 1; b <= end; b++)
												if (pai[b] == 3)
													sum2++;
										}
										if (sum1 >= sum2)
										{
											if (end)
											{
												pais[0] = end - left + 1;
												one = 1;
												while (left <= end)
													pais[one++] = left++;
												return;
											}
											else
											{
												pais[0] = right - left + 1;
												one = 1;
												while (left <= right)
													pais[one++] = left++;
												return;
											}
										}
									}
									if (left1 > right1)
									{
										if (pai[left1] == 2)
										{
											while (left1 <= right && pai[left1] >= 2)
												left1++;
											left1--;
										}
										if (pai[right1] == 2)
										{
											while (right1 >= left && pai[right1] >= 2)
												right1--;
											right1++;
										}
										int b = right1;
										while (b <= left1 && pai[b] > 1)
											b++;
										if (b > left1)
										{
											sum2 -= (left1 - right1 + 1);
											for (int c = right1; c <= left1; c++)
												if (pai[c] == 3)
													sum2++;
										}
										if (sum1 >= sum2)
										{
											if (b > left1)
											{
												pais[0] = left1 - left + 1;
												one = 1;
												while (left <= left1)
													pais[one++] = left++;
												return;
											}
											else
											{
												pais[0] = right - left + 1;
												one = 1;
												while (left <= right)
													pais[one++] = left++;
												return;
											}
										}
									}
								}
							}
							if (kind.shunzi[a][0] >= kind.feiji[i][0])
								break;
						}
						int dan[21] = { 0 };
						int dui[11] = { 0 };
						int dan1[21] = { 0 };
						for (int a = 3; a < 14; a++)
						{
							if (pai[a] == 1)
							{
								int left = a - 1, right = a + 1;
								while (left >= 3 && pai[left] && pai[left] < 3)
									left--;
								left++;
								while (right < 15 && pai[right] && pai[right] < 3)
									right++;
								right--;
								if (right - left < 4)
								{
									dan[++dan[0]] = a;
									continue;
								}
								while (right - left > 4)
								{
									if (pai[left] == 2)
										left++;
									else if (pai[right] == 2)
										right--;
									else
										break;
								}
								int one1 = 0, two1 = 0;
								for (int b = left; b <= right; b++)
								{
									if (pai[b] == 1)
										one1++;
									else
										two1++;
								}
								int sum1 = one1, sum2 = two1;
								int left1 = left + 4, right1 = right - 4;
								if (left1 <= right1)
								{
									if (pai[left1] == 2)
									{
										while (left1 >= left && pai[left1] == 2)
											left1--;
										left1++;
									}
									if (pai[right1] == 2)
									{
										while (right1 <= right && pai[right1] == 2)
											right1++;
										right1--;
									}
									int max = 0;
									for (int b = left1; b <= right1; b++)
									{
										if (pai[b] == 2)
										{
											int maxx = 0;
											while (b <= right1 && pai[b] == 2)
											{
												b++;
												maxx++;
											}
											b--;
											if (maxx > max)
												max = maxx;
										}
									}
									sum2 -= max;
								}
								else
								{
									if (pai[left1] == 2)
									{
										while (left1 <= right && pai[left1] == 2)
											left1++;
										left1--;
									}
									if (pai[right1] == 2)
									{
										while (right1 >= left && pai[right1] == 2)
											right1--;
										right1++;
									}
									int b = right1;
									while (b <= left1 && pai[b] == 2)
										b++;
									if (b > left1)
										sum2 -= (left1 - right1 + 1);
								}
								if (sum1 < sum2)
								{
									dan[++dan[0]] = a;
									continue;
								}
							}
							if (pai[a] == 2)
							{
								int left = a - 1, right = a + 1;
								while (left >= 3 && pai[left] && pai[left] < 3)
									left--;
								left++;
								while (right < 15 && pai[right] && pai[right] < 3)
									right++;
								right--;
								if (right - left < 4)
								{
									dui[++dui[0]] = a;
									continue;
								}
								flag = 0;
								while (right - left > 4)
								{
									if (pai[left] == 2)
									{
										if (a == left)
										{
											flag = 1;
											break;
										}
										left++;
									}
									else if (pai[right] == 2)
									{
										if (a == right)
										{
											flag = 1;
											break;
										}
										right--;
									}
									else
										break;
								}
								if (flag)
								{
									dui[++dui[0]] = a;
									continue;
								}
								int one1 = 0, two1 = 0;
								for (int b = left; b <= right; b++)
								{
									if (pai[b] == 1)
										one1++;
									else
										two1++;
								}
								int sum1 = one1, sum2 = two1;
								int left1 = left + 4, right1 = right - 4;
								if (left1 <= right1)
								{
									if (pai[left1] == 2)
									{
										while (left1 >= left && pai[left1] == 2)
											left1--;
										left1++;
									}
									if (pai[right1] == 2)
									{
										while (right1 <= right && pai[right1] == 2)
											right1++;
										right1--;
									}
									int max = 0, end = 0;
									for (int b = left1; b <= right1; b++)
									{
										if (pai[b] == 2)
										{
											int maxx = 0;
											while (b <= right1 && pai[b] == 2)
											{
												b++;
												maxx++;
											}
											b--;
											if (maxx > max)
											{
												max = maxx;
												end = b;
											}
										}
									}
									sum2 -= max;
									if (sum1 < sum2)
										dui[++dui[0]] = a;
									else
									{
										if (max)
										{
											if (a <= end - max || a > end)
												dan[++dan[0]] = a;
										}
										else
											dan[++dan[0]] = a;
									}
								}
								else
								{
									if (pai[left1] == 2)
									{
										while (left1 <= right && pai[left1] == 2)
											left1++;
										left1--;
									}
									if (pai[right1] == 2)
									{
										while (right1 >= left && pai[right1] == 2)
											right1--;
										right1++;
									}
									int b = right1;
									while (b <= left1 && pai[b] == 2)
										b++;
									if (b > left1)
										sum2 -= (left1 - right1 + 1);
									if (sum1 < sum2)
										dui[++dui[0]] = a;
									else
									{
										if (b > left1)
										{
											if (a < right1 || a > left1)
												dan[++dan[0]] = a;
										}
										else
											dan[++dan[0]] = a;
									}
								}
							}
							if (pai[a] == 3)
							{
								if (pai[a - 1] == 3 || pai[a + 1] == 3)
									continue;
								int left = a - 1, right = a + 1;
								while (left >= 3 && pai[left] == 1)
									left--;
								left++;
								while (right < 15 && pai[right] == 1)
									right++;
								right--;
								if (right - left >= 4)
								{
									dui[++dui[0]] = a;
									for (int b = left; b <= right; b++)
										if (pai[b] == 1)
											dan1[++dan[0]] = b;
								}
							}
						}
						for (int a = 1; a <= dan1[0]; a++)
						{
							for (int b = 1; b <= dan[0]; b++)
							{
								if (dan1[a] == dan[b])
								{
									for (int c = b; c < dan[0]; c++)
										dan[c] = dan[c + 1];
									dan[0]--;
									break;
								}
							}
						}
						for (int a = 1; a <= kind.liandui[0][0]; a++)
						{
							for (int b = kind.liandui[a][0]; b <= kind.liandui[a][1]; b++)
							{
								for (int c = 1; c <= dui[0]; c++)
								{
									if (b == dui[c])
									{
										for (int d = c; d < dui[0]; d++)
											dui[d] = dui[d + 1];
										dui[0]--;
										break;
									}
								}
							}
						}
						for (int a = 3; a < kind.feiji[i][0]; a++)
						{
							if (pai[a] == 3)
							{
								if (dan[0] && dui[0])
								{
									if (dan[1] <= dui[1])
									{
										if (lastpais(person, now, 4))
										{
											pais[0] = 4;
											pais[1] = pais[2] = pais[3] = a;
											pais[4] = dan[1];
											return;
										}
										else if (lastpais(person, now, 5))
										{
											pais[0] = 5;
											pais[1] = pais[2] = pais[3] = a;
											pais[4] = pais[5] = dui[1];
											return;
										}
										else
										{
											pais[0] = 3;
											pais[1] = pais[2] = pais[3] = a;
											return;
										}
									}
									else
									{
										if (lastpais(person, now, 5))
										{
											pais[0] = 5;
											pais[1] = pais[2] = pais[3] = a;
											pais[4] = pais[5] = dui[1];
											return;
										}
										else if (lastpais(person, now, 4))
										{
											pais[0] = 4;
											pais[1] = pais[2] = pais[3] = a;
											pais[4] = dan[1];
											return;
										}
										else
										{
											pais[0] = 3;
											pais[1] = pais[2] = pais[3] = a;
											return;
										}
									}
								}
								else if (dan[0])
								{
									if (lastpais(person, now, 4))
									{
										pais[0] = 4;
										pais[1] = pais[2] = pais[3] = a;
										pais[4] = dan[1];
										return;
									}
									else
									{
										pais[0] = 3;
										pais[1] = pais[2] = pais[3] = a;
										return;
									}
								}
								else if (dui[0])
								{
									if (lastpais(person, now, 5))
									{
										pais[0] = 5;
										pais[1] = pais[2] = pais[3] = a;
										pais[4] = pais[5] = dui[1];
										return;
									}
									else
									{
										pais[0] = 3;
										pais[1] = pais[2] = pais[3] = a;
										return;
									}
								}
								else
								{
									pais[0] = 3;
									pais[1] = pais[2] = pais[3] = a;
									return;
								}
							}
						}
						if (2 * dan[0] + dui[0] < 2)
						{
							pais[0] = 6;
							pais[1] = pais[2] = pais[3] = kind.feiji[i][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							return;
						}
						else
						{
							pais[1] = pais[2] = pais[3] = kind.feiji[i][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							if (dan[0] > 1 && dui[0] > 1)
							{
								if (dan[1] + dan[2] <= dui[1] + dui[2])
								{
									pais[0] = 8;
									pais[7] = dan[1];
									pais[8] = dan[2];
									return;
								}
								else
								{
									pais[0] = 10;
									pais[7] = pais[8] = dui[1];
									pais[9] = pais[10] = dui[2];
									return;
								}
							}
							else if (dan[0] > 1)
							{
								pais[0] = 8;
								pais[7] = dan[1];
								pais[8] = dan[2];
								return;
							}
							else if (dui[0] > 1)
							{
								pais[0] = 10;
								pais[7] = pais[8] = dui[1];
								pais[9] = pais[10] = dui[2];
								return;
							}
							else
							{
								pais[0] = 8;
								pais[7] = pais[8] = dui[1];
								return;
							}
						}
					}
				}
				int dan[21] = { 0 };
				int dan1[21] = { 0 };
				int dui[11] = { 0 };
				for (int a = 3; a < 15; a++)
				{
					if (pai[a] == 1)
					{
						int left = a - 1, right = a + 1;
						while (left >= 3 && pai[left] && pai[left] < 3)
							left--;
						left++;
						while (right < 15 && pai[right] && pai[right] < 3)
							right++;
						right--;
						if (right - left < 4)
						{
							dan[++dan[0]] = a;
							continue;
						}
						while (right - left > 4)
						{
							if (pai[left] == 2)
								left++;
							else if (pai[right] == 2)
								right--;
							else
								break;
						}
						int one1 = 0, two1 = 0;
						for (int b = left; b <= right; b++)
						{
							if (pai[b] == 1)
								one1++;
							else
								two1++;
						}
						int sum1 = one1, sum2 = two1;
						int left1 = left + 4, right1 = right - 4;
						if (left1 <= right1)
						{
							if (pai[left1] == 2)
							{
								while (left1 >= left && pai[left1] == 2)
									left1--;
								left1++;
							}
							if (pai[right1] == 2)
							{
								while (right1 <= right && pai[right1] == 2)
									right1++;
								right1--;
							}
							int max = 0;
							for (int b = left1; b <= right1; b++)
							{
								if (pai[b] == 2)
								{
									int maxx = 0;
									while (b <= right1 && pai[b] == 2)
									{
										b++;
										maxx++;
									}
									b--;
									if (maxx > max)
										max = maxx;
								}
							}
							sum2 -= max;
						}
						else
						{
							if (pai[left1] == 2)
							{
								while (left1 <= right && pai[left1] == 2)
									left1++;
								left1--;
							}
							if (pai[right1] == 2)
							{
								while (right1 >= left && pai[right1] == 2)
									right1--;
								right1++;
							}
							int b = right1;
							while (b <= left1 && pai[b] == 2)
								b++;
							if (b > left1)
								sum2 -= (left1 - right1 + 1);
						}
						if (sum1 < sum2)
						{
							dan[++dan[0]] = a;
							continue;
						}
					}
					if (pai[a] == 2)
					{
						int left = a - 1, right = a + 1;
						while (left >= 3 && pai[left] && pai[left] < 3)
							left--;
						left++;
						while (right < 15 && pai[right] && pai[right] < 3)
							right++;
						right--;
						if (right - left < 4)
						{
							dui[++dui[0]] = a;
							continue;
						}
						flag = 0;
						while (right - left > 4)
						{
							if (pai[left] == 2)
							{
								if (a == left)
								{
									flag = 1;
									break;
								}
								left++;
							}
							else if (pai[right] == 2)
							{
								if (a == right)
								{
									flag = 1;
									break;
								}
								right--;
							}
							else
								break;
						}
						if (flag)
						{
							dui[++dui[0]] = a;
							continue;
						}
						int one1 = 0, two1 = 0;
						for (int b = left; b <= right; b++)
						{
							if (pai[b] == 1)
								one1++;
							else
								two1++;
						}
						int sum1 = one1, sum2 = two1;
						int left1 = left + 4, right1 = right - 4;
						if (left1 <= right1)
						{
							if (pai[left1] == 2)
							{
								while (left1 >= left && pai[left1] == 2)
									left1--;
								left1++;
							}
							if (pai[right1] == 2)
							{
								while (right1 <= right && pai[right1] == 2)
									right1++;
								right1--;
							}
							int max = 0, end = 0;
							for (int b = left1; b <= right1; b++)
							{
								if (pai[b] == 2)
								{
									int maxx = 0;
									while (b <= right1 && pai[b] == 2)
									{
										b++;
										maxx++;
									}
									b--;
									if (maxx > max)
									{
										max = maxx;
										end = b;
									}
								}
							}
							sum2 -= max;
							if (sum1 < sum2)
								dui[++dui[0]] = a;
							else
							{
								if (max)
								{
									if (a <= end - max || a > end)
										dan[++dan[0]] = a;
								}
								else
									dan[++dan[0]] = a;
							}
						}
						else
						{
							if (pai[left1] == 2)
							{
								while (left1 <= right && pai[left1] == 2)
									left1++;
								left1--;
							}
							if (pai[right1] == 2)
							{
								while (right1 >= left && pai[right1] == 2)
									right1--;
								right1++;
							}
							int b = right1;
							while (b <= left1 && pai[b] == 2)
								b++;
							if (b > left1)
								sum2 -= (left1 - right1 + 1);
							if (sum1 < sum2)
								dui[++dui[0]] = a;
							else
							{
								if (b > left1)
								{
									if (a < right1 || a > left1)
										dan[++dan[0]] = a;
								}
								else
									dan[++dan[0]] = a;
							}
						}
					}
					if (pai[a] == 3)
					{
						if (pai[a - 1] == 3 || pai[a + 1] == 3)
							continue;
						int left = a - 1, right = a + 1;
						while (left >= 3 && pai[left] == 1)
							left--;
						left++;
						while (right < 15 && pai[right] == 1)
							right++;
						right--;
						if (right - left >= 4)
						{
							dui[++dui[0]] = a;
							for (int b = left; b <= right; b++)
								if (pai[b] == 1)
									dan1[++dan[0]] = b;
						}
					}
				}
				for (int a = 1; a <= dan1[0]; a++)
				{
					for (int b = 1; b <= dan[0]; b++)
					{
						if (dan1[a] == dan[b])
						{
							for (int c = b; c < dan[0]; c++)
								dan[c] = dan[c + 1];
							dan[0]--;
							break;
						}
					}
				}
				for (int a = 1; a <= kind.liandui[0][0]; a++)
				{
					for (int b = kind.liandui[a][0]; b <= kind.liandui[a][1]; b++)
					{
						for (int c = 1; c <= dui[0]; c++)
						{
							if (b == dui[c])
							{
								for (int d = c; d < dui[0]; d++)
									dui[d] = dui[d + 1];
								dui[0]--;
								break;
							}
						}
					}
				}
				for (int a = 1; a <= kind.liandui[0][0]; a++)
				{
					int left, right;
					if (kind.liandui[a][1] < kind.feiji[i][0])
					{
						left = kind.liandui[a][0];
						right = kind.liandui[a][1];
						while (left >= 3 && (pai[left] == 1 || pai[left] == 2))
							left--;
						left++;
						if (kind.liandui[a][0] - left > 4)
						{
							right = kind.liandui[a][0] - 1;
							while (right - left > 4)
							{
								if (pai[left] == 2)
									left++;
								else if (pai[right] == 2)
									right--;
								else
									break;
							}
							int one1 = 0, two1 = 0;
							for (int b = left; b <= right; b++)
							{
								if (pai[b] == 1)
									one1++;
								else
									two1++;
							}
							int sum1 = one1, sum2 = two1;
							int left1 = left + 4, right1 = right - 4;
							if (left1 <= right1)
							{
								if (pai[left1] == 2)
								{
									while (left1 >= left && pai[left1] == 2)
										left1--;
									left1++;
								}
								if (pai[right1] == 2)
								{
									while (right1 <= right && pai[right1] == 2)
										right1++;
									right1--;
								}
								int max = 0, end = 0;
								for (int b = left1; b <= right1; b++)
								{
									if (pai[b] == 2)
									{
										int maxx = 0;
										while (b <= right1 && pai[b] == 2)
										{
											b++;
											maxx++;
										}
										b--;
										if (maxx > max)
										{
											end = b;
											max = maxx;
										}
									}
								}
								sum2 -= max;
								if (sum2 <= sum1)
								{
									if (max)
									{
										pais[0] = end - left + 1;
										one = 1;
										while (left <= end)
											pais[one++] = left++;
										return;
									}
									pais[0] = right - left + 1;
									one = 1;
									while (left <= right)
										pais[one++] = left++;
									return;
								}
							}
							else
							{
								if (pai[left1] == 2)
								{
									while (left1 <= right && pai[left1] == 2)
										left1++;
									left1--;
								}
								if (pai[right1] == 2)
								{
									while (right1 >= left && pai[right1] == 2)
										right1--;
									right1++;
								}
								int b = right1;
								while (b <= left1 && pai[b] == 2)
									b++;
								if (b > left1)
									sum2 -= (left1 - right1 + 1);
								if (sum2 <= sum1)
								{
									if (b > left1)
									{
										pais[0] = left1 - left + 1;
										one = 1;
										while (left <= left1)
											pais[one++] = left++;
										return;
									}
									else
									{
										pais[0] = right - left + 1;
										one = 1;
										while (left <= right)
											pais[one++] = left++;
										return;
									}
								}
							}
						}
						left = kind.liandui[a][0] - 1;
						right = kind.liandui[a][1] + 1;
						while (left >= 3 && pai[left] == 1)
							left--;
						left++;
						while (right < 15 && pai[right] == 1)
							right++;
						right--;
						if (left < kind.liandui[a][0] && right > kind.liandui[a][1])
						{
							if (kind.liandui[a][1] - left >= 4 && right - kind.liandui[a][0] >= 4)
							{
								pais[0] = kind.liandui[a][1] - left + 1;
								one = 1;
								while (left <= kind.liandui[a][1])
									pais[one++] = left++;
								return;
							}
						}
						pais[0] = 2 * (kind.liandui[a][1] - kind.liandui[a][0] + 1);
						one = 1;
						for (int b = kind.liandui[a][0]; b <= kind.liandui[a][1]; b++)
						{
							pais[one] = pais[one + 1] = b;
							one += 2;
						}
						return;
					}
					if (kind.liandui[a][1] > kind.feiji[i][1])
						break;
				}
				for (int a = 1; a <= kind.shunzi[0][0]; a++)
				{
					int left = 0, right = 0;
					if (kind.shunzi[a][0] < kind.feiji[i][0])
					{
						left = kind.shunzi[a][0];
						if (kind.shunzi[a][1] >= kind.feiji[i][1])
							right = kind.feiji[i][0] - 1;
						else
							right = kind.shunzi[a][1];
						while (right - left > 4)
						{
							if (pai[left] == 4)
								left++;
							else if (pai[right] == 4)
								right--;
							else if (pai[left] == 3)
								left++;
							else if (pai[right] == 3)
								right--;
							else if (pai[left] == 2)
								left++;
							else if (pai[right] == 2)
								right--;
							else
								break;
						}
						if (right - left < 4)
							continue;
						int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
						for (int b = 3; b < left; b++)
						{
							if (pai[b] == 1)
								one1++;
							else if (pai[b] == 2)
								two1++;
							else if (pai[b] == 3)
								three1++;
							else if (pai[b] == 4)
								four1++;
						}
						if (four1 || three1 > 1)
							continue;
						int sum1 = one1, sum2 = two1;
						int left1 = left + 4, right1 = right - 4;
						if (left1 <= right1)
						{
							if (pai[left1] >= 2)
							{
								while (left1 >= left && pai[left1] >= 2)
									left1--;
								left1++;
							}
							if (pai[right1] >= 2)
							{
								while (right1 <= right && pai[right1] >= 2)
									right1++;
								right1--;
							}
							int max = 0, end = 0;
							for (int b = left1; b <= right1; b++)
							{
								if (pai[b] >= 2)
								{
									int maxx = 0;
									while (b <= right1 && pai[b] >= 2)
									{
										b++;
										maxx++;
									}
									b--;
									if (maxx > max)
									{
										end = b;
										max = maxx;
									}
								}
							}
							sum2 -= max;
							if (sum2 <= sum1)
							{
								if (max)
								{
									pais[0] = end - left + 1;
									one = 1;
									while (left <= end)
										pais[one++] = left++;
									return;
								}
								pais[0] = right - left + 1;
								one = 1;
								while (left <= right)
									pais[one++] = left++;
								return;
							}
						}
						else
						{
							if (pai[left1] >= 2)
							{
								while (left1 <= right && pai[left1] >= 2)
									left1++;
								left1--;
							}
							if (pai[right1] >= 2)
							{
								while (right1 >= left && pai[right1] >= 2)
									right1--;
								right1++;
							}
							int b = right1;
							while (b <= left1 && pai[b] >= 2)
								b++;
							if (b > left1)
								sum2 -= (left1 - right1 + 1);
							if (sum2 <= sum1)
							{
								if (b > left1)
								{
									pais[0] = left1 - left + 1;
									one = 1;
									while (left <= left1)
										pais[one++] = left++;
									return;
								}
								else
								{
									pais[0] = right - left + 1;
									one = 1;
									while (left <= right)
										pais[one++] = left++;
									return;
								}
							}
						}
					}
					if (kind.shunzi[a][0] >= kind.feiji[i][0])
						break;
				}
				for (int a = 3; a < kind.feiji[i][0]; a++)
				{
					if (pai[a] == 3)
					{
						if (lastpais(person, now, 4) && lastpais(person, now, 5))
						{
							if (dan[0] && dui[0])
							{
								if (dan[1] <= dui[1])
								{
									pais[0] = 4;
									pais[1] = pais[2] = pais[3] = a;
									pais[4] = dan[1];
									return;
								}
								else
								{
									pais[0] = 5;
									pais[1] = pais[2] = pais[3] = a;
									pais[4] = pais[5] = dui[1];
									return;
								}
							}
							else if (dan[0])
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = a;
								pais[4] = dan[1];
								return;
							}
							else if (dui[0])
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = a;
								pais[4] = pais[5] = dui[1];
								return;
							}
							else
							{
								if (lastpais(person, now, 3))
								{
									pais[0] = 3;
									pais[1] = pais[2] = pais[3] = a;
									return;
								}
								else
									break;
							}
						}
						else if (lastpais(person, now, 4))
						{
							if (dan[0])
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = a;
								pais[4] = dan[1];
								return;
							}
							else
							{
								if (lastpais(person, now, 3))
								{
									pais[0] = 3;
									pais[1] = pais[2] = pais[3] = a;
									return;
								}
								else
									break;
							}
						}
						else if (lastpais(person, now, 5))
						{
							if (dui[0])
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = a;
								pais[4] = pais[5] = dui[1];
								return;
							}
							else
							{
								if (lastpais(person, now, 3))
								{
									pais[0] = 3;
									pais[1] = pais[2] = pais[3] = a;
									return;
								}
								else
									break;
							}
						}
						else
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = a;
							return;
						}
					}
				}
				one = two = three = four = 0;
				for (int a = 3; a < 16; a++)
				{
					if (pai[a] == 1)
						one++;
					else if (pai[a] == 2)
						two++;
					else if (pai[a] == 3)
						three++;
					else if (pai[a] == 4)
						four++;
				}
				if (kind.feiji[i][1] - kind.feiji[i][0] == 2)
				{
					int a = person[now].card[0];
					if (a <= 10)
					{
						feiji_3_0(kind.feiji[i][0], pais);
						return;
					}
					else if (a == 11)
					{
						if (two || (pai[16] && pai[17]))
						{
							feiji_3_0(kind.feiji[i][0], pais);
							return;
						}
						int b;
						for (int c = 17; c >= 3; c--)
						{
							if (pai[c])
							{
								b = c;
								break;
							}
						}
						if (b > 10)
						{
							feiji_3_0(kind.feiji[i][0], pais);
							return;
						}
						else
						{
							pais[0] = 8;
							pais[1] = pais[2] = pais[3] = kind.feiji[i][0];
							pais[4] = pais[5] = pais[6] = kind.feiji[i][0] + 1;
							pais[7] = b;
							for (b--; b >= 3; b--)
								if (pai[b] == 1)
									pais[8] = b;
							return;
						}
					}
					else if (a == 12)
					{
						if (pai[16] && pai[17])
							feiji_3_0(kind.feiji[i][0], pais);
						else
							feiji_3_3(pai, kind.feiji[i][0], pais);
						return;
					}
					else if (a == 13)
					{
						if (four || (pai[16] && pai[17]))
						{
							feiji_3_0(kind.feiji[i][0], pais);
							return;
						}
						feiji_3_3(pai, kind.feiji[i][0], pais);
						return;
					}
					else if (a == 14)
					{
						if (four)
						{
							feiji_3_0(kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							feiji_3_3(pai, kind.feiji[i][0], pais);
							return;
						}
						if (two == 1)
						{
							feiji_3_3_dui(pai, kind.feiji[i][0], pais);
							return;
						}
						else if (two == 2)
						{
							feiji_2_4(pai, kind.feiji[i][0], pais);
							return;
						}
					}
					else if (a == 15)
					{
						if (four)
						{
							feiji_3_0(kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							feiji_3_3(pai, kind.feiji[i][0], pais);
							return;
						}
						if (two == 3)
						{
							feiji_3_6(pai, kind.feiji[i][0], pais);
							return;
						}
					}
					else if (a == 16)
					{
						if (four)
						{
							if (pai[16] && pai[17])
							{
								feiji_3_0(kind.feiji[i][0], pais);
								return;
							}
							feiji_3_3_zhadan(pai, kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							if (three == 4)
							{
								feiji_3_0(kind.feiji[i][0], pais);
								return;
							}
							if (two == 1)
							{
								feiji_3_3_dui(pai, kind.feiji[i][0], pais);
								return;
							}
							else if (two == 2)
							{
								feiji_2_4(pai, kind.feiji[i][0], pais);
								return;
							}
						}
						if (two == 3)
						{
							feiji_3_6(pai, kind.feiji[i][0], pais);
							return;
						}
					}
					if (a == 17)
					{
						if (four == 2)
						{
							feiji_3_0(kind.feiji[i][0], pais);
							return;
						}
						if (four == 1)
						{
							if (pai[16] && pai[17])
							{
								feiji_3_0(kind.feiji[i][0], pais);
								return;
							}
							feiji_3_3_zhadan(pai, kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							if (two == 3)
							{
								feiji_3_6(pai, kind.feiji[i][0], pais);
								return;
							}
							if (three == 4)
							{
								feiji_3_3_san(pai, kind.feiji[i][0], pais);
								return;
							}
						}
						if (two == 4)
						{
							feiji_3_6(pai, kind.feiji[i][0], pais);
							return;
						}
					}
					if (a == 18)
					{
						if (four == 2)
						{
							feiji_3_0(kind.feiji[i][0], pais);
							return;
						}
						if (four == 1)
						{
							if (pai[16] && pai[17])
							{
								feiji_3_3_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
						}
						if (pai[16] && pai[17])
						{
							if (two == 3)
							{
								feiji_3_6(pai, kind.feiji[i][0], pais);
								return;
							}
							if (three == 4)
							{
								feiji_3_3_san(pai, kind.feiji[i][0], pais);
								return;
							}
						}
						if (two == 3)
						{
							if (three == 4)
							{
								feiji_3_6(pai, kind.feiji[i][0], pais);
								return;
							}
						}
					}
					else if (a == 19)
					{
						if (four == 2)
						{
							feiji_3_0(kind.feiji[i][0], pais);
							return;
						}
						if (four == 1)
						{
							if (two == 3)
							{
								feiji_3_6(pai, kind.feiji[i][0], pais);
								return;
							}
							if (pai[16] && pai[17])
							{
								feiji_3_3_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
						}
					}
					else if (a == 20)
					{
						if (four == 2)
						{
							if (pai[16] && pai[17])
							{
								feiji_3_0(kind.feiji[i][0], pais);
								return;
							}
							feiji_3_3_zhadan(pai, kind.feiji[i][0], pais);
							return;
						}
						else if (four == 1)
						{
							if (pai[16] && pai[17])
							{
								feiji_3_3_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
							if (two == 3)
							{
								feiji_3_6(pai, kind.feiji[i][0], pais);
								return;
							}
						}
					}
					if (dan[0] + 2 * dui[0] < 3)
					{
						feiji_3_0(kind.feiji[i][0], pais);
						return;
					}
					if (dan[0] >= 3 && dui[0] >= 3)
					{
						feiji_3_0(kind.feiji[i][0], pais);
						if (dan[1] + dan[2] + dan[3] <= dui[1] + dui[2] + dui[3])
						{
							pais[0] = 12;
							pais[10] = dan[1];
							pais[11] = dan[2];
							pais[12] = dan[3];
							return;
						}
						else
						{
							pais[0] = 15;
							pais[10] = pais[11] = dui[1];
							pais[12] = pais[13] = dui[2];
							pais[14] = pais[15] = dui[3];
							return;
						}
					}
					else if (dan[0] >= 3)
					{
						feiji_3_0(kind.feiji[i][0], pais);
						pais[0] = 12;
						pais[10] = dan[1];
						pais[11] = dan[2];
						pais[12] = dan[3];
						return;
					}
					else if (dui[0] >= 3)
					{
						feiji_3_0(kind.feiji[i][0], pais);
						pais[0] = 15;
						pais[10] = pais[11] = dui[1];
						pais[12] = pais[13] = dui[2];
						pais[14] = pais[15] = dui[3];
						return;
					}
					else
					{
						feiji_3_0(kind.feiji[i][0], pais);
						if (dan[0])
						{
							pais[0] = 12;
							pais[10] = dan[1];
							pais[11] = pais[12] = dui[1];
							return;
						}
						else
							return;
					}
				}
				if (kind.feiji[i][1] - kind.feiji[i][0] == 3)
				{
					int a = person[now].card[0];
					if (a <= 13)
					{
						feiji_4_0(kind.feiji[i][0], pais);
						return;
					}
					else if (a == 14)
					{
						if ((pai[16] && pai[17]) || two)
						{
							feiji_4_0(kind.feiji[i][0], pais);
							return;
						}
						if (pai[17] || pai[16] || pai[15] || pai[14] || pai[13])
						{
							feiji_2_0(kind.feiji[i][0], pais);
							return;
						}
						else
						{
							feiji_2_2_san(pai, kind.feiji[i][0], pais);
							return;
						}
					}
					else if (a == 15)
					{
						if (pai[16] && pai[17])
						{
							feiji_4_0(kind.feiji[i][0], pais);
							return;
						}
						if (three == 5)
						{
							int b;
							for (b = 3; b < kind.feiji[i][0]; b++)
								if (pai[b] == 3)
									break;
							if (b < kind.feiji[i][0])
							{
								feiji_3_3(pai, kind.feiji[i][0], pais);
								return;
							}
							else
							{
								feiji_4_0(kind.feiji[i][0], pais);
								return;
							}
						}
						feiji_3_3_san(pai, kind.feiji[i][0], pais);
						return;
					}
					else if (a == 16)
					{
						if (four)
						{
							feiji_4_0(kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							feiji_2_2_san(pai, kind.feiji[i][0], pais);
							return;
						}
						feiji_4_4(pai, kind.feiji[i][0], pais);
						return;
					}
					else if (a == 17)
					{
						if (four)
						{
							feiji_4_0(kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							feiji_3_3_san(pai, kind.feiji[i][0], pais);
							return;
						}
						feiji_4_4(pai, kind.feiji[i][0], pais);
						return;
					}
					else if (a == 18)
					{
						if (four)
						{
							if (pai[16] && pai[17])
							{
								feiji_4_0(kind.feiji[i][0], pais);
								return;
							}
							feiji_2_2_san_zhadan(pai, kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							feiji_4_4(pai, kind.feiji[i][0], pais);
							return;
						}
						if (two == 1)
						{
							feiji_4_4_dui(pai, kind.feiji[i][0], pais);
							return;
						}
						else if (two >= 2)
						{
							feiji_2_4(pai, kind.feiji[i][0], pais);
							return;
						}
						if (three == 5)
						{
							feiji_3_3_san(pai, kind.feiji[i][0], pais);
							return;
						}
						else if (three == 6)
						{
							feiji_4_0(kind.feiji[i][0], pais);
							return;
						}
					}
					if (a == 19)
					{
						if (four)
						{
							if (pai[16] && pai[17])
							{
								feiji_4_0(kind.feiji[i][0], pais);
								return;
							}
							if (three == 5)
							{
								feiji_4_0(kind.feiji[i][0], pais);
								return;
							}
							feiji_3_3_san(pai, kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							feiji_4_4(pai, kind.feiji[i][0], pais);
							return;
						}
						if (three == 5)
						{
							feiji_4_4_san(pai, kind.feiji[i][0], pais);
							return;
						}
					}
					else if (a == 20)
					{
						if (four == 2)
						{
							feiji_4_0(kind.feiji[i][0], pais);
							return;
						}
						else if (four == 1)
						{
							if (pai[16] && pai[17])
							{
								feiji_2_2_san_zhadan(pai, kind.feiji[i][0], pais);
								return;
							}
							feiji_4_4_zhadan(pai, kind.feiji[i][0], pais);
							return;
						}
						if (two == 4)
						{
							feiji_4_8(pai, kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							if (two == 1)
							{
								feiji_4_4_dui(pai, kind.feiji[i][0], pais);
								return;
							}
							if (three == 6)
							{
								feiji_4_0(kind.feiji[i][0], pais);
								return;
							}
						}
						if (three == 5)
						{
							feiji_4_4_san(pai, kind.feiji[i][0], pais);
							return;
						}
					}
					if (dan[0] + 2 * dui[0] < 4)
					{
						feiji_4_0(kind.feiji[i][0], pais);
						return;
					}
					if (dan[0] >= 4)
					{
						feiji_4_0(kind.feiji[i][0], pais);
						pais[0] = 16;
						pais[13] = dan[1];
						pais[14] = dan[2];
						pais[15] = dan[3];
						pais[16] = dan[4];
						return;
					}
					else if (dan[0] >= 2)
					{
						if (dui[0])
						{
							feiji_4_0(kind.feiji[i][0], pais);
							pais[0] = 16;
							pais[13] = dan[1];
							pais[14] = dan[2];
							pais[15] = pais[16] = dui[1];
							return;
						}
					}
					else
					{
						if (dui[0] > 1)
						{
							feiji_4_0(kind.feiji[i][0], pais);
							pais[0] = 16;
							pais[13] = pais[14] = dui[1];
							pais[15] = pais[16] = dui[2];
							return;
						}
					}
				}
				if (kind.feiji[i][1] - kind.feiji[i][0] == 4)
				{
					int a = person[now].card[0];
					if (a <= 16)
					{
						feiji_5_0(kind.feiji[i][0], pais);
						return;
					}
					else if (a == 17)
					{
						if ((pai[16] && pai[17]) || two)
						{
							feiji_5_0(kind.feiji[i][0], pais);
							return;
						}
						feiji_2_2_san(pai, kind.feiji[i][0], pais);
						return;
					}
					else if (a == 18)
					{
						if (pai[16] && pai[17])
						{
							feiji_5_0(kind.feiji[i][0], pais);
							return;
						}
						feiji_3_3_san(pai, kind.feiji[i][0], pais);
						return;
					}
					else if (a == 19)
					{
						if (four)
						{
							feiji_5_0(kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							feiji_2_2_san(pai, kind.feiji[i][0], pais);
							return;
						}
						if (three == 6)
						{
							feiji_5_0(kind.feiji[i][0], pais);
							return;
						}
						feiji_4_4_san(pai, kind.feiji[i][0], pais);
						return;
					}
					else if (a == 20)
					{
						if (four)
						{
							feiji_5_0(kind.feiji[i][0], pais);
							return;
						}
						if (pai[16] && pai[17])
						{
							feiji_3_3_san(pai, kind.feiji[i][0], pais);
							return;
						}
						feiji_5_5(pai, kind.feiji[i][0], pais);
						return;
					}
				}
				else if (kind.feiji[i][1] - kind.feiji[i][0] == 5)
				{
					int a = person[now].card[0];
					if (a <= 19)
					{
						feiji_6_0(kind.feiji[i][0], pais);
						return;
					}
					else
					{
						if (pai[16] && pai[17])
						{
							feiji_6_0(kind.feiji[i][0], pais);
							return;
						}
						feiji_2_2_san(pai, kind.feiji[i][0], pais);
						return;
					}
				}
			}
		}
	}
	for (int i = 1; i <= kind.liandui[0][0]; i++)
	{
		for (int a = 1; a <= kind.shunzi[0][0]; a++)
		{
			if (kind.shunzi[a][0] < kind.liandui[i][0])
			{
				int left = kind.shunzi[a][0], right = kind.shunzi[a][1];
				if (right >= kind.liandui[i][0])
					right = kind.liandui[i][0] - 1;
				if (right - left < 4)
					break;
				while (right - left > 4)
				{
					if (pai[left] == 4)
						left++;
					else if (pai[right] == 4)
						right--;
					else if (pai[left] == 3)
						left++;
					else if (pai[right] == 3)
						right--;
					else if (pai[left] == 2)
						left++;
					else if (pai[right] == 2)
						right--;
					else
						break;
				}
				int one = 0, two = 0, three = 0, four = 0;
				for (int b = left; b <= right; b++)
				{
					if (pai[b] == 1)
						one++;
					else if (pai[b] == 2)
						two++;
					else if (pai[b] == 3)
						three++;
					else
						four++;
				}
				flag = 0;
				if (four)
				{
					int b;
					for (b = left; b <= right; b++)
						if (pai[b] == 4)
							break;
					if (b - left > 4)
					{
						flag = 1;
						if (right - b > 4)
							flag = 3;
					}
					else if (right - b > 4)
						flag = 2;
					else
						continue;
					if (flag == 1)
					{
						kind.shunzi[a--][1] = b - 1;
						continue;
					}
					else if (flag == 2)
					{
						kind.shunzi[a--][0] = b + 1;
						continue;
					}
					else if (flag == 3)
					{
						for (int c = kind.shunzi[0][0]; c > a; c--)
						{
							kind.shunzi[c + 1][0] = kind.shunzi[c][0];
							kind.shunzi[c + 1][1] = kind.shunzi[c][1];
						}
						kind.shunzi[a + 1][1] = kind.shunzi[a][1];
						kind.shunzi[a + 1][0] = b + 1;
						kind.shunzi[a--][1] = b - 1;
						kind.shunzi[0][0]++;
						continue;
					}
				}
				else if (three)
				{
					int b;
					for (b = left; b <= right; b++)
						if (pai[b] == 3)
							break;
					if (b - left > 4)
					{
						flag = 1;
						if (right - b > 4)
							flag = 3;
					}
					else if (right - b > 4)
						flag = 2;
					if (flag == 1)
					{
						kind.shunzi[a--][1] = b - 1;
						continue;
					}
					else if (flag == 2)
					{
						kind.shunzi[a--][0] = b + 1;
						continue;
					}
					else if (flag == 3)
					{
						for (int c = kind.shunzi[0][0]; c > a; c--)
						{
							kind.shunzi[c + 1][0] = kind.shunzi[c][0];
							kind.shunzi[c + 1][1] = kind.shunzi[c][1];
						}
						kind.shunzi[a + 1][1] = kind.shunzi[a][1];
						kind.shunzi[a + 1][0] = b + 1;
						kind.shunzi[a--][1] = b - 1;
						kind.shunzi[0][0]++;
						continue;
					}
					if (three > 1)
						continue;
				}
				int sum1 = one, sum2 = two;
				int left1 = left + 4, right1 = right - 4;
				if (left1 <= right1)
				{
					if (pai[left1] >= 2)
					{
						while (left1 >= left && pai[left1] >= 2)
							left1--;
						left1++;
					}
					if (pai[right1] >= 2)
					{
						while (right1 <= right && pai[right1] >= 2)
							right1++;
						right1--;
					}
					int max = 0, end = 0;
					for (int b = left1; b <= right1; b++)
					{
						if (pai[b] >= 2)
						{
							int maxx = 0;
							while (b <= right1 && pai[b] >= 2)
							{
								b++;
								maxx++;
							}
							b--;
							if (maxx > max)
							{
								end = b;
								max = maxx;
							}
						}
					}
					sum2 -= max;
					if (sum2 <= sum1)
					{
						if (max)
						{
							pais[0] = end - left + 1;
							one = 1;
							while (left <= end)
								pais[one++] = left++;
							return;
						}
						pais[0] = right - left + 1;
						one = 1;
						while (left <= right)
							pais[one++] = left++;
						return;
					}
					else
						continue;
				}
				else
				{
					if (pai[left1] >= 2)
					{
						while (left1 <= right && pai[left1] >= 2)
							left1++;
						left1--;
					}
					if (pai[right1] >= 2)
					{
						while (right1 >= left && pai[right1] >= 2)
							right1--;
						right1++;
					}
					int b = right1;
					while (b <= left1 && pai[b] >= 2)
						b++;
					if (b > left1)
						sum2 -= (left1 - right1 + 1);
					if (sum2 <= sum1)
					{
						if (b > left1)
						{
							pais[0] = left1 - left + 1;
							one = 1;
							while (left <= left1)
								pais[one++] = left++;
							return;
						}
						else
						{
							pais[0] = right - left + 1;
							one = 1;
							while (left <= right)
								pais[one++] = left++;
							return;
						}
					}
					else
						continue;
				}
			}
			if (kind.shunzi[a][0] >= kind.liandui[i][0])
				break;
		}
		int left = kind.liandui[i][0] - 1, right = kind.liandui[i][1] + 1;
		while (left >= 3 && pai[left] == 1)
			left--;
		left++;
		while (right < 15 && pai[right] == 1)
			right++;
		right--;
		if (right - kind.liandui[i][0] >= 4 && kind.liandui[i][1] - left >= 4)
		{
			if (left < kind.liandui[i][0] && right > kind.liandui[i][1])
			{
				pais[0] = kind.liandui[i][1] - left + 1;
				flag = 1;
				while (left <= kind.liandui[i][1])
					pais[flag++] = left++;
				return;
			}
		}
		left = kind.liandui[i][0];
		right = kind.liandui[i][1];
		if (san[1] && san[1] < left)
		{
			if (dan[1] && dui[1])
			{
				if (dan[1] < dui[1])
				{
					if (dan[1] < left)
					{
						if (lastpais(person, now, 4))
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = dan[1];
							return;
						}
						else
						{
							if (dui[1] < left)
							{
								if (lastpais(person, now, 5))
								{
									pais[0] = 5;
									pais[1] = pais[2] = pais[3] = san[1];
									pais[4] = pais[5] = dui[1];
									return;
								}
								else
								{
									pais[0] = 3;
									pais[1] = pais[2] = pais[3] = san[1];
									return;
								}
							}
						}
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
					}
				}
				else
				{
					if (dui[1] < left)
					{
						if (lastpais(person, now, 5))
						{
							pais[0] = 5;
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = pais[5] = dui[1];
							return;
						}
						else
						{
							if (dan[1] < left)
							{
								if (lastpais(person, now, 4))
								{
									pais[0] = 5;
									pais[1] = pais[2] = pais[3] = san[1];
									pais[4] = dan[1];
									return;
								}
								else
								{
									pais[0] = 3;
									pais[1] = pais[2] = pais[3] = san[1];
									return;
								}
							}
						}
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
					}
				}
			}
			if (dan[1])
			{
				if (dan[1] < left)
				{
					if (lastpais(person, now, 4))
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = dan[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
					}
				}
				else
				{
					if (lastpais(person, now, 3))
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
				}
			}
			else if (dui[1])
			{
				if (dui[1] < left)
				{
					if (lastpais(person, now, 5))
					{
						pais[0] = 5;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = pais[5] = dui[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
					}
				}
				else
				{
					if (lastpais(person, now, 3))
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
				}
			}
			else
			{
				if (lastpais(person, now, 3))
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = san[1];
					return;
				}
			}
		}
		if (dan[1] && dui[1])
		{
			if (dan[1] < dui[1])
			{
				if (dan[1] < left)
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
			}
			else
			{
				if (dui[1] < left)
				{
					if (lastpais(person, now, 2))
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						if (dan[1] < left)
						{
							pais[0] = 1;
							pais[1] = dan[1];
							return;
						}
					}
				}
			}
		}
		else if (dan[1])
		{
			if (dan[1] < left)
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
		}
		else if (dui[1])
		{
			if (dui[1] < left)
			{
				if (lastpais(person, now, 2))
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[1];
					return;
				}
			}
		}
		pais[0] = 2 * (right - left + 1);
		flag = 1;
		while (left <= right)
		{
			pais[flag] = pais[flag + 1] = left++;
			flag += 2;
		}
		return;
	}
	for (int i = 1; i <= kind.shunzi[0][0]; i++)
	{
		int left = kind.shunzi[i][0], right = kind.shunzi[i][1];
		while (right - left > 4)
		{
			if (pai[left] == 4)
				left++;
			else if (pai[right] == 4)
				right--;
			else if (pai[left] == 3)
				left++;
			else if (pai[right] == 3)
				right--;
			else if (pai[left] == 2)
				left++;
			else if (pai[right] == 2)
				right--;
			else
				break;
		}
		int one = 0, two = 0, three = 0, four = 0;
		for (int a = left; a <= right; a++)
		{
			if (pai[a] == 1)
				one++;
			else if (pai[a] == 2)
				two++;
			else if (pai[a] == 3)
				three++;
			else
				four++;
		}
		flag = 0;
		if (four)
		{
			int b;
			for (b = left; b <= right; b++)
				if (pai[b] == 4)
					break;
			if (b - left > 4)
			{
				flag = 1;
				if (right - b > 4)
					flag = 3;
			}
			else if (right - b > 4)
				flag = 2;
			else
				continue;
			if (flag == 1)
			{
				kind.shunzi[i--][1] = b - 1;
				continue;
			}
			else if (flag == 2)
			{
				kind.shunzi[i--][0] = b + 1;
				continue;
			}
			else if (flag == 3)
			{
				for (int c = kind.shunzi[0][0]; c > i; c--)
				{
					kind.shunzi[c + 1][0] = kind.shunzi[c][0];
					kind.shunzi[c + 1][1] = kind.shunzi[c][1];
				}
				kind.shunzi[i + 1][1] = kind.shunzi[i][1];
				kind.shunzi[i + 1][0] = b + 1;
				kind.shunzi[i--][1] = b - 1;
				kind.shunzi[0][0]++;
				continue;
			}
		}
		else if (three)
		{
			int b;
			for (b = left; b <= right; b++)
				if (pai[b] == 3)
					break;
			if (b - left > 4)
			{
				flag = 1;
				if (right - b > 4)
					flag = 3;
			}
			else if (right - b > 4)
				flag = 2;
			if (flag == 1)
			{
				kind.shunzi[i--][1] = b - 1;
				continue;
			}
			else if (flag == 2)
			{
				kind.shunzi[i--][0] = b + 1;
				continue;
			}
			else if (flag == 3)
			{
				for (int c = kind.shunzi[0][0]; c > i; c--)
				{
					kind.shunzi[c + 1][0] = kind.shunzi[c][0];
					kind.shunzi[c + 1][1] = kind.shunzi[c][1];
				}
				kind.shunzi[i + 1][1] = kind.shunzi[i][1];
				kind.shunzi[i + 1][0] = b + 1;
				kind.shunzi[i--][1] = b - 1;
				kind.shunzi[0][0]++;
				continue;
			}
			if (three > 1)
				continue;
		}
		int dan[21] = { 0 };
		int dui[11] = { 0 };
		for (int a = 3; a < left; a++)
		{
			if (pai[a] == 1)
				dan[++dan[0]] = a;
			else if (pai[a] == 2)
				dui[++dui[0]] = a;
		}
		int sum1 = one, sum2 = two;
		int left1 = left + 4, right1 = right - 4;
		int max = 0, end = 0;
		int flag1 = 0;
		if (left1 <= right1)
		{
			if (pai[left1] >= 2)
			{
				while (left1 >= left && pai[left1] >= 2)
					left1--;
				left1++;
			}
			if (pai[right1] >= 2)
			{
				while (right1 <= right && pai[right1] >= 2)
					right1++;
				right1--;
			}
			for (int b = left1; b <= right1; b++)
			{
				if (pai[b] >= 2)
				{
					int maxx = 0;
					while (b <= right1 && pai[b] >= 2)
					{
						b++;
						maxx++;
					}
					b--;
					if (maxx > max)
					{
						end = b;
						max = maxx;
					}
				}
			}
			sum2 -= max;
			if (sum1 < sum2)
			{
				for (int a = left; a <= right; a++)
				{
					if (pai[a] == 2)
						dan[++dan[0]] = a;
					else if (pai[a] == 3)
						dui[++dui[0]] = a;
				}
			}
			else
			{
				if (max)
				{
					for (int a = left; a <= end - max; a++)
					{
						if (pai[a] == 2)
							dan[++dan[0]] = a;
						else if (pai[a] == 3)
							dui[++dui[0]] = a;
					}
					for (int a = end - max + 1; a <= end; a++)
						if (pai[a] == 3)
							dan[++dan[0]] = a;
					for (int a = end + 1; a <= right; a++)
					{
						if (pai[a] == 2)
							dan[++dan[0]] = a;
						else if (pai[a] == 3)
							dui[++dui[0]] = a;
					}
				}
				else
				{
					for (int a = left; a <= right; a++)
					{
						if (pai[a] == 2)
							dan[++dan[0]] = a;
						else if (pai[a] == 3)
							dui[++dui[0]] = a;
					}
				}
			}
		}
		else
		{
			if (pai[left1] >= 2)
			{
				while (left1 <= right && pai[left1] >= 2)
					left1++;
				left1--;
			}
			if (pai[right1] >= 2)
			{
				while (right1 >= left && pai[right1] >= 2)
					right1--;
				right1++;
			}
			int b = right1;
			while (b <= left1 && pai[b] >= 2)
				b++;
			if (b > left1)
			{
				sum2 -= (left1 - right1 + 1);
				flag1 = 1;
			}
			if (sum1 < sum2)
			{
				for (int a = left; a <= right; a++)
				{
					if (pai[a] == 2)
						dan[++dan[0]] = a;
					else if (pai[a] == 3)
						dui[++dui[0]] = a;
				}
			}
			else
			{
				if (b > left1)
				{
					for (int a = left; a < right1; a++)
					{
						if (pai[a] == 2)
							dan[++dan[0]] = a;
						else if (pai[a] == 3)
							dui[++dui[0]] = a;
					}
					for (int a = right1; a <= left1; a++)
						if (pai[a] == 3)
							dan[++dan[0]] = a;
					for (int a = left1 + 1; a <= right; a++)
					{
						if (pai[a] == 2)
							dan[++dan[0]] = a;
						else if (pai[a] == 3)
							dui[++dui[0]] = a;
					}
				}
				else
				{
					for (int a = left; a <= right; a++)
					{
						if (pai[a] == 2)
							dan[++dan[0]] = a;
						else if (pai[a] == 3)
							dui[++dui[0]] = a;
					}
				}
			}
		}
		for (int a = 3; a < left; a++)
		{
			if (pai[a] == 3)
			{
				if (lastpais(person, now, 4) && lastpais(person, now, 5))
				{
					if (dan[0] && dui[0])
					{
						if (dan[1] <= dui[1])
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = a;
							pais[4] = dan[1];
							return;
						}
						else
						{
							pais[0] = 5;
							pais[1] = pais[2] = pais[3] = a;
							pais[4] = pais[5] = dui[1];
							return;
						}
					}
					else if (dan[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = a;
						pais[4] = dan[1];
						return;
					}
					else if (dui[0])
					{
						pais[0] = 5;
						pais[1] = pais[2] = pais[3] = a;
						pais[4] = pais[5] = dui[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = a;
							return;
						}
						else
							break;
					}
				}
				else if (lastpais(person, now, 4))
				{
					if (dan[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = a;
						pais[4] = dan[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = a;
							return;
						}
						else
							break;
					}
				}
				else if (lastpais(person, now, 5))
				{
					if (dui[0])
					{
						pais[0] = 5;
						pais[1] = pais[2] = pais[3] = a;
						pais[4] = pais[5] = dui[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = a;
							return;
						}
						else
							break;
					}
				}
				else
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = a;
					return;
				}
			}
		}
		if (sum1 < sum2)
			continue;
		else
		{
			if (max)
			{
				pais[0] = end - left + 1;
				one = 1;
				while (left <= end)
					pais[one++] = left++;
				return;
			}
			else if (flag1)
			{
				pais[0] = left1 - left + 1;
				one = 1;
				while (left <= left1)
					pais[one++] = left++;
				return;
			}
			else
			{
				pais[0] = right - left + 1;
				one = 1;
				while (left <= right)
					pais[one++] = left++;
				return;
			}
		}
	}
	int one = 0, two = 0, three = 0, four = 0;
	for (int a = 3; a < 16; a++)
	{
		if (pai[a] == 1)
			one++;
		else if (pai[a] == 2)
			two++;
		else if (pai[a] == 3)
			three++;
		else if (pai[a] == 4)
			four++;
	}
	if (three)
	{
		if (san[1] < 13)
		{
			if (one && two)
			{
				if (dan[1] <= 13 && dui[1] <= 13)
				{
					if (dan[1] <= dui[1])
					{
						if (lastpais(person, now, 4))
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = dan[1];
							return;
						}
						else
						{
							if (lastpais(person, now, 5))
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = dui[1];
								return;
							}
							else
							{
								if (lastpais(person, now, 3))
								{
									pais[0] = 3;
									pais[1] = pais[2] = pais[3] = san[1];
									return;
								}
							}
						}
					}
					else
					{
						if (lastpais(person, now, 5))
						{
							pais[0] = 5;
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = pais[5] = dui[1];
							return;
						}
						else
						{
							if (lastpais(person, now, 4))
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = dan[1];
								return;
							}
							else
							{
								if (lastpais(person, now, 3))
								{
									pais[0] = 3;
									pais[1] = pais[2] = pais[3] = san[1];
									return;
								}
							}
						}
					}
				}
				else if (dan[1] <= 13)
				{
					if (lastpais(person, now, 4))
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = dan[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
					}
				}
				else if (dui[1] <= 13)
				{
					if (lastpais(person, now, 5))
					{
						pais[0] = 5;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = pais[5] = dui[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
					}
				}
				if (dan[1] >= 14 && dui[1] >= 14)
				{
					if (lastpais(person, now, 3))
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
				}
			}
			if (one)
			{
				if (dan[1] < 14)
				{
					if (lastpais(person, now, 4))
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = dan[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
					}
				}
				else
				{
					if (lastpais(person, now, 3))
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
				}
			}
			else if (two)
			{
				if (dui[1] < 14)
				{
					if (lastpais(person, now, 5))
					{
						pais[0] = 5;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = pais[5] = dui[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3))
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
					}
				}
				else
				{
					if (lastpais(person, now, 3))
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
				}
			}
			else
			{
				if (lastpais(person, now, 3))
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = san[1];
					return;
				}
			}
		}
		if (san[1] > 12)
		{
			if (one && two)
			{
				if (dan[1] <= 12 && dui[1] <= 12)
				{
					if (dan[1] <= dui[1])
					{
						pais[0] = 1;
						pais[1] = dan[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 2))
						{
							pais[0] = 2;
							pais[1] = pais[2] = dui[1];
							return;
						}
						else
						{
							pais[0] = 1;
							pais[1] = dan[1];
							return;
						}
					}
				}
				else if (dan[1] <= 12)
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else if (dui[1] <= 12)
				{
					if (lastpais(person, now, 2))
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
				}
			}
			else if (one)
			{
				if (dan[1] <= 12)
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
			}
			else if (two)
			{
				if (dui[1] <= 12)
				{
					if (lastpais(person, now, 2))
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
				}
			}
		}
	}
	if (one && two)
	{
		if (dan[1] < 14 && dui[1] < 14)
		{
			if (dan[1] <= dui[1])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			else
			{
				if (lastpais(person, now, 2))
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[1];
					return;
				}
				else
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
			}
		}
		else if (dan[1] < 14)
		{
			pais[0] = 1;
			pais[1] = dan[1];
			return;
		}
		else if (dui[1] < 14)
		{
			if (lastpais(person, now, 2))
			{
				pais[0] = 2;
				pais[1] = pais[2] = dui[1];
				return;
			}
		}
	}
	else if (one)
	{
		if (dan[1] < 14)
		{
			pais[0] = 1;
			pais[1] = dan[1];
			return;
		}
	}
	else if (two)
	{
		if (dui[1] < 14)
		{
			if (lastpais(person, now, 2))
			{
				pais[0] = 2;
				pais[1] = pais[2] = dui[1];
				return;
			}
		}
	}
	if (san[1] && san[1] < 14)
	{
		if (dui[1] && dui[1] < 14)
		{
			pais[0] = 5;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = pais[5] = dui[1];
			return;
		}
		else if (dan[1] && dan[1] < 14)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = dan[1];
			return;
		}
		else
		{
			pais[0] = 3;
			pais[1] = pais[2] = pais[3] = san[1];
			return;
		}
	}
	if (dan[1] && dan[1] < 14)
	{
		pais[0] = 1;
		pais[1] = dan[1];
		return;
	}
	if (dui[1] && dui[1] < 14)
	{
		pais[0] = 1;
		pais[1] = dui[1];
		return;
	}
	if (san[1])
	{
		if (dan[1])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = dan[1];
			return;
		}
		else if (dui[1])
		{
			pais[0] = 5;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = pais[5] = dui[1];
			return;
		}
		else if (pai[16] + pai[17] == 1)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = san[1];
			if (pai[16])
				pais[4] = 16;
			else
				pais[4] = 17;
			return;
		}
		else
		{
			pais[0] = 3;
			pais[1] = pais[2] = pais[3] = san[1];
			return;
		}
	}
	if (dan[1])
	{
		pais[0] = 1;
		pais[1] = dan[1];
		return;
	}
	if (dui[1])
	{
		if (lastpais(person, now, 2))
		{
			pais[0] = 2;
			pais[1] = pais[2] = dui[1];
			return;
		}
		else
		{
			pais[0] = 1;
			pais[1] = dui[1];
			return;
		}
	}
	if (pai[16] + pai[17] == 1)
	{
		pais[0] = 1;
		if (pai[16])
			pais[1] = 16;
		else
			pais[1] = 17;
		return;
	}
	if (si[1])
	{
		pais[0] = 4;
		pais[1] = pais[2] = pais[3] = pais[4] = si[1];
		return;
	}
	if (pai[16] && pai[17])
	{
		pais[0] = 2;
		pais[1] = 16;
		pais[2] = 17;
		return;
	}
}
void renji_chupai_last(persons* person, int now, int* pais)
{
	int pai[18] = { 0 };
	for (int i = 1; i <= person[now].card[0]; i++)
		pai[person[now].card[i]]++;
	kinds kind;
	check(&kind, pai);
	int one = 0, two = 0, three = 0, four = 0;
	for (int a = 3; a < 16; a++)
	{
		if (pai[a] == 1)
			one++;
		else if (pai[a] == 2)
			two++;
		else if (pai[a] == 3)
			three++;
		else if (pai[a] == 4)
			four++;
	}
	int flag = 0;
	int dan[21] = { 0 };
	int dui[11] = { 0 };
	int san[11] = { 0 };
	int si[11] = { 0 };
	for (int a = 3; a < 16; a++)
	{
		if (pai[a] == 1)
			dan[++dan[0]] = a;
		else if (pai[a] == 2)
			dui[++dui[0]] = a;
		else if (pai[a] == 3)
			san[++san[0]] = a;
		else if (pai[a] == 4)
			si[++si[0]] = a;
	}
	int a = person[now].card[0];
	if (a == 1)
	{
		pais[0] = 1;
		if (dan[0])
			pais[1] = dan[1];
		else if (pai[16])
			pais[1] = 16;
		else
			pais[1] = 17;
		return;
	}
	else if (a == 2)
	{
		if (dui[0])
		{
			pais[0] = 2;
			pais[1] = pais[2] = dui[1];
			return;
		}
		else if (pai[16] && pai[17])
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
		else
		{
			pais[0] = 1;
			if (pai[16])
				pais[1] = 16;
			else if (pai[17])
				pais[1] = 17;
			else
				pais[1] = dan[2];
			return;
		}
	}
	else if (a == 3)
	{
		if (san[0])
		{
			pais[0] = 3;
			pais[1] = pais[2] = pais[3] = san[1];
			return;
		}
		else if (pai[16] && pai[17])
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
	}
	else if (a == 4)
	{
		if (si[0])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		if (san[0])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = san[1];
			if (dan[0])
				pais[4] = dan[1];
			else if (pai[16])
				pais[4] = 16;
			else
				pais[4] = 17;
			return;
		}
		else if (pai[16] && pai[17])
		{
			if (dui[0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			else
			{
				pais[0] = 1;
				pais[1] = dan[2];
				return;
			}
		}
	}
	else if (a == 5)
	{
		if (san[0] && dui[0])
		{
			pais[0] = 5;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = pais[5] = dui[1];
			return;
		}
		if (si[0])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		if (pai[16] && pai[17])
		{
			if (san[0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			else if (dui[0])
			{
				pais[0] = 2;
				pais[1] = pais[2] = dui[1];
				return;
			}
			else
			{
				pais[0] = 1;
				pais[1] = dan[3];
				return;
			}
		}
		if (kind.shunzi[0][0])
		{
			pais[0] = 5;
			int one = 1;
			while (kind.shunzi[1][0] <= kind.shunzi[1][1])
				pais[one++] = kind.shunzi[1][0]++;
			return;
		}
	}
	if (a == 6)
	{
		if (kind.liandui[0][0])
		{
			pais[0] = 6;
			flag = 1;
			for (int b = kind.liandui[1][0]; b <= kind.liandui[1][1]; b++)
			{
				pais[flag] = pais[flag + 1] = b;
				flag += 2;
			}
			return;
		}
		if (kind.feiji[0][0])
		{
			feiji_2_0(kind.feiji[1][0], pais);
			return;
		}
		if (kind.shunzi[0][0])
		{
			if (kind.shunzi[1][1] - kind.shunzi[1][0] == 5)
			{
				pais[0] = 6;
				int one = 1;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
					pais[one++] = b;
				return;
			}
			else
			{
				pais[0] = 5;
				int one = 1;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
					pais[one++] = b;
				return;
			}
		}
		if (si[0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			else if (dui[0])
			{
				if (lastpais(person, now, 2) || dui[1] > 14)
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[1];
					return;
				}
				pais[0] = 6;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				pais[5] = pais[6] = dui[1];
				return;
			}
			pais[0] = 6;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			pais[5] = dan[1];
			if (pai[16])
				pais[6] = 16;
			else if (pai[17])
				pais[6] = 17;
			else
				pais[6] = dan[2];
			return;
		}
		if (pai[16] && pai[17])
		{
			if (san[0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			else if (dui[0] == 2)
			{
				pais[0] = 2;
				pais[1] = pais[2] = dui[2];
				return;
			}
			else
			{
				pais[0] = 1;
				pais[1] = dan[4];
				return;
			}
		}
	}
	if (a == 7)
	{
		if (si[0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			if (san[0])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = san[1];
				return;
			}
		}
		if (pai[16] && pai[17])
		{
			if (san[0] && dui[0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			if (kind.shunzi[0][0])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			if (san[0] && dan[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = dan[1];
				return;
			}
		}
		if (kind.feiji[0][0])
		{
			feiji_2_0(kind.feiji[1][0], pais);
			return;
		}
	}
	if (a == 8)
	{
		if (kind.liandui[0][0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			if (kind.liandui[1][1] - kind.liandui[1][0] == 3)
			{
				pais[0] = 8;
				int one = 1;
				for (int b = kind.liandui[1][0]; b <= kind.liandui[1][1]; b++)
				{
					pais[one] = pais[one + 1] = b;
					one += 2;
				}
				return;
			}
		}
		if (kind.shunzi[0][0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = kind.shunzi[1][1] - kind.shunzi[1][0] + 1;
				int one = 1;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
					pais[one++] = b;
				return;
			}
			if (kind.shunzi[1][1] - kind.shunzi[1][0] >= 6)
			{
				pais[0] = kind.shunzi[1][1] - kind.shunzi[1][0] + 1;
				int one = 1;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
					pais[one++] = b;
				return;
			}
		}
		if (kind.feiji[0][0])
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			feiji_2_2(pai, kind.feiji[1][0], pais);
			return;
		}
		if (si[0] == 2)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 1)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			if (dui[0] == 2)
			{
				pais[0] = 8;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				pais[5] = pais[6] = dui[1];
				pais[7] = pais[8] = dui[2];
				return;
			}
		}
		if (san[0] == 2 && dan[0])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = dan[1];
			return;
		}
		if (san[0] == 2 && dui[0])
		{
			pais[0] = 5;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = pais[5] = dui[1];
			return;
		}
	}
	if (a == 9)
	{
		if (kind.liandui[0][0] && kind.liandui[1][1] - kind.liandui[1][0] == 3)
		{
			pais[0] = 8;
			int one = 1;
			for (int b = kind.liandui[1][0]; b <= kind.liandui[1][1]; b++)
			{
				pais[one] = pais[one + 1] = b;
				one += 2;
			}
			return;
		}
		if (kind.shunzi[0][0] && kind.shunzi[1][1] - kind.shunzi[1][0] >= 7)
		{
			pais[0] = kind.shunzi[1][1] - kind.shunzi[1][0] + 1;
			int one = 1;
			for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
				pais[one++] = b;
			return;
		}
		if (san[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				if (lastpais(person, now, 4) || san[2] > 14)
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[2];
					pais[4] = dan[1];
					return;
				}
				else
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = san[2];
					return;
				}
			}
			else
			{
				if (dan[0] && dui[0])
				{
					if (dan[1] <= dui[1])
					{
						if (lastpais(person, now, 4) || san[2] > 14)
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = san[2];
							pais[4] = dan[1];
							return;
						}
						else
						{
							if (lastpais(person, now, 5) || san[2] > 14)
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = san[2];
								pais[4] = pais[5] = dui[1];
								return;
							}
							else
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = dan[1];
								return;
							}
						}
					}
					else
					{
						if (lastpais(person, now, 5))
						{
							pais[0] = 5;
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = pais[5] = dui[1];
							return;
						}
						else
						{
							if (lastpais(person, now, 4))
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = dan[1];
								return;
							}
							else
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = dui[1];
								return;
							}
						}
					}
				}
				if (dan[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = dan[1];
					return;
				}
				else
				{
					pais[0] = 5;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = dui[1];
					return;
				}
			}
		}
		if (si[0] == 2)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 1)
		{
			if (pai[16] && pai[17])
			{
				if (san[0])
				{
					if (lastpais(person, now, 3))
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
					else
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
				}
				else
				{
					if (dui[0])
					{
						if (lastpais(person, now, 2) || dui[1] > 14)
						{
							pais[0] = 2;
							pais[1] = pais[2] = dui[1];
							return;
						}
						else
						{
							pais[0] = 6;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							pais[4] = pais[5] = dui[1];
							return;
						}
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = dan[1];
						pais[6] = dan[2];
						return;
					}
				}
			}
			if (san[0] && dui[0])
			{
				pais[0] = 5;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = dui[1];
			}
			if (san[0] && dan[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = dan[1];
				return;
			}
			if (kind.shunzi[0][0])
			{
				int flag = 0;
				for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
				{
					if (pai[b] == 4)
					{
						flag = 1;
						break;
					}
				}
				if (!flag)
				{
					pais[0] = 5;
					int one = 1;
					for (int b = kind.shunzi[1][0]; b <= kind.shunzi[1][1]; b++)
						pais[one++] = b;
					return;
				}
			}
		}
	}
	if (a == 10)
	{
		if (san[0] == 2 && dui[0] == 2)
		{
			pais[0] = 5;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = pais[5] = dui[1];
			return;
		}
		if (si[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			if (dan[0])
			{
				pais[0] = 6;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				pais[5] = dan[1];
				if (pai[16])
					pais[6] = 16;
				else if (pai[17])
					pais[6] = 17;
				else
					pais[6] = dan[2];
				return;
			}
			if (dui[0])
			{
				if (lastpais(person, now, 2) || dui[1] > 14)
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[1];
					return;
				}
				else
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = pais[6] = dui[1];
					return;
				}
			}
		}
		else if (si[0] == 1)
		{
			if (pai[16] && pai[17])
			{
				if (san[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = dan[1];
					return;
				}
				if (dan[0])
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = dan[1];
					pais[6] = dan[2];
					return;
				}
				else
				{
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
			}
		}
		if (pai[16] && pai[17])
		{
			if (san[0] == 2)
			{
				if (dan[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[2];
					pais[4] = dan[1];
					return;
				}
				else
				{
					if (lastpais(person, now, 5))
					{
						pais[0] = 5;
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = pais[5] = dui[1];
						return;
					}
					else
					{
						if (lastpais(person, now, 3) || san[1] > 13)
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[1];
							return;
						}
						else
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = dui[1];
							return;
						}
					}
				}
			}
		}
	}
	if (a == 11)
	{
		if (si[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			else
			{
				if (san[0])
				{
					if (lastpais(person, now, 3) || san[1] > 14)
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
					else
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
				}
				else
				{
					if (dui[0])
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = dan[1];
						pais[6] = dan[2];
						return;
					}
				}
			}
		}
		else if (si[0] == 1)
		{
			if (pai[16] && pai[17])
			{
				if (san[0] && dui[0])
				{
					pais[0] = 5;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = dui[1];
					return;
				}
			}
		}
	}
	if (a == 12)
	{
		if (si[0] == 3)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				if (dan[0])
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = dan[1];
					pais[6] = dan[2];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						return;
					}
				}
			}
			else
			{
				if (san[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					if (dan[0])
						pais[4] = dan[1];
					else if (pai[16])
						pais[4] = 16;
					else
						pais[4] = 17;
					return;
				}
			}
		}
	}
	if (a == 13)
	{
		if (si[0] == 3)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 2)
		{
			if (pai[16] && pai[17])
			{
				if (san[0])
				{
					if (lastpais(person, now, 3) || san[1] > 14)
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
					else
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
				}
				if (dan[0])
				{
					if (dui[0])
					{
						if (lastpais(person, now, 2) || dui[1] > 14)
						{
							pais[0] = 2;
							pais[1] = pais[2] = dui[1];
							return;
						}
						else
						{
							pais[0] = 6;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							pais[5] = pais[6] = dui[1];
							return;
						}
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = dan[1];
						pais[6] = dan[2];
						return;
					}
				}
			}
			else if (san[0] && dui[0])
			{
				pais[0] = 5;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = dui[1];
				return;
			}
			else if (san[0] && dan[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = dan[1];
				return;
			}
		}
	}
	if (a == 14)
	{
		if (si[0] == 3)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			else
			{
				if (dan[0])
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = dan[1];
					if (pai[16])
						pais[6] = 16;
					else if (pai[17])
						pais[6] = 17;
					else
						pais[6] = dan[2];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						return;
					}
				}
			}
		}
	}
	if (a == 15)
	{
		if (si[0] == 3)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			else if (san[0])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = san[1];
				return;
			}
			else
			{
				if (dui[0])
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						return;
					}
				}
				else
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = dan[1];
					pais[6] = dan[2];
					return;
				}
			}
		}
	}
	if (a == 16)
	{
		if (si[0] == 4)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 3)
		{
			if (pai[16] && pai[17])
			{
				if (dan[0])
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = dan[1];
					pais[6] = dan[2];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						return;
					}
				}
			}
			else if (san[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				if (dan[0])
					pais[4] = dan[1];
				else if (pai[16])
					pais[4] = 16;
				else
					pais[4] = 17;
				return;
			}
		}
	}
	if (a == 17)
	{
		if (si[0] == 4)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 3)
		{
			if (pai[16] && pai[17])
			{
				if (san[0])
				{
					if (lastpais(person, now, 3) || san[1] > 14)
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
					else
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
				}
				else
				{
					if (dui[0])
					{
						if (lastpais(person, now, 2) || dui[1] > 14)
						{
							pais[0] = 2;
							pais[1] = pais[2] = dui[1];
							return;
						}
						else
						{
							pais[0] = 6;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							pais[5] = pais[6] = dui[1];
							return;
						}
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = dan[1];
						pais[6] = dan[2];
						return;
					}
				}
			}
			else
			{
				if (san[0])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					if (dan[0])
					{
						pais[0] = 4;
						pais[4] = dan[1];
					}
					else
					{
						pais[0] = 5;
						pais[4] = pais[5] = dui[1];
					}
					return;
				}
			}
		}
	}
	if (a == 18)
	{
		if (si[0] == 4)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			else
			{
				if (dan[0])
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = dan[1];
					if (pai[16])
						pais[6] = 16;
					else if (pai[17])
						pais[6] = 17;
					else
						pais[6] = dan[2];
					return;
				}
				else
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						return;
					}
				}
			}
		}
	}
	if (a == 19)
	{
		if (si[0] == 4)
		{
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			else if (san[0])
			{
				if (lastpais(person, now, 3) || san[1] > 14)
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = san[1];
					return;
				}
				else
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					return;
				}
			}
			else
			{
				if (dui[0])
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						return;
					}
				}
				else
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = dan[1];
					pais[6] = dan[2];
					return;
				}
			}
		}
	}
	if (a == 20)
	{
		if (si[0] == 5)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		else if (si[0] == 4)
		{
			if (pai[16] && pai[17])
			{
				if (dui[0])
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						return;
					}
				}
				else
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = dan[1];
					pais[6] = dan[2];
					return;
				}
			}
			else if (san[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				if (dan[0])
					pais[4] = dan[1];
				else if (pai[16])
					pais[4] = 16;
				else
					pais[4] = 17;
				return;
			}
			else
			{
				if (dui[0] == 2)
				{
					pais[0] = 8;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					pais[5] = pais[6] = dui[1];
					pais[7] = pais[8] = dui[2];
					return;
				}
				else if (dui[0] == 1)
				{
					if (lastpais(person, now, 2) || dui[1] > 14)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = dan[1];
						if (pai[16])
							pais[6] = 16;
						else if (pai[17])
							pais[6] = 17;
						else
							pais[6] = dan[2];
						return;
					}
				}
			}
		}
	}
	for (int i = 1; i <= kind.liandui[0][0]; i++)
	{
		int left = kind.liandui[i][0] - 1, right = kind.liandui[i][1] + 1;
		while (left >= 3 && pai[left] == 1)
			left--;
		while (right < 15 && pai[right] == 1)
			right++;
		left++;
		right--;
		if (kind.liandui[i][1] - left >= 4 && right - kind.liandui[i][0] >= 4)
		{
			if (left < kind.liandui[i][0] || right > kind.liandui[i][1])
			{
				pais[0] = kind.liandui[i][1] - left + 1;
				one = 1;
				while (left <= kind.liandui[i][1])
					pais[one++] = left++;
				return;
			}
		}
		pais[0] = 2 * (kind.liandui[i][1] - kind.liandui[i][0] + 1);
		one = 1;
		while (kind.liandui[i][0] <= kind.liandui[i][1])
		{
			pais[one] = pais[one + 1] = kind.liandui[i][0]++;
			one += 2;
		}
		return;
	}
	for (int i = 1; i <= kind.shunzi[0][0]; i++)
	{
		int left = kind.shunzi[i][0], right = kind.shunzi[i][1];
		while (right - left > 4)
		{
			if (pai[left] == 4)
				left++;
			else if (pai[right] == 4)
				right--;
			if (pai[left] == 3)
				left++;
			else if (pai[right] == 3)
				right--;
			if (pai[left] == 2)
				left++;
			else if (pai[right] == 2)
				right--;
			else
				break;
		}
		kind.shunzi[i][0] = left;
		kind.shunzi[i][1] = right;
		int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
		for (int a = left; a <= right; a++)
		{
			if (pai[a] == 1)
				one1++;
			else if (pai[a] == 2)
				two1++;
			else if (pai[a] == 3)
				three1++;
			else
				four1++;
		}
		if (four1)
		{
			int b = left;
			while (b <= right && pai[b] != 4)
				b++;
			flag = 0;
			if (b - left > 4)
			{
				flag = 1;
				if (right - b > 4)
					flag = 3;
			}
			else if (right - b > 4)
				flag = 2;
			if (flag == 1)
			{
				kind.shunzi[i][1] = b - 1;
				i--;
				continue;
			}
			else if (flag == 2)
			{
				kind.shunzi[i][0] = b + 1;
				i--;
				continue;
			}
			else if (flag == 3)
			{
				for (int b = kind.shunzi[0][0]; b > i; b--)
				{
					kind.shunzi[b + 1][1] = kind.shunzi[b][1];
					kind.shunzi[b + 1][0] = kind.shunzi[b][0];
				}
				kind.shunzi[i + 1][1] = right;
				kind.shunzi[i + 1][0] = b + 1;
				kind.shunzi[i][1] = b - 1;
				kind.shunzi[0][0]++;
				i--;
				continue;
			}
		}
		if (three1)
		{
			int b = left;
			while (b <= right && pai[b] != 3)
				b++;
			flag = 0;
			if (b - left > 4)
			{
				flag = 1;
				if (right - b > 4)
					flag = 3;
			}
			else if (right - b > 4)
				flag = 2;
			if (flag == 1)
			{
				kind.shunzi[i][1] = b - 1;
				i--;
				continue;
			}
			else if (flag == 2)
			{
				kind.shunzi[i][0] = b + 1;
				i--;
				continue;
			}
			else if (flag == 3)
			{
				for (int b = kind.shunzi[0][0]; b > i; b--)
				{
					kind.shunzi[b + 1][1] = kind.shunzi[b][1];
					kind.shunzi[b + 1][0] = kind.shunzi[b][0];
				}
				kind.shunzi[i + 1][1] = right;
				kind.shunzi[i + 1][0] = b + 1;
				kind.shunzi[i][1] = b - 1;
				kind.shunzi[0][0]++;
				i--;
				continue;
			}
		}
		int sum1 = one1 - three1 - 2 * four1, sum2 = two1 - four1;
		int sum3 = sum2;
		if (sum1 <= 0)
			continue;
		int left1 = left + 4, right1 = right - 4;
		if (left1 <= right1)
		{
			if (pai[left1] > 1)
			{
				while (left1 >= left && pai[left1] > 1)
					left1--;
				left1++;
			}
			if (pai[right1] > 1)
			{
				while (right1 <= right && pai[right1] > 1)
					right1++;
				right1--;
			}
			int max = 0, end = 0;
			for (int b = left1; b <= right1; b++)
			{
				if (pai[b] > 1)
				{
					int maxx = 0;
					while (b <= right1 && pai[b] > 1)
					{
						if (pai[b] == 2)
							maxx++;
						else
							maxx--;
						b++;
					}
					b--;
					if (maxx > max)
					{
						max = maxx;
						end = b;
					}
				}
			}
			if (max)
				sum3 -= max;
			if (sum3 < sum2 && sum3 <= sum1)
			{
				pais[0] = end - left + 1;
				one = 1;
				while (left <= end)
					pais[one++] = left++;
				return;
			}
			else if (sum2 <= sum3 && sum2 <= sum1)
			{
				pais[0] = right - left + 1;
				one = 1;
				while (left <= right)
					pais[one++] = left++;
				return;
			}
			else
				continue;
		}
		else
		{
			if (pai[left1] > 1)
			{
				while (left1 <= right && pai[left1] > 1)
					left1++;
				left1--;
			}
			if (pai[right1] > 1)
			{
				while (right1 >= left && pai[right1] > 1)
					right1--;
				right1++;
			}
			int b = right1;
			while (b <= left1 && pai[b] > 1)
				b++;
			if (b > left1)
			{
				for (int c = right1; c <= left1; c++)
				{
					if (pai[c] == 2)
						sum3--;
					else
						sum3++;
				}
			}
			if (sum3 < sum2 && sum3 <= sum1)
			{
				pais[0] = left1 - left + 1;
				one = 1;
				while (left <= left1)
					pais[one++] = left++;
				return;
			}
			else if (sum2 <= sum3 && sum2 <= sum1)
			{
				pais[0] = right - left + 1;
				one = 1;
				while (left <= right)
					pais[one++] = left++;
				return;
			}
			else
				continue;
		}
	}
	for (int a = 1; a <= dan[0]; a++)
		dan[a] = 0;
	for (int a = 1; a <= dui[0]; a++)
		dui[a] = 0;
	for (int a = 1; a <= san[0]; a++)
		san[a] = 0;
	for (int a = 1; a <= si[0]; a++)
		si[a] = 0;
	dan[0] = dui[0] = san[0] = si[0] = 0;
	int dan1[21] = { 0 };
	for (int a = 3; a < 16; a++)
	{
		if (pai[a] == 1)
			dan[++dan[0]] = a;
		else if (pai[a] == 2)
			dui[++dui[0]] = a;
		else if (pai[a] == 3)
			san[++san[0]] = a;
		else if (pai[a] == 4)
			si[++si[0]] = a;
	}
	for (int a = 3; a < 15; a++)
	{
		if (pai[a] == 3)
		{
			int left = a - 1, right = a + 1;
			while (left >= 3 && pai[left] == 1)
				left--;
			left++;
			while (right < 15 && pai[right] == 1)
				right++;
			right--;
			if (right - left >= 4)
			{
				if (left < a)
				{
					int b = 1;
					while (b <= dan1[0] && dan1[b] != left)
						b++;
					if (b <= dan1[0])
						left = a;
				}
				if (right - left < 4)
					continue;
				for (int b = left; b <= right; b++)
				{
					if (pai[b] == 1)
						dan1[++dan1[0]] = b;
					else
					{
						for (int c = 1; c <= san[0]; c++)
						{
							if (san[c] == b)
							{
								while (c < san[0])
								{
									san[c] = san[c + 1];
									c++;
								}
								san[0]--;
							}
						}
						dui[++dui[0]] = b;
					}
				}
			}
		}
		if (pai[a] == 4)
		{
			int left = a - 1, right = a + 1;
			while (left >= 3 && pai[left] == 1)
				left--;
			left++;
			while (right < 15 && pai[right] == 1)
				right++;
			right--;
			if (right - left >= 4)
			{
				if (left < a)
				{
					int b = 1;
					while (b <= dan1[0] && dan1[b] != left)
						b++;
					if (b <= dan1[0])
						left = a;
				}
				if (right - left < 4)
					continue;
				for (int b = left; b <= right; b++)
				{
					if (pai[b] == 1)
						dan1[++dan1[0]] = b;
					else
					{
						for (int c = 1; c <= si[0]; c++)
						{
							if (si[c] == b)
							{
								while (c < si[0])
								{
									si[c] = si[c + 1];
									c++;
								}
								si[0]--;
							}
						}
						san[++san[0]] = b;
					}
				}
			}
		}
	}
	for (int a = 1; a <= dan1[0]; a++)
	{
		for (int b = 1; b <= dan[0]; b++)
		{
			if (dan[b] == dan1[a])
			{
				while (b < dan[0])
				{
					dan[b] = dan[b + 1];
					b++;
				}
				dan[0]--;
			}
		}
	}
	if (pai[16] + pai[17] == 1)
	{
		if (pai[16])
			dan[++dan[0]] = 16;
		else
			dan[++dan[0]] = 17;
	}
	if (dan[0])
	{
		if (dan[1] < 17)
		{
			if (san[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = dan[1];
				return;
			}
			else
			{
				if (dui[0])
				{
					if (lastpais(person, now, 2))
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						if (dui[dui[0]] > 14)
						{
							pais[0] = 2;
							pais[1] = pais[2] = dui[dui[0]];
							return;
						}
						else
						{
							if (si[0] == 1)
							{
								if (dan[0] == 1 || dan[2] > 16)
								{
									if (dui[0] > 1)
									{
										pais[0] = 8;
										pais[1] = pais[2] = pais[3] = pais[4] = si[1];
										pais[5] = pais[6] = dui[1];
										pais[7] = pais[8] = dui[2];
										return;
									}
									else
									{
										pais[0] = 6;
										pais[1] = pais[2] = pais[3] = pais[4] = si[1];
										pais[5] = pais[6] = dui[1];
										return;
									}
								}
								else
								{
									pais[0] = 6;
									pais[1] = pais[2] = pais[3] = pais[4] = si[1];
									pais[5] = dan[1];
									pais[6] = dan[2];
									return;
								}
							}
							else if (si[0] > 1)
							{
								if (dan[0] == 1 || dan[2] > 16)
								{
									if (dui[0] > 1)
									{
										pais[0] = 8;
										pais[1] = pais[2] = pais[3] = pais[4] = si[1];
										pais[5] = pais[6] = dui[1];
										pais[7] = pais[8] = dui[2];
										return;
									}
									else
									{
										pais[0] = 6;
										pais[1] = pais[2] = pais[3] = pais[4] = si[1];
										pais[5] = pais[6] = dui[1];
										return;
									}
								}
								else
								{
									pais[0] = 6;
									pais[1] = pais[2] = pais[3] = pais[4] = si[1];
									pais[5] = dan[1];
									pais[6] = dan[2];
									return;
								}
							}
						}
					}
				}
				else
				{
					if (si[0])
					{
						if (dan[0] == 1)
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							return;
						}
						else if (dan[2] > 16)
						{
							pais[0] = 1;
							pais[1] = 17;
							return;
						}
						else
						{
							pais[0] = 6;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							pais[5] = dan[1];
							pais[6] = dan[2];
							return;
						}
					}
					else
					{
						if (dan1[0])
						{
							flag = 0;
							int left = dan1[1];
							int right = left + 1;
							while (right < 15 && pai[right])
							{
								if (pai[right] > 1)
								{
									flag++;
									if (flag > 1)
										break;
								}
								right++;
							}
							right--;
							pais[0] = right - left + 1;
							int one = 1;
							while (left <= right)
								pais[one++] = left++;
							return;
						}
						else
						{
							pais[0] = 1;
							pais[1] = dan[dan[0]];
							return;
						}
					}
				}
			}
		}
	}
	if (dan1[0])
	{
		flag = 0;
		int left = dan1[1];
		int right = left + 1;
		while (right < 15 && pai[right])
		{
			if (pai[right] > 1)
			{
				flag++;
				if (flag > 1)
					break;
			}
			right++;
		}
		right--;
		pais[0] = right - left + 1;
		int one = 1;
		while (left <= right)
			pais[one++] = left++;
		return;
	}
	if (dui[0])
	{
		if (san[0])
		{
			pais[0] = 5;
			pais[1] = pais[2] = pais[3] = san[1];
			pais[4] = pais[5] = dui[1];
			return;
		}
		if (lastpais(person, now, 2))
		{
			pais[0] = 2;
			pais[1] = pais[2] = dui[1];
			return;
		}
		else
		{
			if (dui[1] > 14)
			{
				pais[0] = 2;
				pais[1] = pais[2] = dui[1];
				return;
			}
			else
			{
				if (si[0])
				{
					if (dui[0] > 1)
					{
						pais[0] = 8;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						pais[7] = pais[8] = dui[2];
						return;
					}
					else
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = dui[1];
						return;
					}
				}
				else
				{
					if (dui[0] > 1)
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[dui[0]];
						return;
					}
					else
					{
						if (dan[0])
						{
							pais[0] = 1;
							pais[1] = dan[1];
							return;
						}
						else
						{
							pais[0] = 2;
							pais[1] = pais[2] = dui[1];
							return;
						}
					}
				}
			}
		}
	}
	if (san[0])
	{
		if (lastpais(person, now, 3))
		{
			pais[0] = 3;
			pais[1] = pais[2] = pais[3] = san[1];
			return;
		}
		else
		{
			if (san[1] > 14)
			{
				if (dan[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = dan[1];
				}
				else
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = san[1];
				}
				return;
			}
			else
			{
				if (dan[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = dan[1];
					return;
				}
				else
				{
					if (si[0])
					{
						pais[0] = 6;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						pais[5] = pais[6] = san[1];
						return;
					}
					else
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = san[1];
						return;
					}
				}
			}
		}
	}
	if (dan[0])
	{
		pais[0] = 1;
		pais[1] = dan[1];
		return;
	}
	else
	{
		pais[0] = 4;
		pais[1] = pais[2] = pais[3] = pais[4] = si[1];
		return;
	}
}
void renji_dapai(persons* person, int now, int* pais, int* yishi, int* yishi2)
{
	int count = 0;
	int pai[18] = { 0 };
	int paiss[21] = { 0 };
	if (pais[0] < 0)
	{
		count++;
		pais[0] = -pais[0];
	}
	if (pais[0] == 2 && pais[1] == 16 && pais[2] == 17)
	{
		if (count)
		{
			pais[0] = 0;
			return;
		}
		else
		{
			pais[0] = -pais[0];
			return;
		}
	}
	for (int a = 0; a <= pais[0]; a++)
		paiss[a] = pais[a];
	for (int i = 1; i <= person[now].card[0]; i++)
		pai[person[now].card[i]]++;
	kinds kind;
	check(&kind, pai);
	int dan[21] = { 0 };
	int dui[11] = { 0 };
	int san[11] = { 0 };
	int si[11] = { 0 };
	for (int a = 3; a < 16; a++)
	{
		if (pai[a] == 1)
			dan[++dan[0]] = a;
		else if (pai[a] == 2)
			dui[++dui[0]] = a;
		else if (pai[a] == 3)
			san[++san[0]] = a;
		else if (pai[a] == 4)
			si[++si[0]] = a;
	}
	if (pai[16] + pai[17] == 1)
	{
		if (pai[16])
			dan[++dan[0]] = 16;
		else
			dan[++dan[0]] = 17;
	}
	if (person[now].dizhu == 0)
	{
		int a = person[now].card[0];
		if (a == 1)
		{
			if (paiss[0] == 1)
			{
				if (dan[1] > paiss[1])
				{
					pais[0] = 1;
					pais[1] = dan[1];
					return;
				}
				else
				{
					if (count == 0)
					{
						if (person[(now + 2) % 3].dizhu)
						{
							pais[0] = -pais[0];
							*yishi = 0;
							return;
						}
						else
						{
							pais[0] = -pais[0];
							return;
						}
					}
					else
					{
						pais[0] = 0;
						return;
					}
				}
			}
		}
		else if (a == 2)
		{
			if (paiss[0] == 2 && paiss[1] == paiss[2])
			{
				if (dui[0])
				{
					if (dui[1] > paiss[1])
					{
						pais[0] = 2;
						pais[1] = pais[2] = dui[1];
						return;
					}
					else
					{
						if (count == 0)
						{
							if (person[(now + 2) % 3].dizhu)
							{
								pais[0] = -pais[0];
								*yishi2 = 0;
								return;
							}
							else
							{
								pais[0] = -pais[0];
								return;
							}
						}
						else
						{
							pais[0] = 0;
							return;
						}
					}
				}
				else
				{
					if (count == 0)
					{
						if (person[(now + 2) % 3].dizhu)
						{
							pais[0] = -pais[0];
							*yishi2 = 0;
							return;
						}
						else
						{
							pais[0] = -pais[0];
							return;
						}
					}
					else
					{
						pais[0] = 0;
						return;
					}
				}
			}
		}
	}
	if (pais[0] == 4 && pais[1] == pais[2] && pais[2] == pais[3] && pais[3] == pais[4])
	{
		if (pai[16] + pai[17] < 2 && kind.zhadan[kind.zhadan[0]] < pais[1])
		{
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	int one = 0, two = 0, three = 0, four = 0;
	for (int a = 3; a < 16; a++)
	{
		if (pai[a] == 1)
			one++;
		else if (pai[a] == 2)
			two++;
		else if (pai[a] == 3)
			three++;
		else if (pai[a] == 4)
			four++;
	}
	int a = person[now].card[0];
	if (a == 1)
	{
		if (paiss[0] == 1)
		{
			if (dan[1] > paiss[1])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
		}
		else
		{
			if (count)
			{
				pais[0] = 0;
				return;
			}
			else
			{
				pais[0] = -pais[0];
				return;
			}
		}
	}
	else if (a == 2)
	{
		if (pai[16] && pai[17])
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
	}
	else if (a == 3)
	{
		if (pai[16] && pai[17])
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
	}
	else if (a == 4)
	{
		if (pai[16] && pai[17] && two)
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
		if (four)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[1];
			return;
		}
	}
	else if (a == 5)
	{
		if (pai[16] && pai[17] && three)
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
		if (four)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[1];
			return;
		}
	}
	if (a == 6)
	{
		if (pai[16] && pai[17] && (three || four))
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
		if (four && two)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[1];
			return;
		}
	}
	else if (a == 7)
	{
		if (pai[16] && pai[17] && three && two)
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
		if (four)
		{
			if (three)
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[1];
				return;
			}
			if (pai[16] && pai[17])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[1];
				return;
			}
		}
	}
	else if (a == 8)
	{
		if (four == 2)
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[kind.zhadan[0]];
			return;
		}
		else if (four == 1)
		{
			if (pai[16] && pai[17] && two)
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[1];
				return;
			}
			if (three)
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[1];
				return;
			}
		}
	}
	for (a = 0; a <= dan[0]; a++)
		dan[a] = 0;
	for (a = 0; a <= dui[0]; a++)
		dui[a] = 0;
	for (a = 0; a <= san[0]; a++)
		san[a] = 0;
	for (a = 0; a <= si[0]; a++)
		si[a] = 0;
	int dan1[21] = { 0 };
	for (a = 3; a < 15; a++)
	{
		if (pai[a] == 1)
		{
			int left = a - 1, right = a + 1;
			while (left >= 3 && pai[left] && pai[left] < 3)
				left--;
			left++;
			while (right < 15 && pai[right] && pai[right] < 3)
				right++;
			right--;
			if (right - left < 4)
				dan[++dan[0]] = a;
			else
			{
				while (right - left > 4)
				{
					if (pai[left] == 2)
						left++;
					else if (pai[right] == 2)
						right++;
					else
						break;
				}
				int one1 = 0, two1 = 0;
				for (int b = left; b <= right; b++)
				{
					if (pai[b] == 1)
						one1++;
					else
						two1++;
				}
				int left1 = left + 4, right1 = right - 4;
				int sum1 = one1, sum2 = two1;
				if (left1 <= right1)
				{
					if (pai[left1] == 2)
					{
						while (left1 >= left && pai[left1] == 2)
							left1--;
						left1++;
					}
					if (pai[right1] == 2)
					{
						while (right1 <= right && pai[right1] == 2)
							right1++;
						right1--;
					}
					int max = 0;
					for (int b = left1; b <= right1; b++)
					{
						if (pai[b] == 2)
						{
							int maxx = 0;
							while (b <= right1 && pai[b] == 2)
							{
								maxx++;
								b++;
							}
							b--;
							if (maxx > max)
								max = maxx;
						}
					}
					sum2 -= max;
					if (sum1 < sum2)
						dan[++dan[0]] = a;
				}
				else
				{
					if (pai[left1] == 2)
					{
						while (left1 <= right && pai[left1] == 2)
							left1++;
						left1--;
					}
					if (pai[right1] == 2)
					{
						while (right1 >= left && pai[right1] == 2)
							right1--;
						right1++;
					}
					int b = right1;
					while (b <= left1 && pai[b] == 2)
						b++;
					if (b > left1)
						sum2 -= (left1 - right1 + 1);
					if (sum1 < sum2)
						dan[++dan[0]] = a;
				}
			}
		}
		if (pai[a] == 2)
		{
			int left = a - 1, right = a + 1;
			while (left >= 3 && pai[left] && pai[left] < 3)
				left--;
			left++;
			while (right < 15 && pai[right] && pai[right] < 3)
				right++;
			right--;
			if (right - left < 4)
				dui[++dui[0]] = a;
			else
			{
				int flag = 0;
				while (right - left > 4)
				{
					if (pai[left] == 2)
					{
						if (left == a)
						{
							dui[++dui[0]] = a;
							flag = 1;
							break;
						}
						left++;
					}
					else if (pai[right] == 2)
					{
						if (right == a)
						{
							dui[++dui[0]] = a;
							flag = 1;
							break;
						}
						right--;
					}
					else
						break;
				}
				if (flag)
					continue;
				else
				{
					int one1 = 0, two1 = 0;
					for (int b = left; b <= right; b++)
					{
						if (pai[b] == 1)
							one1++;
						else
							two1++;
					}
					int left1 = left + 4, right1 = right - 4;
					int sum1 = one1, sum2 = two1;
					if (left1 <= right1)
					{
						if (pai[left1] == 2)
						{
							while (left1 >= left && pai[left1] == 2)
								left1--;
							left1++;
						}
						if (pai[right1] == 2)
						{
							while (right1 <= right && pai[right1] == 2)
								right1++;
							right1--;
						}
						int max = 0, end = 0;
						for (int b = left1; b <= right1; b++)
						{
							if (pai[b] == 2)
							{
								int maxx = 0;
								while (b <= right1 && pai[b] == 2)
								{
									maxx++;
									b++;
								}
								b--;
								if (maxx > max)
								{
									max = maxx;
									end = b;
								}
							}
						}
						sum2 -= max;
						if (sum1 < sum2)
							dui[++dui[0]] = a;
						else
						{
							if (max)
							{
								if (a <= max - end || a > end)
									dan[++dan[0]] = a;
							}
							else
								dan[++dan[0]] = a;
						}
					}
					else
					{
						if (pai[left1] == 2)
						{
							while (left1 <= right && pai[left1] == 2)
								left1++;
							left1--;
						}
						if (pai[right1] == 2)
						{
							while (right1 >= left && pai[right1] == 2)
								right1--;
							right1++;
						}
						int b = right1;
						while (b <= left1 && pai[b] == 2)
							b++;
						if (b > left1)
							sum2 -= (left1 - right1 + 1);
						if (sum1 < sum2)
							dui[++dui[0]] = a;
						else
						{
							if (b > left1)
							{
								if (a < right1 || a > left1)
									dan[++dan[0]] = a;
							}
							else
								dan[++dan[0]] = a;
						}
					}
				}
			}
		}
		if (pai[a] == 3)
		{
			int left = a - 1, right = a + 1;
			while (left >= 3 && pai[left] == 1)
				left--;
			left++;
			while (right < 15 && pai[right] == 1)
				right++;
			right--;
			if (right - left < 4)
				san[++san[0]] = a;
			else
			{
				if (left < a)
				{
					int b = 1;
					while (b <= dan1[0] && dan[b] != left)
						b++;
					if (b <= dan1[0])
						left = a;
					if (right - left < 4)
					{
						san[++san[0]] = a;
						continue;
					}
				}
				for (int b = left; b <= right; b++)
				{
					if (pai[b] == 1)
						dan1[++dan1[0]] = b;
					else
						dui[++dui[0]] = b;
				}
			}
		}
	}
	if (pai[15] == 1)
		dan[++dan[0]] = 15;
	else if (pai[15] == 2)
		dui[++dui[0]] = 15;
	else if (pai[15] == 3)
		san[++san[0]] = 15;
	else if (pai[15] == 4)
		si[++si[0]] = 15;
	if (pai[16] + pai[17] == 1)
		dan[++dan[0]] = pai[16] * 16 + pai[17] * 17;
	for (a = 1; a <= dan1[0]; a++)
	{
		for (int b = 1; b <= dan[0]; b++)
		{
			if (dan1[a] == dan[b])
			{
				while (b < dan[0])
				{
					dan[b] = dan[b + 1];
					b++;
				}
				dan[0]--;
			}
		}
	}
	for (a = 1; a <= kind.liandui[0][0]; a++)
	{
		for (int b = kind.liandui[a][0]; b <= kind.liandui[a][1]; b++)
		{
			for (int c = 1; c <= dui[0]; c++)
			{
				if (dui[c] == b)
				{
					while (c < dui[0])
					{
						dui[c] = dui[c + 1];
						c++;
					}
					dui[0]--;
				}
			}
		}
	}
	a = person[now].card[0];
	if (paiss[0] == 1)
	{
		if (a == 1)
		{
			if (dan[1] > paiss[1])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			else
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
		{
			if (count == 0 && lastpais(person, now, 1) == 0)
			{
				if (pai[16] && pai[17])
				{
					if (pai[15] && 15 > paiss[1])
					{
						pais[0] = 1;
						pais[1] = 15;
						return;
					}
					else
					{
						pais[0] = 1;
						pais[1] = 16;
						return;
					}
				}
				if (pai[16] || pai[17])
				{
					if (paiss[1] == 16 || paiss[1] == 17)
					{
						pais[0] = -pais[0];
						return;
					}
					pais[0] = 1;
					pais[1] = pai[16] * 16 + pai[17] * 17;
					return;
				}
				if (si[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					return;
				}
				for (int a = 15; a > paiss[1]; a--)
				{
					if (pai[a])
					{
						pais[0] = 1;
						pais[1] = a;
						return;
					}
				}
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			if (person[(now + 2 - count) % 3].card[0] < 3)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
		}
		if (a == 2)
		{
			if (dan[0] && dan[2] > 14 && dan[2] > paiss[1])
			{
				pais[0] = 1;
				pais[1] = dan[2];
				return;
			}
		}
		if (a == 3)
		{
			if (dan[0] && dui[0] && dan[1] > 14 && dan[1] > paiss[1])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
		}
		if (a == 4)
		{
			if (dan[0] && san[0] && dan[1] > 14 && dan[1] > paiss[1])
			{
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
		}
		if (lastpais(person, now, 1) == 0)
		{
			if (pai[16] && pai[17])
			{
				if (pai[15])
				{
					pais[0] = 1;
					pais[1] = 15;
					return;
				}
				else
				{
					pais[0] = 1;
					pais[1] = 16;
					return;
				}
			}
			if (pai[16] || pai[17])
			{
				if (paiss[1] < 16)
				{
					pais[0] = 1;
					pais[1] = pai[16] * 16 + pai[17] * 17;
					return;
				}
				else if (paiss[1] == 16)
				{
					pais[0] = 1;
					pais[1] = 17;
					return;
				}
			}
			if (si[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			for (int a = 15; a > paiss[1]; a--)
			{
				if (pai[a])
				{
					pais[0] = 1;
					pais[1] = a;
					return;
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		else
		{
			for (int b = 1; b <= dan[0]; b++)
			{
				if (dan[b] > paiss[1])
				{
					if (dan[b] < 14)
					{
						pais[0] = 1;
						pais[1] = dan[b];
						return;
					}
					else
					{
						if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
						{
							if (dan[b] == 17 && paiss[1] == 16)
							{
								int p = rand() % 18;
								if (p > person[(now + 2 - count) % 3].card[0])
								{
									pais[0] = 1;
									pais[1] = 17;
									return;
								}
								else
									break;
							}
							else if (dan[b] == 15)
							{
								if (dan[b] - paiss[1] < 5)
								{
									pais[0] = 1;
									pais[1] = 15;
									return;
								}
								else
									break;
							}
							else
							{
								if (dan[b] - paiss[1] >= 5)
								{
									int p = rand() % 18;
									if (p <= person[(now + 2 - count) % 3].card[0])
										break;
								}
								int p = rand() % 18;
								if (p > person[(now + 2 - count) % 3].card[0])
								{
									pais[0] = 1;
									pais[1] = dan[b];
									return;
								}
								else
									break;
							}
						}
						else
						{
							if (count)
								pais[0] = 0;
							else
								pais[0] = -pais[0];
							return;
						}
					}
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				for (int b = 13; b < 16; b++)
				{
					if (b <= paiss[1])
						continue;
					if (pai[b] == 1)
					{
						if (b - paiss[1] > 5)
						{
							int p = rand() % 21;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 1;
								pais[1] = b;
								return;
							}
						}
						else
						{
							pais[0] = 1;
							pais[1] = b;
							return;
						}
					}
					else if (pai[b] > 1 && pai[b] < 4)
					{
						if (b > 13)
						{
							int p = rand() % 21;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 1;
								pais[1] = b;
								return;
							}
						}
					}
				}
				if (pai[16] && pai[17])
				{
					int p = rand() % 21;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						p = rand() % 21;
						if (p > person[(now + 2 - count) % 3].card[0])
						{
							pais[0] = 1;
							pais[1] = 16;
							return;
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 2)
	{
		if (person[now].card[0] <= 3 && dui[0])
		{
			if (dui[1] > paiss[1])
			{
				pais[0] = 2;
				pais[1] = pais[2] = dui[1];
				return;
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
		{
			if (person[(now + 2 - count) % 3].card[0] < 3)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
		}
		if (lastpais(person, now, 2) == 0)
		{
			if (dui[0])
			{
				if (dui[dui[0]] > paiss[1])
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[dui[0]];
					return;
				}
			}
			if (si[0])
			{
				pais[0] = 4;
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			if (pai[16] && pai[17])
			{
				pais[0] = 2;
				pais[1] = 16;
				pais[2] = 17;
				return;
			}
			for (int a = 15; a > paiss[1]; a--)
			{
				if (pai[a] > 1)
				{
					pais[0] = 2;
					pais[1] = pais[2] = a;
					return;
				}
			}
		}
		for (int b = 1; b <= dui[0]; b++)
		{
			if (dui[b] > paiss[1])
			{
				if (dui[b] < 14)
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[b];
					return;
				}
				else
				{
					if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
					{
						if (dui[b] - paiss[1] <= 5)
						{
							pais[0] = 2;
							pais[1] = pais[2] = dui[b];
							return;
						}
						else
						{
							int p = rand() % 21;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 2;
								pais[1] = pais[2] = dui[b];
								return;
							}
							else
								break;
						}
					}
					else
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
		{
			for (int b = 13; b < 16; b++)
			{
				if (pai[b] == 2)
				{
					if (b > paiss[1])
					{
						if (b - paiss[1] < 5)
						{
							pais[0] = 2;
							pais[1] = pais[2] = b;
							return;
						}
						else
						{
							int p = rand() % 21;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 2;
								pais[1] = pais[2] = b;
								return;
							}
						}
					}
				}
			}
			for (int b = 13; b < 16; b++)
			{
				if (pai[b] == 3)
				{
					if (b > paiss[1])
					{
						if (b - paiss[1] < 5)
						{
							pais[0] = 2;
							pais[1] = pais[2] = b;
							return;
						}
						else
						{
							int p = rand() % 21;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 2;
								pais[1] = pais[2] = b;
								return;
							}
						}
					}
				}
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
		{
			if (person[(now + 2 - count) % 3].card[0] <= 2)
			{
				for (int b = 15; b > paiss[1]; b--)
				{
					if (pai[b] == 2)
					{
						pais[0] = 2;
						pais[1] = pais[2] = b;
						return;
					}
					if (pai[b] == 3)
					{
						pais[0] = 2;
						pais[1] = pais[2] = b;
						return;
					}
					else if (pai[b] == 4)
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = b;
						return;
					}
				}
				if (pai[16] && pai[17])
				{
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
			}
		}
		if (person[now].card[0] == 3 && san[0] && san[1] > paiss[1])
		{
			pais[0] = 2;
			pais[1] = pais[2] = san[1];
			return;
		}
		if (dui[0] && dui[dui[0]] > paiss[1])
		{
			int b = person[now].card[0];
			if (b == 5 && san[0])
			{
				pais[0] = 2;
				pais[1] = pais[2] = dui[1];
				return;
			}
		}
		if (count)
			pais[0] = 0;
		else
			pais[0] = -pais[0];
		return;
	}
	if (paiss[0] == 3)
	{
		if (kind.sandai[0] == 0 && kind.zhadan[0] == 0)
		{
			if (pai[16] == 0 || pai[17] == 0)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
		}
		if (person[now].card[0] == 3 && kind.sandai[0])
		{
			if (kind.sandai[1] > paiss[1])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = kind.sandai[1];
				return;
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
		{
			if (person[(now + 2 - count) % 3].card[0] <= 5)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
				int p = rand() % 18;
				if (p > person[(now + 2 - count) % 3].card[0])
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
		}
		for (a = 1; a <= san[0]; a++)
		{
			if (san[a] > paiss[1])
			{
				if (san[a] < 14)
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = san[a];
					return;
				}
				else
				{
					if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					else
					{
						if (san[a] - paiss[1] < 5)
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = san[a];
							return;
						}
						else
						{
							int p = rand() % 21;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 3;
								pais[1] = pais[2] = pais[3] = san[a];
								return;
							}
						}
					}
				}
			}
		}
		a = person[now].card[0];
		if (a == 4 && san[0])
		{
			if (san[1] > paiss[0])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = san[1];
				return;
			}
		}
		else if (a == 5 && san[0] && dui[0])
		{
			if (san[1] > paiss[0])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = san[1];
				return;
			}
		}
		else if (a == 6 && san[0] == 2)
		{
			if (san[1] > paiss[0])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = san[1];
				return;
			}
			else if (san[2] > paiss[1])
			{
				pais[0] = 3;
				pais[1] = pais[2] = pais[3] = san[2];
				return;
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
		{
			for (a = 13; a < 16; a++)
			{
				if (pai[a] == 3)
				{
					if (a > paiss[1])
					{
						int p = rand() % 21;
						if (p > person[(now + 2 - count) % 3].card[0])
						{
							pais[0] = 3;
							pais[1] = pais[2] = pais[3] = a;
							return;
						}
						else
							break;
					}
				}
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
		{
			if (person[(now + 2 - count) % 3].card[0] <= 2)
			{
				for (a = paiss[1] + 1; a < 16; a++)
				{
					if (pai[a] == 3)
					{
						pais[0] = 3;
						pais[1] = pais[2] = pais[3] = a;
						return;
					}
				}
				if (si[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = pais[4] = si[0];
					return;
				}
				if (pai[16] && pai[17])
				{
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
			}
		}
		if (count)
			pais[0] = 0;
		else
			pais[0] = -pais[0];
		return;
	}
	if (paiss[0] == 4)
	{
		if (paiss[3] != paiss[4])
		{
			if (kind.sandai[0] == 0 && kind.zhadan[0] == 0)
			{
				if (pai[16] == 0 || pai[17] == 0)
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
			if (person[now].card[0] == 4 && san[0])
			{
				if (san[1] > paiss[1])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = dan[1];
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] <= 5)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (a = 1; a <= san[0]; a++)
			{
				if (san[a] > paiss[1])
				{
					if (san[a] < 14)
					{
						if (dan[0])
						{
							if (dan[1] < 14)
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[a];
								pais[4] = dan[1];
								return;
							}
							else
							{
								if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
								{
									if (count)
										pais[0] = 0;
									else
										pais[0] = -pais[0];
									return;
								}
								else
								{
									int p = rand() % 21;
									if (p > person[(now + 2 - count) % 3].card[0])
									{
										pais[0] = 4;
										pais[1] = pais[2] = pais[3] = san[a];
										pais[4] = dan[1];
										return;
									}
									else
										break;
								}
							}
						}
						else
							break;
					}
					else
					{
						if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
						{
							if (count)
								pais[0] = 0;
							else
								pais[0] = -pais[0];
							return;
						}
						else
						{
							if (dan[0])
							{
								if (san[a] - paiss[1] >= 5)
								{
									int p = rand() % 21;
									if (p <= person[(now + 2 - count) % 3].card[0])
										break;
								}
								if (dan[1] > 13)
								{
									int p = rand() % 21;
									if (p <= person[(now + 2 - count) % 3].card[0])
										break;
								}
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[a];
								pais[4] = dan[1];
								return;
							}
							else
								break;
						}
					}
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (a = 1; a <= san[0]; a++)
					{
						if (san[a] > paiss[1])
							break;
					}
					if (a <= san[0])
					{
						if (dan[0])
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = san[a];
							pais[4] = dan[1];
							return;
						}
						else
						{
							for (int b = 3; b < 16; b++)
							{
								if (pai[b] == 1)
								{
									pais[0] = 4;
									pais[1] = pais[2] = pais[3] = san[a];
									pais[4] = b;
									return;
								}
							}
							if (pai[16] + pai[17] == 1)
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[a];
								pais[4] = pai[16] * 16 + pai[17] * 17;
								return;
							}
							for (int b = 3; b < 16; b++)
							{
								if (pai[b] == 2)
								{
									pais[0] = 4;
									pais[1] = pais[2] = pais[3] = san[a];
									pais[4] = b;
									return;
								}
							}
							for (int b = 3; b < 16; b++)
							{
								if (pai[b] == 3)
								{
									if (san[a] == b)
										continue;
									pais[0] = 4;
									pais[1] = pais[2] = pais[3] = san[a];
									pais[4] = b;
									return;
								}
							}
						}
					}
					for (a = paiss[1] + 1; a < 16; a++)
					{
						if (pai[a] == 3)
						{
							if (dan[0])
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = a;
								pais[4] = dan[1];
								return;
							}
							else
							{
								for (int b = 3; b < 16; b++)
								{
									if (pai[b] == 1)
									{
										pais[0] = 4;
										pais[1] = pais[2] = pais[3] = a;
										pais[4] = b;
										return;
									}
								}
								if (pai[16] + pai[17] == 1)
								{
									pais[0] = 4;
									pais[1] = pais[2] = pais[3] = a;
									pais[4] = pai[16] * 16 + pai[17] * 17;
									return;
								}
								for (int b = 3; b < 16; b++)
								{
									if (pai[b] == 2)
									{
										pais[0] = 4;
										pais[1] = pais[2] = pais[3] = a;
										pais[4] = b;
										return;
									}
								}
								for (int b = 3; b < 16; b++)
								{
									if (pai[b] == 3)
									{
										if (a == b)
											continue;
										pais[0] = 4;
										pais[1] = pais[2] = pais[3] = a;
										pais[4] = b;
										return;
									}
								}
							}
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[3] == paiss[4])
		{
			if (kind.zhadan[kind.zhadan[0]] < paiss[1])
			{
				if (pai[16] == 0 || pai[17] == 0)
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] == 1)
				{
					if (count)
					{
						for (a = 3; a < 16; a++)
							if (pai[a])
								break;
						if (a < 10)
						{
							if (*yishi == 0)
							{
								if (si[si[0]] > paiss[1])
								{
									pais[0] = 4;
									pais[1] = pais[2] = pais[3] = pais[4] = si[si[0]];
									return;
								}
								if (pai[16] && pai[17])
								{
									pais[0] = 2;
									pais[1] = 16;
									pais[2] = 17;
									return;
								}
							}
						}
					}
				}
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] <= 5)
				{
					int p = rand() % 21;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						for (a = 1; a <= si[0]; a++)
							if (si[a] > paiss[1])
								break;
						if (a <= si[0])
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = pais[4] = si[a];
							return;
						}
						if (pai[16] && pai[17])
						{
							pais[0] = 2;
							pais[1] = 16;
							pais[2] = 17;
							return;
						}
					}
				}
				if (person[(now + 2 - count) % 3].card[0] <= 2)
				{
					for (a = 1; a <= si[0]; a++)
						if (si[a] > paiss[1])
							break;
					if (a <= si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[a];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 5)
	{
		if (paiss[1] == paiss[2])
		{
			if (kind.sandai[kind.sandai[0]] < paiss[1] && kind.zhadan[0] == 0)
			{
				if (pai[16] == 0 || pai[17] == 0)
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
			if (person[now].card[0] == 5 && san[0] && dui[0])
			{
				if (san[1] > paiss[1])
				{
					pais[0] = 5;
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = dui[1];
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (a = 1; a <= san[0]; a++)
			{
				if (san[a] > paiss[1])
				{
					if (san[a] < 14)
					{
						if (dui[0])
						{
							if (dui[1] < 14)
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = san[a];
								pais[4] = pais[5] = dui[1];
								return;
							}
							else
							{
								if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
								{
									int p = rand() % 21;
									if (p > person[(now + 2 - count) % 3].card[0])
									{
										pais[0] = 5;
										pais[1] = pais[2] = pais[3] = san[a];
										pais[4] = pais[5] = dui[1];
										return;
									}
								}
								else
								{
									if (count)
										pais[0] = 0;
									else
										pais[0] = -pais[0];
									return;
								}
							}
						}
						else
						{
							if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
							{
								if (count)
									pais[0] = 0;
								else
									pais[0] = -pais[0];
								return;
							}
							else
								break;
						}
					}
					else
					{
						if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
						{
							if (count)
								pais[0] = 0;
							else
								pais[0] = -pais[0];
							return;
						}
						else
						{
							if (san[a] - paiss[1] >= 5)
							{
								int p = rand() % 21;
								if (p <= person[(now + 2 - count) % 3].card[0])
									break;
							}
							if (dui[0])
							{
								if (dui[1] < 14)
								{
									pais[0] = 5;
									pais[1] = pais[2] = pais[3] = san[a];
									pais[4] = pais[5] = dui[1];
									return;
								}
								else
								{
									int p = rand() % 21;
									if (p > person[(now + 2 - count) % 3].card[0])
									{
										pais[0] = 5;
										pais[1] = pais[2] = pais[3] = san[a];
										pais[4] = pais[5] = dui[1];
										return;
									}
									else
										break;
								}
							}
							else
								break;
						}
					}
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] <= 2)
				{
					for (a = 1; a <= san[0]; a++)
						if (san[a] > paiss[1])
							break;
					if (a <= san[0])
					{
						if (dui[0])
						{
							pais[0] = 5;
							pais[1] = pais[2] = pais[3] = san[a];
							pais[4] = pais[5] = dui[1];
							return;
						}
						else
						{
							for (int b = 3; b < 16; b++)
							{
								if (pai[b] == 2)
								{
									pais[0] = 5;
									pais[1] = pais[2] = pais[3] = san[a];
									pais[4] = pais[5] = dui[1];
									return;
								}
							}
							for (int b = 3; b < 16; b++)
							{
								if (pai[b] == 3)
								{
									if (b == san[a])
										continue;
									pais[0] = 5;
									pais[1] = pais[2] = pais[3] = san[a];
									pais[4] = pais[5] = dui[1];
									return;
								}
							}
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] != paiss[2])
		{
			if (kind.shunzi[0][0] == 0 && kind.zhadan[0] == 0 && pai[16] + pai[17] < 2)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			else if (kind.shunzi[0][0] && kind.zhadan[0] == 0 && pai[16] + pai[17] < 2)
			{
				if (kind.shunzi[kind.shunzi[0][0]][1] <= paiss[5])
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
			if (person[now].card[0] == 5)
			{
				if (kind.shunzi[0][0] && kind.shunzi[1][1] > paiss[5])
				{
					pais[0] = 5;
					one = 1;
					for (int b = kind.shunzi[1][0]; one < 6; b++)
						pais[one++] = b;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.shunzi[0][0]; b++)
			{
				if (kind.shunzi[b][1] <= paiss[5])
					continue;
				int end = 0, min = 5;
				for (int c = kind.shunzi[b][1]; c > paiss[5] && c > kind.shunzi[b][0] + 3; c--)
				{
					int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
					for (int d = c - 4; d <= c; d++)
					{
						if (pai[d] == 1)
							one1++;
						else if (pai[d] == 2)
							two1++;
						else if (pai[d] == 3)
							three1++;
						else
							four1++;
					}
					if (four1 || three1 > 1)
						continue;
					if (three1)
					{
						if (one1 == 4)
						{
							if (min > 1)
							{
								min = 1;
								end = c;
							}
						}
						else if (one1 == 3 && two1)
						{
							if (min > 2)
							{
								min = 2;
								end = c;
							}
						}
					}
					else
					{
						if (min >= two1)
						{
							min = two1;
							end = c;
						}
					}
				}
				if (end)
				{
					if (end == 14)
						if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
							break;
					pais[0] = 5;
					one = 1;
					for (int c = end - 4; c <= end; c++)
						pais[one++] = c;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int b = 1; b <= kind.shunzi[0][0]; b++)
					{
						if (kind.shunzi[b][1] <= paiss[5])
							continue;
						int end = 0, min = 5;
						for (int c = kind.shunzi[b][1]; c > paiss[5] && c > kind.shunzi[b][0] + 3; c--)
						{
							int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
							for (int d = c - 4; d <= c; d++)
							{
								if (pai[d] == 1)
									one1++;
								else if (pai[d] == 2)
									two1++;
								else if (pai[d] == 3)
									three1++;
								else
									four1++;
							}
							if (four1)
								continue;
							if (5 - one1 <= min)
							{
								min = 5 - one1;
								end = c;
							}
						}
						if (end)
						{
							pais[0] = 5;
							one = 1;
							for (int c = end - 4; c <= end; c++)
								pais[one++] = c;
							return;
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 6)
	{
		if (paiss[1] != paiss[2])
		{
			if (person[now].card[0] == 6 && kind.shunzi[0][0])
			{
				if (kind.shunzi[1][1] > paiss[6] && kind.shunzi[1][1] - kind.shunzi[1][0] == 5)
				{
					pais[0] = 6;
					one = 1;
					for (int b = kind.shunzi[1][0]; one < 7; b++)
						pais[one++] = b;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.shunzi[0][0]; b++)
			{
				if (kind.shunzi[b][1] <= paiss[6] || kind.shunzi[b][1] - kind.shunzi[b][0] < 5)
					continue;
				int end = 0, min = 6;
				for (int c = kind.shunzi[b][1]; c > paiss[6] && c > kind.shunzi[b][0] + 4; c--)
				{
					int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
					for (int d = c - 5; d <= c; d++)
					{
						if (pai[d] == 1)
							one1++;
						else if (pai[d] == 2)
							two1++;
						else if (pai[d] == 3)
							three1++;
						else
							four1++;
					}
					if (four1 || three1 > 1)
						continue;
					if (6 - one1 <= min && 6 - one1 < 4)
					{
						min = 6 - one1;
						end = c;
					}
				}
				if (end)
				{
					pais[0] = 6;
					one = 1;
					for (a = end - 5; a <= end; a++)
						pais[one++] = a;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int b = 1; b <= kind.shunzi[0][0]; b++)
					{
						if (kind.shunzi[b][1] <= paiss[6])
							continue;
						int end = 0, min = 6;
						for (int c = kind.shunzi[b][1]; c > paiss[6] && c > kind.shunzi[b][0] + 4; c--)
						{
							int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
							for (int d = c - 5; d <= c; d++)
							{
								if (pai[d] == 1)
									one1++;
								else if (pai[d] == 2)
									two1++;
								else if (pai[d] == 3)
									three1++;
								else
									four1++;
							}
							if (four1)
								continue;
							if (6 - one1 <= min)
							{
								min = 6 - one1;
								end = c;
							}
						}
						if (end)
						{
							pais[0] = 6;
							one = 1;
							for (int c = end - 5; c <= end; c++)
								pais[one++] = c;
							return;
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
		{
			if (person[now].card[0] == 6 && kind.liandui[0][0])
			{
				if (kind.liandui[1][1] > paiss[6])
				{
					pais[0] = 6;
					one = 1;
					for (a = kind.liandui[1][0]; one < 7; a++)
					{
						pais[one] = pais[one + 1] = a;
						one += 2;
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.liandui[0][0]; b++)
			{
				if (kind.liandui[b][1] <= paiss[6])
					continue;
				for (int c = kind.liandui[b][0]; c <= kind.liandui[b][1]; c++)
				{
					if (c > paiss[1])
					{
						if (c == 12)
						{
							if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
							{
								if (count)
									pais[0] = 0;
								else
									pais[0] = -pais[0];
								return;
							}
						}
						pais[0] = 6;
						one = 1;
						while (one < 7)
						{
							pais[one] = pais[one + 1] = c++;
							one += 2;
						}
						return;
					}
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int b = paiss[1] + 1; b < 13; b++)
					{
						if (pai[b] > 1 && pai[b] < 4)
						{
							int c = b + 1;
							while (c < 15 && pai[c] > 1 && pai[c] < 4)
								c++;
							c--;
							if (c - b > 1)
							{
								pais[0] = 6;
								one = 1;
								while (one < 7)
								{
									pais[one] = pais[one + 1] = b++;
									one += 2;
								}
								return;
							}
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] != paiss[4])
		{
			if (person[now].card[0] == 6 && kind.feiji[0][0])
			{
				if (kind.feiji[1][1] > paiss[6])
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
					pais[4] = pais[5] = pais[6] = kind.feiji[1][1];
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.feiji[0][0]; b++)
			{
				if (kind.feiji[b][1] <= paiss[6])
					continue;
				for (a = kind.feiji[b][1]; a > paiss[6] && a > kind.feiji[b][0]; a--);
				a++;
				if (a == 14)
				{
					if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
				pais[0] = 6;
				pais[1] = pais[2] = pais[3] = a - 1;
				pais[4] = pais[5] = pais[6] = a;
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] == paiss[4])
		{
			if (person[now].card[0] == 6 && si[0])
			{
				if (si[1] > paiss[1])
				{
					pais[0] = 6;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					if (dui[0])
						pais[5] = pais[6] = dui[1];
					else
					{
						pais[5] = dan[1];
						pais[6] = dan[2];
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			for (a = 1; a <= si[0]; a++)
			{
				if (si[a] > paiss[1])
				{
					if (dan[0] > 1)
					{
						if (dan[2] < 14)
						{
							pais[0] = 6;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							pais[5] = dan[1];
							pais[6] = dan[2];
							return;
						}
					}
					if (dui[0])
					{
						if (dui[1] < 14)
						{
							pais[0] = 6;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							pais[5] = pais[6] = dui[1];
							return;
						}
					}
				}
			}
			if (person[(now + 2 - count) % 3].card[0] < 3)
			{
				if (si[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					return;
				}
				if (pai[16] && pai[17])
				{
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 7)
	{
		if (person[now].card[0] == 7)
		{
			if (kind.shunzi[0][0] && kind.shunzi[1][1] - kind.shunzi[1][0] == 6)
			{
				if (kind.shunzi[1][1] > paiss[7])
				{
					pais[0] = 7;
					one = 1;
					for (a = kind.shunzi[1][0]; one < 8; a++)
						pais[one++] = a;
					return;
				}
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
		{
			if (person[(now + 2 - count) % 3].card[0] < 6)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
				int p = rand() % 18;
				if (p > person[(now + 2 - count) % 3].card[0])
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
		}
		for (int b = 1; b <= kind.shunzi[0][0]; b++)
		{
			if (kind.shunzi[b][1] <= paiss[7] || kind.shunzi[b][1] - kind.shunzi[b][0] < 6)
				continue;
			int end = 0, min = 7;
			for (int c = kind.shunzi[b][1]; c > paiss[7] && c > kind.shunzi[b][0] + 5; c--)
			{
				int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
				for (int d = c - 6; d <= c; d++)
				{
					if (pai[d] == 1)
						one1++;
					else if (pai[d] == 2)
						two1++;
					else if (pai[d] == 3)
						three1++;
					else
						four1++;
				}
				if (four1 || three1 > 1)
					continue;
				else
				{
					if (7 - one1 < 4 && 7 - one1 <= min)
					{
						end = c;
						min = 7 - one1;
					}
				}
			}
			if (end)
			{
				pais[0] = 7;
				one = 1;
				for (a = end - 6; one < 8; a++)
					pais[one++] = a;
				return;
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
		{
			if (person[(now + 2 - count) % 3].card[0] < 3)
			{
				for (int b = 1; b <= kind.shunzi[0][0]; b++)
				{
					if (kind.shunzi[b][1] <= paiss[7] || kind.shunzi[b][1] - kind.shunzi[b][0] < 6)
						continue;
					int end = 0, min = 7;
					for (int c = kind.shunzi[b][1]; c > paiss[7] && c > kind.shunzi[b][0] + 5; c--)
					{
						int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
						for (int d = c - 6; d <= c; d++)
						{
							if (pai[d] == 1)
								one1++;
							else if (pai[d] == 2)
								two1++;
							else if (pai[d] == 3)
								three1++;
							else
								four1++;
						}
						if (four1)
							continue;
						else
						{
							if (7 - one1 <= min)
							{
								end = c;
								min = 7 - one1;
							}
						}
					}
					if (end)
					{
						pais[0] = 7;
						one = 1;
						for (a = end - 6; one < 8; a++)
							pais[one++] = a;
						return;
					}
				}
				if (si[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					return;
				}
				if (pai[16] && pai[17])
				{
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
			}
		}
		if (count)
			pais[0] = 0;
		else
			pais[0] = -pais[0];
		return;
	}
	if (paiss[0] == 8)
	{
		if (paiss[1] != paiss[2])
		{
			if (person[now].card[0] == 8 && kind.shunzi[0][0])
			{
				if (kind.shunzi[1][1] - kind.shunzi[1][0] == 7 && kind.shunzi[1][1] > paiss[8])
				{
					pais[0] = 8;
					one = 1;
					for (a = kind.shunzi[1][0]; one < 9; a++)
						pais[one++] = a;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.shunzi[0][0]; b++)
			{
				if (kind.shunzi[b][1] <= paiss[8])
					continue;
				int end = 0, min = 8;
				for (int c = kind.shunzi[b][1]; c > paiss[8] && c > kind.shunzi[b][0] + 6; c--)
				{
					int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
					for (int d = c - 7; d <= c; d++)
					{
						if (pai[d] == 1)
							one1++;
						else if (pai[d] == 2)
							two1++;
						else if (pai[d] == 3)
							three1++;
						else
							four1++;
					}
					if (four1 || three1 > 1)
						continue;
					if (8 - one1 < 4 && 8 - one1 <= min)
					{
						min = 8 - one1;
						end = c;
					}
				}
				if (end)
				{
					pais[0] = 8;
					one = 1;
					for (a = end - 7; one < 9; a++)
						pais[one++] = a;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int b = 1; b <= kind.shunzi[0][0]; b++)
					{
						if (kind.shunzi[b][1] <= paiss[8])
							continue;
						int end = 0, min = 8;
						for (int c = kind.shunzi[b][1]; c > paiss[8] && c > kind.shunzi[b][0] + 6; c--)
						{
							int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
							for (int d = c - 7; d <= c; d++)
							{
								if (pai[d] == 1)
									one1++;
								else if (pai[d] == 2)
									two1++;
								else if (pai[d] == 3)
									three1++;
								else
									four1++;
							}
							if (four1)
								continue;
							if (8 - one1 <= min)
							{
								min = 8 - one1;
								end = c;
							}
						}
						if (end)
						{
							pais[0] = 8;
							one = 1;
							for (a = end - 7; one < 9; a++)
								pais[one++] = a;
							return;
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
		{
			if (person[now].card[0] == 8 && kind.liandui[0][0])
			{
				if (kind.liandui[1][1] > paiss[8] && kind.liandui[1][1] - kind.liandui[1][0] == 3)
				{
					pais[0] = 8;
					one = 1;
					for (a = kind.liandui[1][0]; one < 9; a++)
					{
						pais[one] = pais[one + 1] = a;
						one += 2;
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.liandui[0][0]; b++)
			{
				if (kind.liandui[b][1] <= paiss[8] || kind.liandui[b][1] - kind.liandui[b][0] < 3)
					continue;
				for (a = kind.liandui[b][1]; a > paiss[8] && a > kind.liandui[b][0] + 2; a--);
				a++;
				pais[0] = 8;
				one = 1;
				for (int b = a - 3; one < 9; b++)
				{
					pais[one] = pais[one + 1] = b;
					one += 2;
				}
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int b = paiss[1] + 1; b < 12; b++)
					{
						if (pai[b] > 1)
						{
							int c = b + 1;
							while (c < 15 && pai[c] > 1)
								c++;
							c--;
							if (c - b >= 3)
							{
								pais[0] = 8;
								one = 1;
								for (a = b; one < 9; a++)
								{
									pais[one] = pais[one + 1] = a;
									one += 2;
								}
								return;
							}
							else
							{
								b = c;
								continue;
							}
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] != paiss[4])
		{
			if (person[now].card[0] == 8 && kind.feiji[0][0])
			{
				if (pai[16] && pai[17])
				{
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
				if (kind.feiji[1][1] > paiss[4])
				{
					pais[0] = 8;
					pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
					pais[4] = pais[5] = pais[6] = pais[1] + 1;
					one = 7;
					for (a = 3; one < 9; a++)
					{
						if (pai[a] && pai[a] != 3)
						{
							pai[a]--;
							pais[one++] = a--;
						}
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.feiji[0][0]; b++)
			{
				if (kind.feiji[b][0] < paiss[4])
					continue;
				int c;
				for (c = kind.feiji[b][0]; c <= kind.feiji[b][1]; c++)
					if (pai[c] == 4)
						break;
				if (c - kind.feiji[b][0] < 2 && kind.feiji[b][1] - c < 2)
					continue;
				else if (c - kind.feiji[b][0] >= 2)
					kind.feiji[b][1] = c - 1;
				else
					kind.feiji[b][0] = c + 1;
				if (kind.feiji[b][0] == 13)
					if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
						break;
				if (dan[0] > 1)
				{
					if (dan[2] < 14)
					{
						pais[0] = 8;
						pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
						pais[4] = pais[5] = pais[6] = pais[1] + 1;
						pais[7] = dan[1];
						pais[8] = dan[2];
						return;
					}
					else
					{
						if (dui[0])
						{
							if (dui[1] < 14)
							{
								pais[0] = 8;
								pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
								pais[4] = pais[5] = pais[6] = pais[1] + 1;
								pais[7] = pais[8] = dui[1];
								return;
							}
						}
						if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
						{
							if (count)
								pais[0] = 0;
							else
								pais[0] = -pais[0];
							return;
						}
						else
						{
							int p = rand() % 21;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 8;
								pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
								pais[4] = pais[5] = pais[6] = pais[1] + 1;
								pais[7] = dan[1];
								pais[8] = dan[2];
								return;
							}
							else
								break;
						}
					}
				}
				else
				{
					if (dui[0])
					{
						if (dui[1] < 14)
						{
							pais[0] = 8;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = pais[8] = dui[1];
							return;
						}
						else
						{
							if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
							{
								if (count)
									pais[0] = 0;
								else
									pais[0] = -pais[0];
								return;
							}
							else
							{
								int p = rand() % 21;
								if (p > person[(now + 2 - count) % 3].card[0])
								{
									pais[0] = 8;
									pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
									pais[4] = pais[5] = pais[6] = pais[1] + 1;
									pais[7] = pais[8] = dui[1];
									return;
								}
								else
									break;
							}
						}
					}
					else
						break;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
					for (int b = 1; b <= kind.feiji[0][0]; b++)
					{
						if (kind.feiji[b][0] < paiss[4])
							continue;
						if (dan[0] > 1)
						{
							pais[0] = 8;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = dan[1];
							pais[8] = dan[2];
							return;
						}
						else if (dui[0])
						{
							pais[0] = 8;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = pais[8] = dui[1];
							return;
						}
						else
						{
							int dan[21] = { 0 };
							int dui[11] = { 0 };
							int san[11] = { 0 };
							for (int a = 3; a < 18; a++)
							{
								if (pai[a] == 1)
									dan[++dan[0]] = a;
								else if (pai[a] == 2)
									dui[++dui[0]] = a;
								else if (pai[a] == 3)
									san[++san[0]] = a;
							}
							if (dan[0] + 2 * dui[0] + 3 * san[0] >= 8)
							{
								pais[0] = 8;
								pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
								pais[4] = pais[5] = pais[6] = pais[1] + 1;
								if (dan[0] > 1)
								{
									pais[7] = dan[1];
									pais[8] = dan[2];
									return;
								}
								else if (dui[0])
								{
									pais[7] = pais[8] = dui[1];
									return;
								}
								else
								{
									if (dan[0])
									{
										pais[7] = dan[1];
										for (int a = 1; a <= san[0]; a++)
										{
											if (san[a] != paiss[1] && san[a] != paiss[4])
											{
												pais[8] = san[a];
												break;
											}
										}
										return;
									}
									else
									{
										for (int a = 1; a <= san[0]; a++)
										{
											if (san[a] != paiss[1] && san[a] != paiss[4])
											{
												pais[7] = pais[8] = san[a];
												break;
											}
										}
										return;
									}
								}
							}
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] == paiss[4])
		{
			if (person[now].card[0] == 8 && kind.zhadan[0] && two == 2)
			{
				if (kind.zhadan[1] > paiss[1])
				{
					pais[0] = 8;
					pais[1] = pais[2] = pais[3] = pais[4] = kind.zhadan[1];
					pais[5] = pais[6] = dui[1];
					pais[7] = pais[8] = dui[2];
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int a = 1; a <= si[0]; a++)
					{
						if (si[a] < paiss[1])
							continue;
						if (dui[0] > 1)
						{
							pais[0] = 8;
							pais[1] = pais[2] = pais[3] = pais[4] = si[a];
							pais[5] = pais[6] = dui[1];
							pais[7] = pais[8] = dui[2];
							return;
						}
						else
							break;
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 9)
	{
		if (paiss[1] != paiss[2])
		{
			if (person[now].card[0] == 9 && kind.shunzi[0][0])
			{
				if (kind.shunzi[1][1] - kind.shunzi[1][0] == 8 && kind.shunzi[1][1] > paiss[9])
				{
					pais[0] = 9;
					one = 1;
					for (a = kind.shunzi[1][0]; one < 10; a++)
						pais[one++] = a;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.shunzi[0][0]; b++)
			{
				if (kind.shunzi[b][1] - kind.shunzi[b][0] < 8 || kind.shunzi[b][1] <= paiss[9])
					continue;
				int end = 0, min = 9;
				for (int c = kind.shunzi[b][1]; c > paiss[9] && c > kind.shunzi[b][0] + 7; c--)
				{
					int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
					for (int d = c - 8; d <= c; d++)
					{
						if (pai[d] == 1)
							one1++;
						else if (pai[d] == 2)
							two1++;
						else if (pai[d] == 3)
							three1++;
						else
							four1++;
					}
					if (four1 || three1 > 1)
						continue;
					if (9 - one1 <= 4 && 9 - one1 <= min)
					{
						end = c;
						min = 9 - one1;
					}
				}
				if (end)
				{
					pais[0] = 9;
					one = 1;
					for (a = end - 8; one < 10; a++)
						pais[one++] = a;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int b = 1; b <= kind.shunzi[0][0]; b++)
					{
						if (kind.shunzi[b][1] - kind.shunzi[b][0] < 8 || kind.shunzi[b][1] <= paiss[9])
							continue;
						int end = 0, min = 9;
						for (int c = kind.shunzi[b][1]; c > paiss[9] && c > kind.shunzi[b][0] + 7; c--)
						{
							int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
							for (int d = c - 8; d <= c; d++)
							{
								if (pai[d] == 1)
									one1++;
								else if (pai[d] == 2)
									two1++;
								else if (pai[d] == 3)
									three1++;
								else
									four1++;
							}
							if (four1)
								continue;
							if (9 - one1 <= min)
							{
								end = c;
								min = 9 - one1;
							}
						}
						if (end)
						{
							pais[0] = 9;
							one = 1;
							for (a = end - 8; one < 10; a++)
								pais[one++] = a;
							return;
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2])
		{
			if (person[now].card[0] == 9 && kind.feiji[0][0] && kind.feiji[1][1] - kind.feiji[1][0] == 2)
			{
				if (kind.feiji[1][1] > paiss[9])
				{
					pais[0] = 9;
					pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
					pais[4] = pais[5] = pais[6] = pais[1] + 1;
					pais[7] = pais[8] = pais[9] = pais[4] + 1;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.feiji[0][0]; b++)
			{
				if (kind.feiji[b][1] - kind.feiji[b][0] < 2 || kind.feiji[b][1] <= paiss[9])
					continue;
				if (kind.feiji[b][0] == 12)
					if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
						break;
				pais[0] = 9;
				pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
				pais[4] = pais[5] = pais[6] = pais[1] + 1;
				pais[7] = pais[8] = pais[9] = pais[4] + 1;
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 10)
	{
		if (paiss[1] != paiss[2])
		{
			if (person[now].card[0] == 10 && kind.shunzi[0][0] && kind.shunzi[1][1] - kind.shunzi[1][0] == 9)
			{
				if (kind.shunzi[1][1] > paiss[10])
				{
					pais[0] = 10;
					one = 1;
					for (a = kind.shunzi[1][0]; one < 11; a++)
						pais[one++] = a;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.shunzi[0][0]; b++)
			{
				if (kind.shunzi[b][1] <= paiss[10] || kind.shunzi[b][1] - kind.shunzi[b][0] < 9)
					continue;
				int end = 0, min = 10;
				for (int c = kind.shunzi[b][1]; c > paiss[10] && c > kind.shunzi[b][0] + 8; c--)
				{
					int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
					for (int d = c - 9; d <= c; d++)
					{
						if (pai[d] == 1)
							one1++;
						else if (pai[d] == 2)
							two1++;
						else if (pai[d] == 3)
							three1++;
						else
							four1++;
					}
					if (four1 || three1 > 2)
						continue;
					if (10 - one1 < 5 && 10 - one1 <= min)
					{
						end = c;
						min = 10 - one1;
					}
				}
				if (end)
				{
					pais[0] = 10;
					one = 1;
					for (a = end - 9; one < 11; a++)
						pais[one++] = a;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int b = 1; b <= kind.shunzi[0][0]; b++)
					{
						if (kind.shunzi[b][1] <= paiss[10] || kind.shunzi[b][1] - kind.shunzi[b][0] < 9)
							continue;
						int end = 0, min = 10;
						for (int c = kind.shunzi[b][1]; c > paiss[10] && c > kind.shunzi[b][0] + 8; c--)
						{
							int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
							for (int d = c - 9; d <= c; d++)
							{
								if (pai[d] == 1)
									one1++;
								else if (pai[d] == 2)
									two1++;
								else if (pai[d] == 3)
									three1++;
								else
									four1++;
							}
							if (four1)
								continue;
							if (10 - one1 <= min)
							{
								end = c;
								min = 10 - one1;
							}
						}
						if (end)
						{
							pais[0] = 10;
							one = 1;
							for (a = end - 9; one < 11; a++)
								pais[one++] = a;
							return;
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
		{
			if (person[now].card[0] == 10 && kind.liandui[0][0] && kind.liandui[1][1] - kind.liandui[1][0] == 4)
			{
				if (kind.liandui[1][1] > paiss[9])
				{
					pais[0] = 10;
					one = 1;
					for (a = kind.liandui[1][0]; one < 11; a++)
					{
						pais[one] = pais[one + 1] = a;
						one += 2;
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.liandui[0][0]; b++)
			{
				if (kind.liandui[b][1] <= paiss[10] || kind.liandui[b][1] - kind.liandui[b][0] < 4)
					continue;
				int c = kind.liandui[b][1];
				while (c > paiss[10] && c > kind.liandui[b][0] + 3)
					c--;
				c++;
				pais[0] = 10;
				one = 1;
				for (int d = c - 4; one < 11; d++)
				{
					pais[one] = pais[one + 1] = d;
					one += 2;
				}
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					for (int b = paiss[1] + 1; b < 11; b++)
					{
						if (pai[b] > 1 && pai[b] < 4)
						{
							int c = b + 1;
							while (c < 15 && pai[c] > 1 && pai[c] < 4)
								c++;
							c--;
							if (c - b >= 4)
							{
								pais[0] = 10;
								one = 1;
								for (int d = b; one < 11; d++)
								{
									pais[one] = pais[one + 1] = d;
									one += 2;
								}
								return;
							}
						}
					}
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] != paiss[4])
		{
			if (person[now].card[0] == 10 && kind.feiji[0][0] && dui[0] == 2)
			{
				if (kind.feiji[1][1] > paiss[4])
				{
					pais[0] = 10;
					pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
					pais[4] = pais[5] = pais[6] = pais[1] + 1;
					pais[7] = pais[8] = dui[1];
					pais[9] = pais[10] = dui[2];
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 6)
				{
					if (person[(now + 2 - count) % 3].card[0] < 3)
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
					int p = rand() % 18;
					if (p > person[(now + 2 - count) % 3].card[0])
					{
						if (count)
							pais[0] = 0;
						else
							pais[0] = -pais[0];
						return;
					}
				}
			}
			for (int b = 1; b <= kind.feiji[0][0]; b++)
			{
				if (kind.feiji[b][1] <= paiss[4])
					continue;
				if (dui[0] < 2)
					break;
				int c = kind.feiji[b][0];
				for (; c <= kind.feiji[b][1]; c++)
					if (pai[c] == 4)
						break;
				if (c <= kind.feiji[b][1])
				{
					if (c - kind.feiji[b][0] < 2 && kind.feiji[b][1] - c < 2)
						continue;
					else if (c - kind.feiji[b][0] > 1)
						kind.feiji[b][1] = c - 1;
					else
						kind.feiji[b][0] = c + 1;
				}
				if (kind.feiji[b][0] == 13)
					if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
						break;
				if (dui[0] < 2)
					break;
				else
				{
					if (dui[2] < 14)
					{
						pais[0] = 10;
						pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
						pais[4] = pais[5] = pais[6] = pais[1] + 1;
						pais[7] = pais[8] = dui[1];
						pais[9] = pais[10] = dui[2];
						return;
					}
					else
					{
						if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
							break;
						else
						{
							int p = rand() % 21;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 10;
								pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
								pais[4] = pais[5] = pais[6] = pais[1] + 1;
								pais[7] = pais[8] = dui[1];
								pais[9] = pais[10] = dui[2];
								return;
							}
							else
								break;
						}
					}
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
					for (int b = 1; b <= kind.feiji[0][0]; b++)
					{
						if (kind.feiji[b][1] <= paiss[6])
							continue;
						if (dui[0] > 1)
						{
							pais[0] = 10;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = pais[8] = dui[1];
							pais[9] = pais[10] = dui[2];
							return;
						}
						else
						{
							int dui[11] = { 0 };
							int san[11] = { 0 };
							for (int c = 3; c < 16; c++)
							{
								if (pai[c] == 2)
									dui[++dui[0]] = c;
								else if (pai[c] == 3)
									san[++san[0]] = c;
							}
							if (dui[0] + san[0] > 3)
							{
								pais[0] = 10;
								pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
								pais[4] = pais[5] = pais[6] = pais[1] + 1;
								if (dui[0] > 1)
								{
									pais[7] = pais[8] = dui[1];
									pais[9] = pais[10] = dui[2];
								}
								else if (dui[0] == 1)
								{
									pais[7] = pais[8] = dui[1];
									for (int c = 1; c <= san[0]; c++)
									{
										if (san[c] != pais[1] && san[c] != pais[4])
										{
											pais[9] = pais[10] = san[c];
											break;
										}
									}
								}
								else
								{
									one = 7;
									for (int c = 1; one < 11; c++)
									{
										if (san[c] != pais[1] && san[c] != pais[4])
										{
											pais[one] = pais[one + 1] = san[c];
											one += 2;
										}
									}
								}
								return;
							}
							else
								break;
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 11)
	{
		if (person[now].card[0] == 11 && kind.shunzi[0][0])
		{
			if (kind.shunzi[1][1] - kind.shunzi[1][0] == 10 && kind.shunzi[1][1] > paiss[11])
			{
				pais[0] = 11;
				one = 1;
				for (a = 4; one < 12; a++)
					pais[one++] = a;
				return;
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
		{
			if (person[(now + 2 - count) % 3].card[0] < 3)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			int p = rand() % 18;
			if (p > person[(now + 2 - count) % 3].card[0])
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
		}
		if (paiss[11] < 14)
		{
			if (kind.shunzi[0][0])
			{
				if (kind.shunzi[1][1] - kind.shunzi[1][0] == 10 && kind.shunzi[1][1] == 14)
				{
					int one1 = 0, two1 = 0, three1 = 0, four1 = 0;
					for (int b = 4; b < 15; b++)
					{
						if (pai[b] == 1)
							one1++;
						else if (pai[b] == 2)
							two1++;
						else if (pai[b] == 3)
							three1++;
						else
							four1++;
					}
					if (four1 == 0 && three1 < 3)
					{
						if (11 - one1 < 5)
						{
							pais[0] = 11;
							one = 1;
							for (a = 4; one < 12; a++)
								pais[one++] = a;
							return;
						}
					}
				}
			}
		}
		if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
		{
			if (person[(now + 2 - count) % 3].card[0] < 3)
			{
				if (si[0])
				{
					pais[0] = 4;
					pais[1] = pais[2] = pais[3] = pais[4] = si[1];
					return;
				}
				if (pai[16] && pai[17])
				{
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
				if (paiss[11] < 14)
				{
					if (kind.shunzi[0][0])
					{
						if (kind.shunzi[1][1] - kind.shunzi[1][0] == 10 && kind.shunzi[1][1] == 14)
						{
							pais[0] = 11;
							one = 1;
							for (a = 4; one < 12; a++)
								pais[one++] = a;
							return;
						}
					}
				}
			}
		}
		if (count)
			pais[0] = 0;
		else
			pais[0] = -pais[0];
		return;
	}
	if (paiss[0] == 12)
	{
		if (paiss[1] != paiss[2])
		{
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
		{
			if (person[now].card[0] == 12 && kind.liandui[0][0])
			{
				if (kind.liandui[1][1] - kind.liandui[1][0] == 5 && kind.liandui[1][1] > paiss[12])
				{
					pais[0] = 12;
					one = 1;
					for (a = kind.liandui[1][0]; one < 13; a++)
					{
						pais[one] = pais[one + 1] = a;
						one += 2;
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
				int p = rand() % 18;
				if (p > person[(now + 2 - count) % 3].card[0])
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
			for (int b = 1; b <= kind.liandui[0][0]; b++)
			{
				if (kind.liandui[b][1] <= paiss[12] || kind.liandui[b][1] - kind.liandui[b][0] < 5)
					continue;
				int c = kind.liandui[b][1];
				while (c > paiss[12] && c > kind.liandui[b][0] + 4)
					c--;
				c++;
				pais[0] = 12;
				one = 1;
				for (a = c - 5; one < 13; a++)
				{
					pais[one] = pais[one + 1] = a;
					one += 2;
				}
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
					for (int b = paiss[1] + 1; b < 10; b++)
					{
						if (pai[b] > 1)
						{
							int c = b + 1;
							while (c < 15 && pai[c] > 1)
								c++;
							c--;
							if (c - b > 4)
							{
								pais[0] = 12;
								one = 1;
								for (a = b; one < 13; a++)
								{
									pais[one] = pais[one + 1] = a;
									one += 2;
								}
								return;
							}
							else
							{
								b = c;
								continue;
							}
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] == paiss[3])
		{
			if (person[now].card[0] == 12 && kind.feiji[0][0])
			{
				if (kind.feiji[1][0] > paiss[9] && kind.feiji[1][1] - kind.feiji[1][0] >= 2)
				{
					pais[0] = 12;
					pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
					pais[4] = pais[5] = pais[6] = pais[1] + 1;
					pais[7] = pais[8] = pais[9] = pais[4] + 1;
					one = 10;
					for (a = 3; one < 13; a++)
					{
						if (pai[a])
						{
							if (pai[a] != 3)
							{
								pai[a]--;
								pais[one++] = a--;
							}
							else
							{
								if (a >= paiss[1] && a <= paiss[7])
									continue;
								else
								{
									pai[a]--;
									pais[one++] = a--;
								}
							}
						}
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
				int p = rand() % 18;
				if (p > person[(now + 2 - count) % 3].card[0])
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
			for (int b = 1; b <= kind.feiji[0][0]; b++)
			{
				if (kind.feiji[b][0] <= paiss[7] || kind.feiji[b][1] - kind.feiji[b][0] < 2)
					continue;
				int d = kind.feiji[b][0];
				for (; d <= kind.feiji[b][1]; b++)
					if (pai[d] == 4)
						break;
				if (d < kind.feiji[b][1])
				{
					if (d - kind.feiji[b][0] < 3 && kind.feiji[b][1] - d < 3)
						continue;
					else if (d - kind.feiji[b][0] >= 3)
						kind.feiji[b][1] = d - 1;
					else
						kind.feiji[b][0] = d + 1;
				}
				if (kind.feiji[b][0] == 12)
					if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
						break;
				if (dan[0] == 0)
					break;
				if (dan[0] > 2)
				{
					if (dan[3] < 14)
					{
						pais[0] = 12;
						pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
						pais[4] = pais[5] = pais[6] = pais[1] + 1;
						pais[7] = pais[8] = pais[9] = pais[4] + 1;
						pais[10] = dan[1];
						pais[11] = dan[2];
						pais[12] = dan[3];
						return;
					}
					else
					{
						if (dui[0])
						{
							if (dui[1] < 14)
							{
								pais[0] = 12;
								pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
								pais[4] = pais[5] = pais[6] = pais[1] + 1;
								pais[7] = pais[8] = pais[9] = pais[4] + 1;
								pais[10] = dan[1];
								pais[11] = pais[12] = dui[1];
								return;
							}
							else
							{
								if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
									break;
								else
								{
									int p = rand() % 18;
									if (p > person[(now + 2 - count) % 3].card[0])
									{
										pais[0] = 12;
										pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
										pais[4] = pais[5] = pais[6] = pais[1] + 1;
										pais[7] = pais[8] = pais[9] = pais[4] + 1;
										pais[10] = dan[1];
										pais[11] = pais[12] = dui[1];
										return;
									}
									else
										break;
								}
							}
						}
						else
						{
							if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
								break;
							else
							{
								int p = rand() % 18;
								if (p > person[(now + 2 - count) % 3].card[0])
								{
									pais[0] = 12;
									pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
									pais[4] = pais[5] = pais[6] = pais[1] + 1;
									pais[7] = pais[8] = pais[9] = pais[4] + 1;
									pais[10] = dan[1];
									pais[11] = dan[2];
									pais[12] = dan[3];
									return;
								}
								else
									break;
							}
						}
					}
				}
				if (dan[0] && dan[0] < 3)
				{
					if (dui[0])
					{
						if (dan[1] < 14 && dui[1] < 14)
						{
							pais[0] = 12;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = pais[8] = pais[9] = pais[4] + 1;
							pais[10] = dan[1];
							pais[11] = pais[12] = dui[1];
							return;
						}
						else
						{
							if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
								break;
							else
							{
								int p = rand() % 18;
								if (p > person[(now + 2 - count) % 3].card[0])
								{
									pais[0] = 12;
									pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
									pais[4] = pais[5] = pais[6] = pais[1] + 1;
									pais[7] = pais[8] = pais[9] = pais[4] + 1;
									pais[10] = dan[1];
									pais[11] = pais[12] = dui[1];
									return;
								}
								else
									break;
							}
						}
					}
					else
						break;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
					for (int b = 1; b <= kind.feiji[0][0]; b++)
					{
						if (person[now].card[0] < 12)
							break;
						if (kind.feiji[b][0] <= paiss[1] || kind.feiji[b][1] - kind.feiji[b][0] < 2)
							continue;
						pais[0] = 12;
						pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
						pais[4] = pais[5] = pais[6] = pais[1] + 1;
						pais[7] = pais[8] = pais[9] = pais[4] + 1;
						if (dan[0] > 2)
						{
							pais[10] = dan[1];
							pais[11] = dan[2];
							pais[12] = dan[3];
							return;
						}
						else if (dan[0])
						{
							if (dui[0])
							{
								pais[10] = dan[1];
								pais[11] = pais[12] = dui[1];
								return;
							}
						}
						else
						{
							one = 10;
							for (int c = 3; one < 13; c++)
							{
								if (pai[c])
								{
									if (pai[c] != 3)
									{
										pai[c]--;
										pais[one++] = c--;
									}
									else
									{
										if (c >= paiss[1] && c <= paiss[7])
											continue;
										else
										{
											pais[10] = pais[11] = pais[12] = c;
											break;
										}
									}
								}
							}
							return;
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 14)
	{
		if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
		{
			if (person[now].card[0] == 14 && kind.liandui[0][0])
			{
				if (kind.liandui[1][1] - kind.liandui[1][0] == 6 && kind.liandui[1][1] > paiss[14])
				{
					pais[0] = 14;
					one = 1;
					for (a = kind.liandui[1][0]; one < 15; a++)
					{
						pais[one] = pais[one + 1] = a;
						one += 2;
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
				int p = rand() % 18;
				if (p > person[(now + 2 - count) % 3].card[0])
				{
					if (count)
						pais[0] = 0;
					else
						pais[0] = -pais[0];
					return;
				}
			}
			for (int b = 1; b <= kind.liandui[0][0]; b++)
			{
				if (kind.liandui[b][1] <= paiss[14] || kind.liandui[b][1] - kind.liandui[b][0] < 6)
					continue;
				int c = kind.liandui[b][1];
				while (c > paiss[14] && c > kind.liandui[b][0] + 5)
					c--;
				c++;
				pais[0] = 14;
				one = 1;
				for (a = c - 6; one < 15; a++)
				{
					pais[one] = pais[one + 1] = a;
					one += 2;
				}
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
					for (int b = paiss[1] + 1; b < 9; b++)
					{
						if (pai[b] > 1)
						{
							int c = b + 1;
							while (c < 15 && pai[c]>1)
								c++;
							c--;
							if (c - b > 5)
							{
								pais[0] = 14;
								one = 1;
								for (a = b; one < 15; a++)
								{
									pais[one] = pais[one + 1] = a;
									one += 2;
								}
								return;
							}
							else
							{
								b = c;
								continue;
							}
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 15)
	{
		if (paiss[11] != paiss[12])
		{
			if (person[now].card[0] == 15 && kind.feiji[0][0])
			{
				if (kind.feiji[1][1] - kind.feiji[1][0] == 2 && kind.feiji[1][1] > paiss[7] && two == 3)
				{
					pais[0] = 15;
					pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
					pais[4] = pais[5] = pais[6] = pais[1] + 1;
					pais[7] = pais[8] = pais[9] = pais[4] + 1;
					one = 10;
					for (a = 3; one < 16; a++)
					{
						if (pai[a] == 2)
						{
							pais[one] = pais[one + 1] = a;
							one += 2;
						}
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			for (int b = 1; b <= kind.feiji[0][0]; b++)
			{
				if (kind.feiji[b][1] <= paiss[7] || kind.feiji[b][1] - kind.feiji[b][0] < 2)
					continue;
				int c = kind.feiji[b][0];
				for (; c <= kind.feiji[b][1]; c++)
					if (pai[c] == 4)
						break;
				if (c <= kind.feiji[b][1])
				{
					if (c - kind.feiji[b][0] < 3 && kind.feiji[b][1] - c < 3)
						break;
					else if (c - kind.feiji[b][0] >= 3)
						kind.feiji[b][1] = c - 1;
					else
						kind.feiji[b][0] = c + 1;
				}
				if (kind.feiji[b][0] == 12)
					if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
						break;
				if (dui[0] > 2)
				{
					if (dui[3] < 14)
					{
						pais[0] = 15;
						pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
						pais[4] = pais[5] = pais[6] = pais[1] + 1;
						pais[7] = pais[8] = pais[9] = pais[4] + 1;
						pais[10] = pais[11] = dui[1];
						pais[12] = pais[13] = dui[2];
						pais[14] = pais[15] = dui[3];
						return;
					}
					else
					{
						if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
							break;
						else
						{
							int p = rand() % 18;
							if (p > person[(now + 2 - count) % 3].card[0])
							{
								pais[0] = 15;
								pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
								pais[4] = pais[5] = pais[6] = pais[1] + 1;
								pais[7] = pais[8] = pais[9] = pais[4] + 1;
								pais[10] = pais[11] = dui[1];
								pais[12] = pais[13] = dui[2];
								pais[14] = pais[15] = dui[3];
								return;
							}
							else
								break;
						}
					}
				}
				else
					break;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
					for (int b = 1; b <= kind.feiji[0][0]; b++)
					{
						if (kind.feiji[b][1] <= paiss[7] || kind.feiji[b][1] - kind.feiji[b][0] < 2)
							continue;
						if (dui[0] > 2)
						{
							pais[0] = 15;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = pais[8] = pais[9] = pais[4] + 1;
							pais[10] = pais[11] = dui[1];
							pais[12] = pais[13] = dui[2];
							pais[14] = pais[15] = dui[3];
							return;
						}
						int dui[11] = { 0 };
						int san[11] = { 0 };
						for (int c = 3; c < 16; c++)
						{
							if (pai[c] == 2)
								dui[++dui[0]] = c;
							else if (pai[c] == 3)
							{
								if (c >= kind.feiji[b][0] && c <= kind.feiji[b][0] + 2)
									continue;
								else
									san[++san[0]] = c;
							}
						}
						if (dui[0] + san[0] < 3)
							break;
						else
						{
							pais[0] = 15;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = pais[8] = pais[9] = pais[4] + 1;
							if (dui[0] > 2)
							{
								pais[10] = pais[11] = dui[1];
								pais[12] = pais[13] = dui[2];
								pais[14] = pais[15] = dui[3];
							}
							else if (dui[0] == 2)
							{
								pais[10] = pais[11] = dui[1];
								pais[12] = pais[13] = dui[2];
								pais[14] = pais[15] = san[1];
							}
							else if (dui[0] == 1)
							{
								pais[10] = pais[11] = dui[1];
								pais[12] = pais[13] = san[1];
								pais[14] = pais[15] = san[2];
							}
							else
							{
								pais[10] = pais[11] = san[1];
								pais[12] = pais[13] = san[2];
								pais[14] = pais[15] = san[3];
							}
							return;
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[11] == paiss[12])
		{
			if (person[now].card[0] == 15 && kind.feiji[0][0])
			{
				if (kind.feiji[1][1] > paiss[15] && kind.feiji[1][1] - kind.feiji[1][0] == 4)
				{
					pais[0] = 15;
					pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
					pais[4] = pais[5] = pais[6] = pais[1] + 1;
					pais[7] = pais[8] = pais[9] = pais[4] + 1;
					pais[10] = pais[11] = pais[12] = pais[7] + 1;
					pais[13] = pais[14] = pais[15] = pais[10] + 1;
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			for (int b = 1; b <= kind.feiji[0][0]; b++)
			{
				if (kind.feiji[b][1] <= paiss[15] || kind.feiji[b][1] - kind.feiji[b][0] < 4)
					continue;
				int c = kind.feiji[b][0];
				for (; c <= kind.feiji[b][1]; c++)
					if (pai[c] == 4)
						break;
				if (c <= kind.feiji[b][1])
				{
					if (c - kind.feiji[b][0] < 5 && kind.feiji[b][1] - c < 5)
						break;
					else if (c - kind.feiji[b][0] >= 5)
						kind.feiji[b][1] = c - 1;
					else
						kind.feiji[b][0] = c + 1;
				}
				pais[0] = 15;
				pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
				pais[4] = pais[5] = pais[6] = pais[1] + 1;
				pais[7] = pais[8] = pais[9] = pais[4] + 1;
				pais[10] = pais[11] = pais[12] = pais[7] + 1;
				pais[13] = pais[14] = pais[15] = pais[10] + 1;
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] == 16)
	{
		if (paiss[2] != paiss[3])
		{
			if (person[now].card[0] == 16 && kind.liandui[0][0])
			{
				if (kind.liandui[1][1] > paiss[16] && kind.liandui[1][1] - kind.liandui[1][0] == 7)
				{
					pais[0] = 16;
					one = 1;
					for (a = kind.liandui[1][0]; one < 17; a++)
					{
						pais[one] = pais[one + 1] = a;
						one += 2;
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			for (int b = 1; b <= kind.liandui[0][0]; b++)
			{
				if (kind.liandui[b][1] <= paiss[16] || kind.liandui[b][1] - kind.liandui[b][0] < 7)
					continue;
				int c = kind.liandui[b][1];
				while (c > paiss[16] && c > kind.liandui[b][0] + 6)
					c--;
				c++;
				pais[0] = 16;
				one = 1;
				for (a = c - 7; one < 17; a++)
				{
					pais[one] = pais[one + 1] = a;
					one += 2;
				}
				return;
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
					for (int b = paiss[1] + 1; b < 8; b++)
					{
						if (pai[b] > 1)
						{
							int c = b + 1;
							while (c < 15 && pai[c] > 1)
								c++;
							c--;
							if (c - b > 6)
							{
								pais[0] = 16;
								one = 1;
								for (a = b; one < 17; a++)
								{
									pais[one] = pais[one + 1] = a;
									one += 2;
								}
								return;
							}
							else
							{
								b = c;
								continue;
							}
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
		if (paiss[1] == paiss[2] && paiss[2] == paiss[3])
		{
			if (person[now].card[0] == 16 && kind.feiji[0][0])
			{
				if (kind.feiji[1][1] > paiss[12] && kind.feiji[1][1] - kind.feiji[1][0] == 3)
				{
					pais[0] = 16;
					pais[1] = pais[2] = pais[3] = kind.feiji[1][0];
					pais[4] = pais[5] = pais[6] = pais[1] + 1;
					pais[7] = pais[8] = pais[9] = pais[4] + 1;
					pais[10] = pais[11] = pais[12] = pais[7] + 1;
					one = 13;
					for (a = 3; one < 17; a++)
					{
						if (pai[a])
						{
							if (pai[a] != 3)
							{
								pai[a]--;
								pais[one++] = a--;
							}
							else
							{
								if (a >= pais[1] && a <= pais[10])
									continue;
								else
								{
									pai[a]--;
									pais[one++] = a--;
								}
							}
						}
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu == 0)
			{
				if (count)
					pais[0] = 0;
				else
					pais[0] = -pais[0];
				return;
			}
			for (int b = 1; b <= kind.feiji[0][0]; b++)
			{
				if (kind.feiji[b][1] <= paiss[10] || kind.feiji[b][1] - kind.feiji[b][0] < 3)
					continue;
				int c = kind.feiji[b][0];
				for (; c <= kind.feiji[b][1]; c++)
					if (pai[c] == 4)
						break;
				if (c <= kind.feiji[b][1])
					break;
				if (dan[0] + 2 * dui[0] < 4)
					break;
				else
				{
					pais[0] = 16;
					pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
					pais[4] = pais[5] = pais[6] = pais[1] + 1;
					pais[7] = pais[8] = pais[9] = pais[4] + 1;
					pais[10] = pais[11] = pais[12] = pais[7] + 1;
					if (dan[0] > 3)
					{
						pais[13] = dan[1];
						pais[14] = dan[2];
						pais[15] = dan[3];
						pais[16] = dan[4];
					}
					else if (dan[0] > 1)
					{
						pais[13] = dan[1];
						pais[14] = dan[2];
						pais[15] = pais[16] = dui[1];
					}
					else
					{
						pais[13] = pais[14] = dui[1];
						pais[15] = pais[16] = dui[2];
					}
					return;
				}
			}
			if (person[(now + 2 - count) % 3].dizhu + person[now].dizhu)
			{
				if (person[(now + 2 - count) % 3].card[0] < 3)
				{
					if (si[0])
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					if (pai[16] && pai[17])
					{
						pais[0] = 2;
						pais[1] = 16;
						pais[2] = 17;
						return;
					}
					for (int b = 1; b <= kind.feiji[0][0]; b++)
					{
						if (kind.feiji[b][1] <= paiss[10] || kind.feiji[b][1] - kind.feiji[b][0] < 3)
							continue;
						if (person[now].card[0] < 16)
							break;
						int dan[21] = { 0 };
						int dui[11] = { 0 };
						for (int c = 3; c < 18; c++)
						{
							if (pai[c] == 1)
								dan[++dan[0]] = c;
							else if (pai[c] == 2)
								dui[++dui[0]] = c;
						}
						if (dan[0] + 2 * dui[0] > 3)
						{
							pais[0] = 16;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = pais[8] = pais[9] = pais[4] + 1;
							pais[10] = pais[11] = pais[12] = pais[7] + 1;
							if (dan[0] > 3)
							{
								pais[13] = dan[1];
								pais[14] = dan[2];
								pais[15] = dan[3];
								pais[16] = dan[4];
							}
							else if (dan[0] > 1)
							{
								pais[13] = dan[1];
								pais[14] = dan[2];
								pais[15] = pais[16] = dui[1];
							}
							else
							{
								pais[13] = pais[14] = dui[1];
								pais[15] = pais[16] = dui[2];
							}
							return;
						}
						else
						{
							pais[0] = 16;
							pais[1] = pais[2] = pais[3] = kind.feiji[b][0];
							pais[4] = pais[5] = pais[6] = pais[1] + 1;
							pais[7] = pais[8] = pais[9] = pais[4] + 1;
							pais[10] = pais[11] = pais[12] = pais[7] + 1;
							one = 13;
							for (int c = 3; one < 17; c++)
							{
								if (pai[c])
								{
									if (c >= pais[1] && c <= pais[10])
										continue;
									else
									{
										pai[c]--;
										pais[one++] = c--;
									}
								}
							}
							return;
						}
					}
				}
			}
			if (count)
				pais[0] = 0;
			else
				pais[0] = -pais[0];
			return;
		}
	}
	if (paiss[0] > 17)
	{
		if (si[0])
		{
			pais[0] = 4;
			pais[1] = pais[2] = pais[3] = pais[4] = si[1];
			return;
		}
		if (pai[16] && pai[17])
		{
			pais[0] = 2;
			pais[1] = 16;
			pais[2] = 17;
			return;
		}
		if (count)
			pais[0] = 0;
		else
			pais[0] = -pais[0];
		return;
	}
	return;
}
void wochupai(persons* person, int* pais)
{
	int pai[21] = { 0 };
	for (int a = 1; a <= person[2].card[0]; a++)
		pai[person[2].card[a]]++;
	char ch[100];
	ch[99] = '\0';
	while (1)
	{
		printf("请输入要打出的牌：");
		scanf_s("%s", ch, 21);
		while (getchar() != '\n')
			continue;
		int paii[21] = { 0 };
		int a = strlen(ch);
		ch[a] = '\0';
		int b = 0;
		for (; b < a; b++)
		{
			if (ch[b] > '2' && ch[b] <= '9')
				paii[ch[b] - '3' + 3]++;
			else if (ch[b] == 'a' || ch[b] == 'A' || ch[b] == '1')
				paii[14]++;
			else if (ch[b] == '2')
				paii[15]++;
			else if (ch[b] == '0')
				paii[10]++;
			else if (ch[b] == 'j' || ch[b] == 'J')
				paii[11]++;
			else if (ch[b] == 'q' || ch[b] == 'Q')
				paii[12]++;
			else if (ch[b] == 'k' || ch[b] == 'K')
				paii[13]++;
			else if (ch[b] == 'x' || ch[b] == 'X')
				paii[16]++;
			else if (ch[b] == 'd' || ch[b] == 'D')
				paii[17]++;
			else
				break;
		}
		if (b < a)
		{
			printf("输入有误！请重新输入！\n");
			continue;
		}
		int sum = 0;
		for (b = 3; b < 18; b++)
			sum += paii[b];
		if (sum <= 0 || sum > 20)
		{
			printf("输入有误！请重新输入！\n");
			continue;
		}
		for (b = 3; b < 18; b++)
			if (pai[b] < paii[b])
				break;
		if (b < 18)
		{
			printf("输入有误！请重新输入！\n");
			continue;
		}
		int dan[21] = { 0 };
		int dui[11] = { 0 };
		int san[11] = { 0 };
		int si[11] = { 0 };
		for (b = 3; b < 18; b++)
		{
			if (paii[b] == 1)
				dan[++dan[0]] = b;
			else if (paii[b] == 2)
				dui[++dui[0]] = b;
			else if (paii[b] == 3)
				san[++san[0]] = b;
			else if (paii[b] == 4)
				si[++si[0]] = b;
		}
		if (dan[0] > 1 && dan[dan[0]] == 17 && dan[dan[0] - 1] == 16)
		{
			dan[0] -= 2;
			dui[++dui[0]] = 16;
		}
		if (sum == 1)
		{
			pais[0] = 1;
			pais[1] = dan[1];
			return;
		}
		else if (sum == 2)
		{
			pais[0] = 2;
			if (dui[0])
			{
				pais[1] = pais[2] = dui[1];
				if (pais[2] == 16)
					pais[2] = 17;
				return;
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 3)
		{
			pais[0] = 3;
			if (san[0])
			{
				pais[1] = pais[2] = pais[3] = san[1];
				return;
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 4)
		{
			pais[0] = 4;
			if (san[0])
			{
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = dan[1];
				return;
			}
			else if (si[0])
			{
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				return;
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 5)
		{
			pais[0] = 5;
			if (dan[0] == 5 && dan[5] < 15)
			{
				int c = 1;
				while (c < 5 && dan[c] + 1 == dan[c + 1])
					c++;
				if (c == 5)
				{
					for (c = 1; c <= 5; c++)
						pais[c] = dan[c];
					return;
				}
			}
			else if (san[0] && dui[0])
			{
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = dui[1];
				if (pais[5] == 16)
					pais[5] = 17;
				return;
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 6)
		{
			pais[0] = 6;
			if (dan[0] == 6 && dan[6] < 15)
			{
				int c = 1;
				while (c < 6 && dan[c] + 1 == dan[c + 1])
					c++;
				if (c == 6)
				{
					for (c = 1; c <= 6; c++)
						pais[c] = dan[c];
					return;
				}
			}
			else if (dui[0] == 3 && dan[3] < 15)
			{
				int c = 1;
				while (c < 3 && dui[c] + 1 == dui[c + 1])
					c++;
				if (c == 3)
				{
					for (c = 1; c <= 3; c++)
						pais[2 * c - 1] = pais[2 * c] = dui[c];
					return;
				}
			}
			else if (si[0])
			{
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				if (dan[0])
				{
					pais[5] = dan[1];
					pais[6] = dan[2];
				}
				else
					pais[5] = pais[6] = dui[1];
				if (pais[5] == pais[6] && pais[6] == 16)
					pais[6] = 17;
				return;
			}
			else if (san[0] == 2 && san[2] < 15 && san[2] == san[1] + 1)
			{
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = pais[6] = san[2];
				return;
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		if (sum == 7)
		{
			pais[0] = 7;
			if (dan[0] == 7 && dan[7] < 15)
			{
				int c = 1;
				while (c < 7 && dan[c] + 1 == dan[c + 1])
					c++;
				if (c == 7)
				{
					for (c = 1; c <= 7; c++)
						pais[c] = dan[c];
					return;
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 8)
		{
			pais[0] = 8;
			if (dan[0] == 8 && dan[8] < 15)
			{
				int c = 1;
				while (c < 8 && dan[c] + 1 == dan[c + 1])
					c++;
				if (c == 8)
				{
					for (c = 1; c <= 8; c++)
						pais[c] = dan[c];
					return;
				}
			}
			else if (dui[0] == 4 && dui[4] < 15)
			{
				int c = 1;
				while (c < 4 && dui[c] + 1 == dui[c + 1])
					c++;
				if (c == 4)
				{
					for (c = 1; c <= 4; c++)
						pais[2 * c - 1] = pais[2 * c] = dui[c];
					return;
				}
			}
			else if (san[0] == 2 && san[2] < 15 && san[2] == san[1] + 1)
			{
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = pais[6] = san[2];
				if (dan[0])
				{
					pais[7] = dan[1];
					pais[8] = dan[2];
				}
				else
					pais[7] = pais[8] = dui[1];
				if (pais[7] == pais[8] && pais[8] == 16)
					pais[8] = 17;
				return;
			}
			else if (si[0] == 1 && dui[0] == 2)
			{
				pais[1] = pais[2] = pais[3] = pais[4] = si[1];
				pais[5] = pais[6] = dui[1];
				pais[7] = pais[8] = dui[2];
				if (pais[8] == 16)
					pais[8] = 17;
				return;
			}
			else if (si[0] == 2 && si[2] < 15 && si[2] - si[1] == 1)
			{
				pais[1] = pais[2] = pais[3] = pais[7] = si[1];
				pais[4] = pais[5] = pais[6] = pais[8] = si[2];
				return;
			}
			else if (si[0] == 1 && san[0])
			{
				if ((si[1] - san[1]) * (si[1] - san[1]) == 1)
				{
					if (si[1] < 15 && san[1] < 15)
					{
						if (si[1] < san[1])
						{
							pais[1] = pais[2] = pais[3] = si[1];
							pais[4] = pais[5] = pais[6] = san[1];
						}
						else
						{
							pais[1] = pais[2] = pais[3] = san[1];
							pais[4] = pais[5] = pais[6] = si[1];
						}
						pais[7] = dan[1];
						pais[8] = si[1];
						return;
					}
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 9)
		{
			pais[0] = 9;
			if (dan[0] == 9 && dan[9] < 15)
			{
				int c = 1;
				while (c < 9 && dan[c] + 1 == dan[c + 1])
					c++;
				if (c == 9)
				{
					for (c = 1; c <= 9; c++)
						pais[c] = dan[c];
					return;
				}
			}
			else if (san[0] == 3 && san[3] < 15 && san[1] + 1 == san[2] && san[2] + 1 == san[3])
			{
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = pais[6] = san[2];
				pais[7] = pais[8] = pais[9] = san[3];
				return;
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		if (sum == 10)
		{
			pais[0] = 10;
			if (dan[0] == 10 && dan[10] < 15)
			{
				int c = 1;
				while (c < 10 && dan[c] + 1 == dan[c + 1])
					c++;
				if (c == 10)
				{
					for (c = 1; c <= 10; c++)
						pais[c] = dan[c];
					return;
				}
			}
			else if (dui[0] == 5 && dui[5] < 15)
			{
				int c = 1;
				while (c < 5 && dui[c] + 1 == dui[c + 1])
					c++;
				if (c == 5)
				{
					for (c = 1; c <= 5; c++)
						pais[2 * c - 1] = pais[2 * c] = dui[c];
					return;
				}
			}
			else if (san[0] == 2 && san[2] < 15 && san[1] + 1 == san[2] && si[0])
			{
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = pais[6] = san[2];
				pais[7] = pais[8] = pais[9] = pais[10] = si[1];
				return;
			}
			else if (san[0] == 2 && dui[0] == 2 && san[2] < 15 && san[1] + 1 == san[2])
			{
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = pais[6] = san[2];
				pais[7] = pais[8] = dui[1];
				pais[9] = pais[10] = dui[2];
				if (pais[10] == 16)
					pais[10] = 17;
				return;
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 11)
		{
			pais[0] = 11;
			if (dan[0] == 11 && dan[11] < 15)
			{
				int c = 1;
				while (c < 11 && dan[c] + 1 == dan[c + 1])
					c++;
				if (c == 11)
				{
					for (c = 1; c <= 11; c++)
						pais[c] = dan[c];
					return;
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 12)
		{
			pais[0] = 12;
			if (dan[0] == 12 && dan[12] < 15)
			{
				int c = 1;
				while (c < 12 && dan[c] + 1 == dan[c + 1])
					c++;
				if (c == 12)
				{
					for (c = 1; c <= 12; c++)
						pais[c] = dan[c];
					return;
				}
			}
			else if (dui[0] == 6 && dui[6] < 15)
			{
				int c = 1;
				while (c < 6 && dui[c] + 1 == dui[c + 1])
					c++;
				if (c == 6)
				{
					for (c = 1; c <= 6; c++)
						pais[2 * c - 1] = pais[2 * c] = dui[c];
					return;
				}
			}
			else if (san[0] == 3 && san[3] < 15 && san[1] + 1 == san[2] && san[2] + 1 == san[3])
			{
				pais[1] = pais[2] = pais[3] = san[1];
				pais[4] = pais[5] = pais[6] = san[2];
				pais[7] = pais[8] = pais[9] = san[3];
				if (dan[0] == 1)
				{
					pais[10] = dan[1];
					pais[11] = pais[12] = dui[1];
					if (pais[12] == 16)
						pais[12] = 17;
				}
				else
				{
					pais[10] = dan[1];
					pais[11] = dan[2];
					pais[12] = dan[3];
				}
				return;
			}
			else if (san[0] == 2 && si[0] == 1)
			{
				int a = san[1], b = san[2], c = si[1];
				if (c < b)
				{
					int tmp = b;
					b = c;
					c = tmp;
				}
				if (b < a)
				{
					int tmp = a;
					a = b;
					b = tmp;
				}
				if (c < 15 && a + 1 == b && b + 1 == c)
				{
					pais[1] = pais[2] = pais[3] = a;
					pais[4] = pais[5] = pais[6] = b;
					pais[7] = pais[8] = pais[9] = c;
					if (dan[0])
					{
						pais[10] = dan[1];
						pais[11] = dan[2];
						pais[12] = si[1];
					}
					else
					{
						pais[10] = pais[12] = dui[1];
						pais[11] = si[1];
						if (pais[12] == 16)
							pais[12] = 17;
					}
					return;
				}
			}
			else if (san[0] == 1 && si[0] == 2)
			{
				int a = san[1], b = si[1], c = si[2];
				if (a > b)
				{
					int tmp = b;
					b = a;
					a = tmp;
				}
				if (b > c)
				{
					int tmp = c;
					c = b;
					b = tmp;
				}
				if (c < 15 && a + 1 == b && b + 1 == c)
				{
					pais[1] = pais[2] = pais[3] = a;
					pais[4] = pais[5] = pais[6] = b;
					pais[7] = pais[8] = pais[9] = c;
					pais[10] = dan[1];
					pais[11] = si[1];
					pais[12] = si[2];
					return;
				}
			}
			if (si[0] == 3)
			{
				if (si[3] < 15 && si[1] + 1 == si[2] && si[2] + 1 == si[3])
				{
					pais[1] = pais[2] = pais[3] = pais[10] = si[1];
					pais[4] = pais[5] = pais[6] = pais[11] = si[2];
					pais[7] = pais[8] = pais[9] = pais[12] = si[3];
					return;
				}
			}
			else if (san[0] == 4)
			{
				if (san[4] < 15 && san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = pais[6] = san[2];
					pais[7] = pais[8] = pais[9] = san[3];
					pais[10] = pais[11] = pais[12] = san[4];
					return;
				}
				else if (san[3] < 15 && san[1] + 1 == san[2] && san[2] + 1 == san[3])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = pais[6] = san[2];
					pais[7] = pais[8] = pais[9] = san[3];
					pais[10] = pais[11] = pais[12] = san[4];
					return;
				}
				else if (san[4] < 15 && san[2] + 1 == san[3] && san[3] + 1 == san[4])
				{
					pais[1] = pais[2] = pais[3] = san[2];
					pais[4] = pais[5] = pais[6] = san[3];
					pais[7] = pais[8] = pais[9] = san[4];
					pais[10] = pais[11] = pais[12] = san[1];
					return;
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		if (sum == 13)
		{
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 14)
		{
			pais[0] = 14;
			if (dui[0] == 7 && dui[7] < 15)
			{
				int c = 1;
				while (c < 7 && dui[c] + 1 == dui[c + 1])
					c++;
				if (c == 7)
				{
					for (c = 1; c <= 7; c++)
						pais[2 * c - 1] = pais[2 * c] = dui[c];
					return;
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 15)
		{
			pais[0] = 15;
			if (san[0] == 3 && dui[0] == 3)
			{
				if (san[3] < 15 && san[1] + 1 == san[2] && san[2] + 1 == san[3])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = pais[6] = san[2];
					pais[7] = pais[8] = pais[9] = san[3];
					pais[10] = pais[11] = dui[1];
					pais[12] = pais[13] = dui[2];
					pais[14] = pais[15] = dui[3];
					if (pais[15] == 16)
						pais[15] = 17;
					return;
				}
			}
			else if (san[0] == 3 && dui[0] == 1 && si[0] == 1)
			{
				if (san[3] < 15 && san[1] + 1 == san[2] && san[2] + 1 == san[3])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = pais[6] = san[2];
					pais[7] = pais[8] = pais[9] = san[3];
					pais[10] = pais[11] = pais[12] = pais[13] = si[1];
					pais[14] = pais[15] = dui[1];
					if (pais[15] == 16)
						pais[15] = 17;
					return;
				}
			}
			else if (san[0] == 5 && san[5] < 15)
			{
				if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] + 1 == san[5])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = pais[6] = san[2];
					pais[7] = pais[8] = pais[9] = san[3];
					pais[10] = pais[11] = pais[12] = san[4];
					pais[13] = pais[14] = pais[15] = san[5];
					return;
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 16)
		{
			pais[0] = 16;
			if (dui[0] == 8 && dui[8] < 15)
			{
				int c = 1;
				while (c < 8 && dui[c] + 1 == dui[c + 1])
					c++;
				if (c == 8)
				{
					for (c = 1; c <= 8; c++)
						pais[2 * c - 1] = pais[2 * c] = dui[c];
					return;
				}
			}
			else if (san[0] == 5)
			{
				if (san[5] < 15 && san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] + 1 == san[5])
				{
					pais[1] = pais[2] = pais[3] = san[2];
					pais[4] = pais[5] = pais[6] = san[3];
					pais[7] = pais[8] = pais[9] = san[4];
					pais[10] = pais[11] = pais[12] = san[5];
					pais[13] = dan[1];
					pais[14] = pais[15] = pais[16] = san[1];
					return;
				}
				else if (san[4] < 15 && san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = pais[6] = san[2];
					pais[7] = pais[8] = pais[9] = san[3];
					pais[10] = pais[11] = pais[12] = san[4];
					pais[13] = dan[1];
					pais[14] = pais[15] = pais[16] = san[5];
					return;
				}
			}
			else if (san[0] == 4 && san[4] < 15 && si[0] == 0)
			{
				if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = pais[6] = san[2];
					pais[7] = pais[8] = pais[9] = san[3];
					pais[10] = pais[11] = pais[12] = san[4];
					if (dan[0] == 4)
					{
						pais[13] = dan[1];
						pais[14] = dan[2];
						pais[15] = dan[3];
						pais[16] = dan[4];
					}
					else if (dan[0] == 2)
					{
						pais[13] = dan[1];
						pais[14] = dan[2];
						pais[15] = pais[16] = dui[1];
						if (pais[16] == 16)
							pais[16] = 17;
					}
					else
					{
						pais[13] = pais[14] = dui[1];
						pais[15] = pais[16] = dui[2];
						if (pais[16] == 16)
							pais[16] = 17;
					}
					return;
				}
			}
			else if (san[0] == 4 && si[0])
			{
				int a = san[1], b = san[2], c = san[3], d = san[4], e = si[1];
				if (e < d)
				{
					int tmp = d;
					d = e;
					e = tmp;
				}
				if (d < c)
				{
					int tmp = c;
					c = d;
					d = tmp;
				}
				if (c < b)
				{
					int tmp = b;
					b = c;
					c = tmp;
				}
				if (b < a)
				{
					int tmp = a;
					a = b;
					b = tmp;
				}
				if (e < 15 && b + 1 == c && c + 1 == d && d + 1 == e)
				{
					pais[1] = pais[2] = pais[3] = b;
					pais[4] = pais[5] = pais[6] = c;
					pais[7] = pais[8] = pais[9] = d;
					pais[10] = pais[11] = pais[12] = e;
					pais[13] = pais[14] = pais[15] = a;
					pais[16] = si[1];
					return;
				}
				else if (d < 15 && a + 1 == b && b + 1 == c && c + 1 == d)
				{
					pais[1] = pais[2] = pais[3] = a;
					pais[4] = pais[5] = pais[6] = b;
					pais[7] = pais[8] = pais[9] = c;
					pais[10] = pais[11] = pais[12] = d;
					pais[13] = pais[14] = pais[15] = e;
					pais[16] = si[1];
					return;
				}
			}
			if (san[0] == 3 && si[0])
			{
				int a = san[1], b = san[2], c = san[3], d = si[1];
				if (d < c)
				{
					int tmp = c;
					c = d;
					d = tmp;
				}
				if (c < b)
				{
					int tmp = b;
					b = c;
					c = tmp;
				}
				if (b < a)
				{
					int tmp = a;
					a = b;
					b = tmp;
				}
				if (d < 15 && a + 1 == b && b + 1 == c && c + 1 == d)
				{
					pais[1] = pais[2] = pais[3] = a;
					pais[4] = pais[5] = pais[6] = b;
					pais[7] = pais[8] = pais[9] = c;
					pais[10] = pais[11] = pais[12] = d;
					if (dan[0] == 3)
					{
						pais[13] = dan[1];
						pais[14] = dan[2];
						pais[15] = dan[3];
						pais[16] = si[1];
					}
					else
					{
						pais[13] = dan[1];
						pais[14] = si[1];
						pais[15] = pais[16] = dui[1];
						if (pais[16] == 16)
							pais[16] = 17;
					}
					return;
				}
			}
			else if (san[0] == 2 && si[0] == 2)
			{
				int a = san[1], b = san[2], c = si[1], d = si[2];
				if (c < b)
				{
					int tmp = b;
					b = c;
					c = tmp;
				}
				if (b < a)
				{
					int tmp = a;
					a = b;
					b = tmp;
				}
				if (d < c)
				{
					int tmp = c;
					c = d;
					d = tmp;
				}
				if (c < b)
				{
					int tmp = b;
					b = c;
					c = tmp;
				}
				if (d < 15 && a + 1 == b && b + 1 == c && c + 1 == d)
				{
					pais[1] = pais[2] = pais[3] = a;
					pais[4] = pais[5] = pais[6] = b;
					pais[7] = pais[8] = pais[9] = c;
					pais[10] = pais[11] = pais[12] = d;
					if (dan[0])
					{
						pais[13] = dan[1];
						pais[14] = dan[2];
						pais[15] = si[1];
						pais[16] = si[2];
					}
					else
					{
						pais[13] = si[1];
						pais[14] = si[2];
						pais[15] = pais[16] = dui[1];
						if (pais[16] == 16)
							pais[16] = 17;
					}
					return;
				}
			}
			else if (san[0] == 1 && si[0] == 3)
			{
				int a = san[1], b = si[1], c = si[2], d = si[3];
				if (a > b)
				{
					int tmp = b;
					b = a;
					a = tmp;
				}
				if (b > c)
				{
					int tmp = c;
					c = b;
					b = tmp;
				}
				if (c > d)
				{
					int tmp = d;
					d = c;
					c = tmp;
				}
				if (d < 15 && a + 1 == b && b + 1 == c && c + 1 == d)
				{
					pais[1] = pais[2] = pais[3] = a;
					pais[4] = pais[5] = pais[6] = b;
					pais[7] = pais[8] = pais[9] = c;
					pais[10] = pais[11] = pais[12] = d;
					pais[13] = dan[1];
					pais[14] = si[1];
					pais[15] = si[2];
					pais[16] = si[3];
					return;
				}
			}
			if (si[0] == 4 && si[4] < 15)
			{
				if (si[1] + 1 == si[2] && si[2] + 1 == si[3] && si[3] + 1 == si[4])
				{
					pais[1] = pais[2] = pais[3] = pais[13] = si[1];
					pais[4] = pais[5] = pais[6] = pais[14] = si[2];
					pais[7] = pais[8] = pais[9] = pais[15] = si[3];
					pais[10] = pais[11] = pais[12] = pais[16] = si[4];
					return;
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		if (sum == 17)
		{
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		if (sum == 18)
		{
			pais[0] = 18;
			if (dui[0] == 9 && dui[9] < 15)
			{
				int c = 1;
				while (c < 9 && dui[c] + 1 == dui[c + 1])
					c++;
				if (c == 9)
				{
					for (c = 1; c <= 9; c++)
						pais[2 * c - 1] = pais[2 * c] = dui[c];
					return;
				}
			}
			else if (san[0] == 6 && san[6] < 15)
			{
				if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] + 1 == san[5] && san[5] + 1 == san[6])
				{
					pais[1] = pais[2] = pais[3] = san[1];
					pais[4] = pais[5] = pais[6] = san[2];
					pais[7] = pais[8] = pais[9] = san[3];
					pais[10] = pais[11] = pais[12] = san[4];
					pais[13] = pais[14] = pais[15] = san[5];
					pais[16] = pais[17] = pais[18] = san[6];
					return;
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 19)
		{
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		else if (sum == 20)
		{
			pais[0] = 20;
			if (dui[0] == 10 && dui[10] < 15)
			{
				int c = 1;
				while (c < 10 && dui[c] + 1 == dui[c + 1])
					c++;
				if (c == 10)
				{
					for (c = 1; c <= 10; c++)
						pais[2 * c - 1] = pais[2 * c] = dui[c];
					return;
				}
			}
			if (si[0] == 5 && si[0] < 15)
			{
				if (si[1] + 1 == si[2] && si[2] + 1 == si[3] && si[3] + 1 == si[4] && si[4] + 1 == si[5])
				{
					pais[1] = pais[2] = pais[3] = pais[16] = si[1];
					pais[4] = pais[5] = pais[6] = pais[17] = si[2];
					pais[7] = pais[8] = pais[9] = pais[18] = si[3];
					pais[10] = pais[11] = pais[12] = pais[19] = si[4];
					pais[13] = pais[14] = pais[15] = pais[20] = si[5];
					return;
				}
			}
			else if (si[0] == 4 && san[0])
			{
				int a = si[1], b = si[2], c = si[3], d = si[4], e = san[1];
				if (e < d)
				{
					int tmp = d;
					d = e;
					e = tmp;
				}
				if (d < c)
				{
					int tmp = c;
					c = d;
					d = tmp;
				}
				if (c < b)
				{
					int tmp = b;
					b = c;
					c = tmp;
				}
				if (b < a)
				{
					int tmp = a;
					a = b;
					b = tmp;
				}
				if (e < 15 && a + 1 == b && b + 1 == c && c + 1 == d && d + 1 == e)
				{
					pais[1] = pais[2] = pais[3] = a;
					pais[4] = pais[5] = pais[6] = b;
					pais[7] = pais[8] = pais[9] = c;
					pais[10] = pais[11] = pais[12] = d;
					pais[13] = pais[14] = pais[15] = e;
					pais[16] = si[1];
					pais[17] = si[2];
					pais[18] = si[3];
					pais[19] = si[4];
					pais[20] = dan[1];
					return;
				}
			}
			else if (si[0] == 3 && san[0] == 2)
			{
				int a[6];
				for (int b = 1; b <= 3; b++)
					a[b] = si[b];
				a[4] = san[1];
				a[5] = san[2];
				for (int b = 1; b < 5; b++)
				{
					for (int c = b + 1; c <= 5; c++)
					{
						if (a[c] < a[b])
						{
							int tmp = a[b];
							a[b] = a[c];
							a[c] = tmp;
						}
					}
				}
				if (a[5] < 15 && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5])
				{
					pais[1] = pais[2] = pais[3] = a[1];
					pais[4] = pais[5] = pais[6] = a[2];
					pais[7] = pais[8] = pais[9] = a[3];
					pais[10] = pais[11] = pais[12] = a[4];
					pais[13] = pais[14] = pais[15] = a[5];
					pais[16] = si[1];
					pais[17] = si[2];
					pais[18] = si[3];
					if (dan[0])
					{
						pais[19] = dan[1];
						pais[20] = dan[2];
					}
					else
					{
						pais[19] = pais[20] = dui[1];
						if (pais[20] == 16)
							pais[20] = 17;
					}
					return;
				}
			}
			else if (si[0] == 2)
			{
				if (san[0] == 3)
				{
					int a[6];
					a[1] = si[1];
					a[2] = si[2];
					a[3] = san[1];
					a[4] = san[2];
					a[5] = san[3];
					for (int b = 1; b < 5; b++)
					{
						for (int c = b + 1; c <= 5; c++)
						{
							if (a[c] < a[b])
							{
								int tmp = a[b];
								a[b] = a[c];
								a[c] = tmp;
							}
						}
					}
					if (a[5] < 15 && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5])
					{
						pais[1] = pais[2] = pais[3] = a[1];
						pais[4] = pais[5] = pais[6] = a[2];
						pais[7] = pais[8] = pais[9] = a[3];
						pais[10] = pais[11] = pais[12] = a[4];
						pais[13] = pais[14] = pais[15] = a[5];
						pais[16] = si[1];
						pais[17] = si[2];
						if (dan[0] == 3)
						{
							pais[18] = dan[1];
							pais[19] = dan[2];
							pais[20] = dan[3];
						}
						else
						{
							pais[18] = dan[1];
							pais[19] = pais[20] = dui[1];
							if (pais[20] == 16)
								pais[20] = 17;
						}
						return;
					}
				}
				else if (san[0] == 4)
				{
					int a[7];
					a[1] = si[1];
					a[2] = si[2];
					a[3] = san[1];
					a[4] = san[2];
					a[5] = san[3];
					a[6] = san[4];
					for (int b = 1; b < 6; b++)
					{
						for (int c = b + 1; c <= 6; c++)
						{
							if (a[c] < a[b])
							{
								int tmp = a[b];
								a[b] = a[c];
								a[c] = tmp;
							}
						}
					}
					if (a[5] < 15 && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5])
					{
						pais[1] = pais[2] = pais[3] = a[1];
						pais[4] = pais[5] = pais[6] = a[2];
						pais[7] = pais[8] = pais[9] = a[3];
						pais[10] = pais[11] = pais[12] = a[4];
						pais[13] = pais[14] = pais[15] = a[5];
						pais[16] = si[1];
						pais[17] = si[2];
						pais[18] = pais[19] = pais[20] = a[6];
						return;
					}
					else if (a[6] < 15 && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5] && a[5] + 1 == a[6])
					{
						pais[1] = pais[2] = pais[3] = a[2];
						pais[4] = pais[5] = pais[6] = a[3];
						pais[7] = pais[8] = pais[9] = a[4];
						pais[10] = pais[11] = pais[12] = a[5];
						pais[13] = pais[14] = pais[15] = a[6];
						pais[16] = si[1];
						pais[17] = si[2];
						pais[18] = pais[19] = pais[20] = a[1];
						return;
					}
				}
			}
			if (si[0] == 1)
			{
				if (san[0] == 4)
				{
					int a[6];
					a[1] = si[1];
					a[2] = san[1];
					a[3] = san[2];
					a[4] = san[3];
					a[5] = san[4];
					for (int b = 1; b < 5; b++)
					{
						for (int c = b + 1; c <= 5; c++)
						{
							if (a[c] < a[b])
							{
								int tmp = a[b];
								a[b] = a[c];
								a[c] = tmp;
							}
						}
					}
					if (a[5] < 15 && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5])
					{
						pais[1] = pais[2] = pais[3] = a[1];
						pais[4] = pais[5] = pais[6] = a[2];
						pais[7] = pais[8] = pais[9] = a[3];
						pais[10] = pais[11] = pais[12] = a[4];
						pais[13] = pais[14] = pais[15] = a[5];
						pais[16] = si[1];
						if (dan[0] == 4)
						{
							pais[17] = dan[1];
							pais[18] = dan[2];
							pais[19] = dan[3];
							pais[20] = dan[4];
						}
						else if (dan[0] == 2)
						{
							pais[17] = dan[1];
							pais[18] = dan[2];
							pais[19] = pais[20] = dui[1];
							if (pais[20] == 16)
								pais[20] = 17;
						}
						else
						{
							pais[17] = pais[18] = dui[1];
							pais[19] = pais[20] = dui[2];
							if (pais[20] == 16)
								pais[20] = 17;
						}
						return;
					}
				}
				else if (san[0] == 5)
				{
					int a[7];
					a[1] = si[1];
					a[2] = san[1];
					a[3] = san[2];
					a[4] = san[3];
					a[5] = san[4];
					a[6] = san[5];
					for (int b = 1; b < 6; b++)
					{
						for (int c = b + 1; c <= 6; c++)
						{
							if (a[c] < a[b])
							{
								int tmp = a[b];
								a[b] = a[c];
								a[c] = tmp;
							}
						}
					}
					if (a[5] < 15 && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5])
					{
						pais[1] = pais[2] = pais[3] = a[1];
						pais[4] = pais[5] = pais[6] = a[2];
						pais[7] = pais[8] = pais[9] = a[3];
						pais[10] = pais[11] = pais[12] = a[4];
						pais[13] = pais[14] = pais[15] = a[5];
						pais[16] = si[1];
						pais[17] = pais[18] = pais[19] = a[6];
						pais[20] = dan[1];
						return;
					}
					else if (a[6] < 15 && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5] && a[5] + 1 == a[6])
					{
						pais[1] = pais[2] = pais[3] = a[2];
						pais[4] = pais[5] = pais[6] = a[3];
						pais[7] = pais[8] = pais[9] = a[4];
						pais[10] = pais[11] = pais[12] = a[5];
						pais[13] = pais[14] = pais[15] = a[6];
						pais[16] = si[1];
						pais[17] = pais[18] = pais[19] = a[1];
						pais[20] = dan[1];
						return;
					}
				}
			}
			if (si[0] == 0)
			{
				if (san[0] == 5)
				{
					if (san[5] < 15 && san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] + 1 == san[5])
					{
						pais[1] = pais[2] = pais[3] = san[1];
						pais[4] = pais[5] = pais[6] = san[2];
						pais[7] = pais[8] = pais[9] = san[3];
						pais[10] = pais[11] = pais[12] = san[4];
						pais[13] = pais[14] = pais[15] = san[5];
						if (dan[0] == 5)
						{
							pais[16] = dan[1];
							pais[17] = dan[2];
							pais[18] = dan[3];
							pais[19] = dan[4];
							pais[20] = dan[5];
						}
						else if (dan[0] == 3)
						{
							pais[16] = dan[1];
							pais[17] = dan[2];
							pais[18] = dan[3];
							pais[19] = pais[20] = dui[1];
							if (pais[20] == 16)
								pais[20] = 17;
						}
						else
						{
							pais[16] = dan[1];
							pais[17] = pais[18] = dui[1];
							pais[19] = pais[20] = dui[2];
							if (pais[20] == 16)
								pais[20] = 17;
						}
						return;
					}
				}
				else if (san[0] == 6)
				{
					int a[7];
					a[1] = san[1];
					a[2] = san[2];
					a[3] = san[3];
					a[4] = san[4];
					a[5] = san[5];
					a[6] = san[6];
					for (int b = 1; b < 6; b++)
					{
						for (int c = b + 1; c <= 6; c++)
						{
							if (a[c] < a[b])
							{
								int tmp = a[b];
								a[b] = a[c];
								a[c] = tmp;
							}
						}
					}
					if (a[5] < 15 && a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5])
					{
						pais[1] = pais[2] = pais[3] = a[1];
						pais[4] = pais[5] = pais[6] = a[2];
						pais[7] = pais[8] = pais[9] = a[3];
						pais[10] = pais[11] = pais[12] = a[4];
						pais[13] = pais[14] = pais[15] = a[5];
						pais[16] = pais[17] = pais[18] = a[6];
						if (dan[0])
						{
							pais[19] = dan[1];
							pais[20] = dan[2];
						}
						else
						{
							pais[19] = pais[20] = dui[1];
							if (pais[20] == 16)
								pais[20] = 17;
						}
						return;
					}
					else if (a[6] < 15 && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5] && a[5] + 1 == a[6])
					{
						pais[1] = pais[2] = pais[3] = a[2];
						pais[4] = pais[5] = pais[6] = a[3];
						pais[7] = pais[8] = pais[9] = a[4];
						pais[10] = pais[11] = pais[12] = a[5];
						pais[13] = pais[14] = pais[15] = a[6];
						pais[16] = pais[17] = pais[18] = a[1];
						if (dan[0])
						{
							pais[19] = dan[1];
							pais[20] = dan[2];
						}
						else
						{
							pais[19] = pais[20] = dui[1];
							if (pais[20] == 16)
								pais[20] = 17;
						}
						return;
					}
				}
			}
			printf("不合规矩！请重新出牌！\n");
			continue;
		}
		printf("不合规矩！请重新出牌！\n");
		continue;
	}
	return;
}
void wodapai(persons* person, int* pais)
{
	int count = 0;
	int paiss[21] = { 0 };
	if (pais[0] < 0)
	{
		count = 1;
		pais[0] = -pais[0];
	}
	int pai[21] = { 0 };
	for (int a = 1; a <= person[2].card[0]; a++)
		pai[person[2].card[a]]++;
	char ch[100];
	ch[99] = '\0';
	for (int a = 0; a < 21; a++)
		paiss[a] = pais[a];
	while (1)
	{
		printf("1.不出   2.出牌\n");
		printf("请选择一项：");
		int choice;
		scanf_s("%d", &choice);
		while (getchar() != '\n')
			continue;
		if (choice == 1)
			break;
		else if (choice == 2)
		{
			printf("请输入要打出的牌：");
			scanf_s("%s", ch, 21);
			while (getchar() != '\n')
				continue;
			int paii[21] = { 0 };
			int a = strlen(ch);
			ch[a] = '\0';
			int b = 0;
			for (; b < a; b++)
			{
				if (ch[b] > '2' && ch[b] <= '9')
					paii[ch[b] - '3' + 3]++;
				else if (ch[b] == 'a' || ch[b] == 'A' || ch[b] == '1')
					paii[14]++;
				else if (ch[b] == '2')
					paii[15]++;
				else if (ch[b] == '0')
					paii[10]++;
				else if (ch[b] == 'j' || ch[b] == 'J')
					paii[11]++;
				else if (ch[b] == 'q' || ch[b] == 'Q')
					paii[12]++;
				else if (ch[b] == 'k' || ch[b] == 'K')
					paii[13]++;
				else if (ch[b] == 'x' || ch[b] == 'X')
					paii[16]++;
				else if (ch[b] == 'd' || ch[b] == 'D')
					paii[17]++;
				else
					break;
			}
			if (b < a)
			{
				printf("输入有误！\n");
				continue;
			}
			int sum = 0;
			for (b = 3; b < 18; b++)
				sum += paii[b];
			if (sum <= 0 || sum > 20)
			{
				printf("输入有误！\n");
				continue;
			}
			for (b = 3; b < 18; b++)
				if (pai[b] < paii[b])
					break;
			if (b < 18)
			{
				printf("输入有误！\n");
				continue;
			}
			int dan[21] = { 0 };
			int dui[11] = { 0 };
			int san[11] = { 0 };
			int si[11] = { 0 };
			for (b = 3; b < 18; b++)
			{
				if (paii[b] == 1)
					dan[++dan[0]] = b;
				else if (paii[b] == 2)
					dui[++dui[0]] = b;
				else if (paii[b] == 3)
					san[++san[0]] = b;
				else if (paii[b] == 4)
					si[++si[0]] = b;
			}
			if (dan[0] > 1 && dan[dan[0]] == 17 && dan[dan[0] - 1] == 16)
			{
				dan[0] -= 2;
				dui[++dui[0]] = 16;
			}
			if (sum == 1)
			{
				if (paiss[0] > 1 || dan[1] <= paiss[1])
				{
					printf("不按规矩出牌！\n");
					continue;
				}
				pais[0] = 1;
				pais[1] = dan[1];
				return;
			}
			else if (sum == 2)
			{
				if (dui[0] && dui[1] == 16)
				{
					pais[0] = 2;
					pais[1] = 16;
					pais[2] = 17;
					return;
				}
				if (dui[0] && paiss[0] == 2 && dui[1] > paiss[2])
				{
					pais[0] = 2;
					pais[1] = pais[2] = dui[1];
					return;
				}
				else
				{
					printf("不按规矩出牌！\n");
					continue;
				}
			}
			else if (sum == 3)
			{
				if (san[0] && paiss[0] == 3 && san[1] > paiss[3])
				{
					pais[0] = 3;
					pais[1] = pais[2] = pais[3] = san[1];
					return;
				}
				else
				{
					printf("不按规矩出牌！\n");
					continue;
				}
			}
			else if (sum == 4)
			{
				if (si[0])
				{
					if (paiss[0] != 2 && paiss[0] != 4)
					{
						pais[0] = 4;
						pais[1] = pais[2] = pais[3] = pais[4] = si[1];
						return;
					}
					else if (paiss[0] == 2)
					{
						if (paiss[1] != 16)
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							return;
						}
					}
					else if (paiss[0] == 4)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] == paiss[4])
						{
							if (si[1] > paiss[1])
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = pais[4] = si[1];
								return;
							}
						}
						else
						{
							pais[0] = 4;
							pais[1] = pais[2] = pais[3] = pais[4] = si[1];
							return;
						}
					}
				}
				else if (san[0])
				{
					if (paiss[0] == 4)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] != paiss[4])
						{
							if (san[1] > paiss[1])
							{
								pais[0] = 4;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = dan[1];
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			if (sum == 5)
			{
				if (paiss[0] == 5)
				{
					if (san[0] && dui[0])
					{
						if (paiss[1] == paiss[2])
						{
							if (san[1] > paiss[1])
							{
								pais[0] = 5;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = dui[1];
								if (pais[5] == 16)
									pais[5] = 17;
								return;
							}
						}
					}
					else if (dan[0] == 5 && dan[5] < 15)
					{
						if (paiss[1] != paiss[2])
						{
							int c = 1;
							while (c < 5 && dan[c] + 1 == dan[c + 1])
								c++;
							if (c == 5 && dan[5] > paiss[5])
							{
								pais[0] = 5;
								for (c = 1; c <= 5; c++)
									pais[c] = dan[c];
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			else if (sum == 6)
			{
				if (paiss[0] == 6)
				{
					if (dan[0] == 6 && dan[6] < 15)
					{
						if (paiss[1] != paiss[2])
						{
							int c = 1;
							while (c < 6 && dan[c] + 1 == dan[c + 1])
								c++;
							if (c == 6 && dan[6] > paiss[6])
							{
								pais[0] = 6;
								for (c = 1; c <= 6; c++)
									pais[c] = dan[c];
								return;
							}
						}
					}
					else if (dui[0] == 3 && dui[3] < 15 && dui[3] > paiss[6])
					{
						if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
						{
							int c = 1;
							while (c < 3 && dui[c] + 1 == dui[c + 1])
								c++;
							if (c == 3)
							{
								pais[0] = 6;
								for (c = 1; c <= 3; c++)
									pais[2 * c - 1] = pais[2 * c] = dui[c];
								return;
							}
						}
					}
					else if (san[0] == 2 && san[2] < 15 && san[2] > paiss[6])
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] != paiss[4])
						{
							if (san[2] == san[1] + 1)
							{
								pais[0] = 6;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								return;
							}
						}
					}
					else if (si[0])
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] == paiss[4])
						{
							if (si[1] > paiss[4])
							{
								pais[0] = 6;
								pais[1] = pais[2] = pais[3] = pais[4] = si[1];
								if (dan[0])
								{
									pais[5] = dan[1];
									pais[6] = dan[2];
								}
								else
								{
									pais[5] = pais[6] = dui[1];
									if (pais[6] == 16)
										pais[6] = 17;
								}
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			if (sum == 7)
			{
				if (paiss[0] == 7)
				{
					if (dan[0] == 7 && dan[7] < 15)
					{
						int c = 1;
						while (c < 7 && dan[c] + 1 == dan[c + 1])
							c++;
						if (c == 7 && dan[7] > paiss[7])
						{
							pais[0] = 7;
							for (c = 1; c <= 7; c++)
								pais[c] = dan[c];
							return;
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			else if (sum == 8)
			{
				if (paiss[0] == 8)
				{
					if (dan[0] == 8 && dan[8] < 15)
					{
						if (paiss[1] != paiss[2])
						{
							int c = 1;
							while (c < 8 && dan[c] + 1 == dan[c + 1])
								c++;
							if (c == 8 && dan[8] > paiss[8])
							{
								pais[0] = 8;
								for (c = 1; c <= 8; c++)
									pais[c] = dan[c];
								return;
							}
						}
					}
					else if (dui[0] == 4 && dui[4] < 15)
					{
						if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
						{
							int c = 1;
							while (c < 4 && dui[c] + 1 == dui[c + 1])
								c++;
							if (c == 4 && dui[c] > paiss[8])
							{
								pais[0] = 8;
								for (c = 1; c <= 4; c++)
									pais[2 * c - 1] = pais[2 * c] = dui[c];
								return;
							}
						}
					}
					else if (san[0] == 2 && san[2] < 15)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] != paiss[4])
						{
							if (san[1] + 1 == san[2] && san[2] > paiss[6])
							{
								pais[0] = 8;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								if (dan[0])
								{
									pais[7] = dan[1];
									pais[8] = dan[2];
								}
								else
								{
									pais[7] = pais[8] = dui[1];
									if (pais[8] == 16)
										pais[8] = 17;
								}
								return;
							}
						}
					}
					else if (san[0] == 1 && si[0] == 1)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] != paiss[4])
						{
							int a = san[1], b = si[1];
							if (a > b)
							{
								int tmp = b;
								b = a;
								a = tmp;
							}
							if (b < 15 && b == a + 1 && b > paiss[6])
							{
								pais[0] = 8;
								pais[1] = pais[2] = pais[3] = a;
								pais[4] = pais[5] = pais[6] = b;
								pais[7] = dan[1];
								pais[8] = si[1];
								return;
							}
						}
					}
					else if (si[0] == 2 && si[2] < 15)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] != paiss[4])
						{
							if (si[1] + 1 == si[2] && si[2] > paiss[6])
							{
								pais[0] = 8;
								pais[1] = pais[2] = pais[3] = pais[7] = si[1];
								pais[4] = pais[5] = pais[6] = pais[8] = si[2];
								return;
							}
						}
					}
					if (si[0] == 2)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] == paiss[4])
						{
							if (si[2] > paiss[1])
							{
								pais[0] = 8;
								pais[1] = pais[2] = pais[3] = pais[4] = si[2];
								pais[5] = pais[6] = pais[7] = pais[8] = si[1];
								return;
							}
						}
					}
					else if (si[0] == 1 && dui[0] == 2)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3] && paiss[3] == paiss[4])
						{
							if (si[1] > paiss[1])
							{
								pais[0] = 8;
								pais[1] = pais[2] = pais[3] = pais[4] = si[1];
								pais[5] = pais[6] = dui[1];
								pais[7] = pais[8] = dui[2];
								if (pais[8] == 16)
									pais[8] = 17;
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			if (sum == 9)
			{
				if (paiss[0] == 9)
				{
					if (dan[0] == 9 && dan[9] < 15)
					{
						if (paiss[1] != paiss[2])
						{
							int c = 1;
							while (c < 9 && dan[c] + 1 == dan[c + 1])
								c++;
							if (c == 9 && dan[9] > paiss[9])
							{
								pais[0] = 9;
								for (c = 1; c <= 9; c++)
									pais[c] = dan[c];
								return;
							}
						}
					}
					else if (san[0] == 3 && san[3] < 15)
					{
						if (paiss[1] == paiss[2])
						{
							if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] > paiss[9])
							{
								pais[0] = 9;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = pais[9] = dan[3];
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			else if (sum == 10)
			{
				if (paiss[0] == 10)
				{
					if (dan[0] == 10 && dan[10] < 15)
					{
						if (paiss[1] != paiss[2])
						{
							int c = 1;
							while (c < 10 && dan[c] + 1 == dan[c + 1])
								c++;
							if (c == 10 && dan[10] > paiss[10])
							{
								pais[0] = 10;
								for (c = 1; c <= 10; c++)
									pais[c] = dan[c];
								return;
							}
						}
					}
					else if (dui[0] == 5 && dui[5] < 15)
					{
						if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
						{
							int c = 1;
							while (c < 5 && dui[c] + 1 == dui[c + 1])
								c++;
							if (c == 5 && dui[5] > paiss[10])
							{
								pais[0] = 10;
								for (c = 1; c <= 5; c++)
									pais[2 * c - 1] = pais[2 * c] = dui[c];
								return;
							}
						}
					}
					else if (san[0] == 2 && dui[0] == 2 && san[2] < 15)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3])
						{
							if (san[1] + 1 == san[2] && san[2] > paiss[6])
							{
								pais[0] = 10;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = dui[1];
								pais[9] = pais[10] = dui[2];
								if (pais[10] == 16)
									pais[10] = 17;
								return;
							}
						}
					}
					else if (san[0] == 2 && si[0] == 1 && san[2] < 15)
					{
						if (paiss[1] == paiss[2] && paiss[2] == paiss[3])
						{
							if (san[1] + 1 == san[2] && san[2] > paiss[6])
							{
								pais[0] = 10;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = pais[9] = pais[10] = si[1];
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			if (sum == 11)
			{
				if (paiss[0] == 11)
				{
					if (dan[0] == 11 && dan[11] < 15)
					{
						int c = 1;
						while (c < 11 && dan[c] + 1 == dan[c + 1])
							c++;
						if (c == 11 && dan[11] > paiss[11])
						{
							pais[0] = 11;
							for (c = 1; c <= 11; c++)
								pais[c] = dan[c];
							return;
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			else if (sum == 12)
			{
				if (paiss[0] == 12)
				{
					if (dui[0] == 6 && dui[6] < 15)
					{
						if (paiss[1] == paiss[2] && paiss[2] != paiss[3])
						{
							int c = 1;
							while (c < 6 && dui[c] + 1 == dui[c + 1])
								c++;
							if (c == 6 && dui[6] > paiss[12])
							{
								pais[0] = 12;
								for (c = 1; c <= 6; c++)
									pais[2 * c - 1] = pais[2 * c] = dui[c];
								return;
							}
						}
					}
					if (si[0] == 3)
					{
						if (paiss[2] == paiss[3])
						{
							if (si[1] + 1 == si[2] && si[2] + 1 == si[3] && si[3] < 15 && si[3] > paiss[9])
							{
								pais[0] = 12;
								pais[1] = pais[2] = pais[3] = pais[10] = si[1];
								pais[4] = pais[5] = pais[6] = pais[11] = si[2];
								pais[7] = pais[8] = pais[9] = pais[12] - si[3];
								return;
							}
						}
					}
					else if (si[0] == 2 && san[0] == 1)
					{
						if (paiss[2] == paiss[3])
						{
							int a = si[1], b = si[2], c = san[1];
							if (c < b)
							{
								int tmp = b;
								b = c;
								c = tmp;
							}
							if (b < a)
							{
								int tmp = a;
								a = b;
								b = tmp;
							}
							if (a + 1 == b && b + 1 == c && c < 15 && c > paiss[9])
							{
								pais[0] = 12;
								pais[1] = pais[2] = pais[3] = a;
								pais[4] = pais[5] = pais[6] = b;
								pais[7] = pais[8] = pais[9] = c;
								pais[10] = dan[1];
								pais[11] = si[1];
								pais[12] = si[2];
								return;
							}
						}
					}
					else if (si[0] == 1 && san[0] == 2)
					{
						if (paiss[2] == paiss[3])
						{
							int a = si[1], b = san[1], c = san[2];
							if (a > b)
							{
								int tmp = b;
								b = a;
								a = tmp;
							}
							if (b > c)
							{
								int tmp = c;
								c = b;
								b = tmp;
							}
							if (a + 1 == b && b + 1 == c && c < 15 && c > paiss[9])
							{
								pais[0] = 12;
								pais[1] = pais[2] = pais[3] = a;
								pais[4] = pais[5] = pais[6] = b;
								pais[7] = pais[8] = pais[9] = c;
								if (dan[0] == 2)
								{
									pais[10] = dan[1];
									pais[11] = dan[2];
								}
								else
								{
									pais[10] = pais[11] = dui[1];
									if (pais[11] == 16)
										paiss[11] = 17;
								}
								pais[12] = si[1];
								return;
							}
						}
					}
					else if (san[0] == 3)
					{
						if (paiss[2] == paiss[3])
						{
							if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] < 15 && san[3] > paiss[9])
							{
								pais[0] = 12;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = pais[9] = san[3];
								pais[10] = dan[1];
								if (dan[0] == 3)
								{
									pais[11] = dan[2];
									pais[12] = dan[3];
								}
								else
								{
									pais[11] = pais[12] = dui[1];
									if (pais[12] == 16)
										pais[12] = 17;
								}
								return;
							}
						}
					}
					if (san[0] == 4)
					{
						if (paiss[2] == paiss[3])
						{
							if (san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] < 15)
							{
								if (san[4] > paiss[9])
								{
									pais[0] = 12;
									pais[1] = pais[2] = pais[3] = san[2];
									pais[4] = pais[5] = pais[6] = san[3];
									pais[7] = pais[8] = pais[9] = san[4];
									pais[10] = pais[11] = pais[12] = san[1];
									return;
								}
							}
							else if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] < 15)
							{
								if (san[3] > paiss[9])
								{
									pais[0] = 12;
									pais[1] = pais[2] = pais[3] = san[1];
									pais[4] = pais[5] = pais[6] = san[2];
									pais[7] = pais[8] = pais[9] = san[3];
									pais[10] = pais[11] = pais[12] = san[4];
									return;
								}
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			if (sum == 13)
			{
				printf("不按规矩出牌！\n");
				continue;
			}
			else if (sum == 14)
			{
				if (paiss[0] == 14)
				{
					if (dui[0] == 7 && dui[7] < 15)
					{
						if (paiss[2] != paiss[3])
						{
							int c = 1;
							while (c < 7 && dui[c] + 1 == dui[c + 1])
								c++;
							if (c == 7 && dui[7] > paiss[14])
							{
								pais[0] = 14;
								for (c = 1; c <= 7; c++)
									pais[2 * c - 1] = pais[2 * c] = dui[c];
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			else if (sum == 15)
			{
				if (paiss[0] == 15)
				{
					if (san[0] == 3 && dui[0] == 3 && san[3] < 15)
					{
						if (paiss[11] != paiss[12])
						{
							if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] > paiss[9])
							{
								pais[0] = 15;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = pais[9] = san[3];
								pais[10] = pais[11] = dui[1];
								pais[12] = pais[13] = dui[2];
								pais[14] = pais[15] = dui[3];
								if (pais[15] == 16)
									pais[15] = 17;
								return;
							}
						}
					}
					else if (san[0] == 3 && dui[0] == 1 && si[0] == 1 && san[3] < 15)
					{
						if (paiss[11] != paiss[12])
						{
							if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] > paiss[9])
							{
								pais[0] = 15;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = pais[9] = san[3];
								pais[10] = pais[11] = pais[12] = pais[13] = si[1];
								pais[14] = pais[15] = dui[1];
								if (pais[15] == 16)
									pais[15] = 17;
								return;
							}
						}
					}
					else if (san[0] == 5 && san[5] < 15)
					{
						if (paiss[11] == paiss[12])
						{
							if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] + 1 == san[5] && san[5] > paiss[15])
							{
								pais[0] = 15;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = pais[9] = san[3];
								pais[10] = pais[11] = pais[12] = san[4];
								pais[13] = pais[14] = pais[15] = san[5];
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			else if (sum == 16)
			{
				if (paiss[0] == 16)
				{
					if (dui[0] == 8 && dui[8] < 15)
					{
						if (paiss[2] != paiss[3])
						{
							int c = 1;
							while (c < 8 && dui[c] + 1 == dui[c + 1])
								c++;
							if (c == 8 && dui[8] > paiss[16])
							{
								pais[0] = 16;
								for (c = 1; c <= 8; c++)
									pais[2 * c - 1] = pais[2 * c] = dui[c];
								return;
							}
						}
					}
					if (paiss[1] == paiss[2] && paiss[2] == paiss[3])
					{
						if (si[0] == 4 && si[4] < 15)
						{
							if (si[1] + 1 == si[2] && si[2] + 1 == si[3] && si[3] + 1 == si[4] && si[4] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = pais[13] = si[1];
								pais[4] = pais[5] = pais[6] = pais[14] = si[2];
								pais[7] = pais[8] = pais[9] = pais[15] = si[3];
								pais[10] = pais[11] = pais[12] = pais[16] = si[4];
								return;
							}
						}
						else if (si[0] == 3 && san[0] == 1)
						{
							int a[5] = { 0 };
							a[1] = si[1];
							a[2] = si[2];
							a[3] = si[3];
							a[4] = san[1];
							for (int b = 1; b < 4; b++)
							{
								for (int c = b + 1; c <= 4; c++)
								{
									if (a[c] < a[b])
									{
										int tmp = a[b];
										a[b] = a[c];
										a[c] = tmp;
									}
								}
							}
							if (a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] < 15 && a[4] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = a[1];
								pais[4] = pais[5] = pais[6] = a[2];
								pais[7] = pais[8] = pais[9] = a[3];
								pais[10] = pais[11] = pais[12] = a[4];
								pais[13] = si[1];
								pais[14] = si[2];
								pais[15] = si[3];
								pais[16] = dan[1];
								return;
							}
						}
						else if (si[0] == 2 && san[0] == 2)
						{
							int a[5] = { 0 };
							a[1] = si[1];
							a[2] = si[2];
							a[3] = san[1];
							a[4] = san[2];
							for (int b = 1; b < 4; b++)
							{
								for (int c = b + 1; c <= 4; c++)
								{
									if (a[c] < a[b])
									{
										int tmp = a[b];
										a[b] = a[c];
										a[c] = tmp;
									}
								}
							}
							if (a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] < 15 && a[4] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = a[1];
								pais[4] = pais[5] = pais[6] = a[2];
								pais[7] = pais[8] = pais[9] = a[3];
								pais[10] = pais[11] = pais[12] = a[4];
								pais[13] = si[1];
								pais[14] = si[2];
								if (dan[0])
								{
									pais[15] = dan[1];
									pais[16] = dan[2];
								}
								else
								{
									pais[15] = pais[16] = dui[1];
									if (pais[16] == 16)
										pais[16] = 17;
								}
								return;
							}
						}
						else if (si[0] == 1 && san[0] == 3)
						{
							int a[5] = { 0 };
							a[1] = si[1];
							a[2] = san[1];
							a[3] = san[2];
							a[4] = san[3];
							for (int b = 1; b < 4; b++)
							{
								for (int c = b + 1; c <= 4; c++)
								{
									if (a[c] < a[b])
									{
										int tmp = a[b];
										a[b] = a[c];
										a[c] = tmp;
									}
								}
							}
							if (a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] < 15 && a[4] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = a[1];
								pais[4] = pais[5] = pais[6] = a[2];
								pais[7] = pais[8] = pais[9] = a[3];
								pais[10] = pais[11] = pais[12] = a[4];
								pais[13] = dan[1];
								pais[14] = si[1];
								if (dan[0] == 3)
								{
									pais[15] = dan[2];
									pais[16] = dan[3];
								}
								else
								{
									pais[15] = pais[16] = dui[1];
									if (pais[16] == 16)
										pais[16] = 17;
								}
								return;
							}
						}
						if (si[0] == 1 && san[0] == 4)
						{
							int a[6] = { 0 };
							a[1] = si[1];
							a[2] = san[1];
							a[3] = san[2];
							a[4] = san[3];
							a[5] = san[4];
							for (int b = 1; b < 5; b++)
							{
								for (int c = b + 1; c <= 5; c++)
								{
									if (a[c] < a[b])
									{
										int tmp = a[b];
										a[b] = a[c];
										a[c] = tmp;
									}
								}
							}
							if (a[1] + 1 == a[2] && a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] < 15 && a[4] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = a[1];
								pais[4] = pais[5] = pais[6] = a[2];
								pais[7] = pais[8] = pais[9] = a[3];
								pais[10] = pais[11] = pais[12] = a[4];
								pais[13] = pais[14] = pais[15] = a[5];
								pais[16] = si[1];
								return;
							}
							else if (a[2] + 1 == a[3] && a[3] + 1 == a[4] && a[4] + 1 == a[5] && a[5] < 15 && a[5] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = a[2];
								pais[4] = pais[5] = pais[6] = a[3];
								pais[7] = pais[8] = pais[9] = a[4];
								pais[10] = pais[11] = pais[12] = a[5];
								pais[13] = pais[14] = pais[15] = a[1];
								pais[16] = si[1];
								return;
							}
						}
						else if (san[0] == 4 && san[4] < 15)
						{
							if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = pais[9] = san[3];
								pais[10] = pais[11] = pais[12] = san[4];
								if (dan[0] == 4)
								{
									pais[13] = dan[1];
									pais[14] = dan[2];
									pais[15] = dan[3];
									pais[16] = dan[4];
								}
								else if (dan[0] == 2)
								{
									pais[13] = dan[1];
									pais[14] = dan[2];
									pais[15] = pais[16] = dui[1];
									if (pais[16] == 16)
										pais[16] = 17;
								}
								else
								{
									pais[13] = pais[14] = dui[1];
									pais[15] = pais[16] = dui[2];
									if (pais[16] == 16)
										pais[16] = 17;
								}
								return;
							}
						}
						else if (san[0] == 5)
						{
							if (san[1] + 1 == san[2] && san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = san[1];
								pais[4] = pais[5] = pais[6] = san[2];
								pais[7] = pais[8] = pais[9] = san[3];
								pais[10] = pais[11] = pais[12] = san[4];
								pais[13] = pais[14] = pais[15] = san[5];
								pais[16] = dan[1];
								return;
							}
							else if (san[2] + 1 == san[3] && san[3] + 1 == san[4] && san[4] + 1 == san[5] && san[5] < 15 && san[5] > paiss[12])
							{
								pais[0] = 16;
								pais[1] = pais[2] = pais[3] = san[2];
								pais[4] = pais[5] = pais[6] = san[3];
								pais[7] = pais[8] = pais[9] = san[4];
								pais[10] = pais[11] = pais[12] = san[5];
								pais[13] = pais[14] = pais[15] = san[1];
								pais[16] = dan[1];
								return;
							}
						}
					}
				}
				printf("不按规矩出牌！\n");
				continue;
			}
			printf("不按规矩出牌！\n");
			continue;
		}
		if (choice != 2 && choice != 1)
		{
			printf("无效输入！\n");
			continue;
		}
	}
	if (count)
		pais[0] = 0;
	else
		pais[0] = -pais[0];
	return;
}












































int main()
{
	printf("出牌时1到9可用在键盘直接输入相应的数字，1可以用a或A代替，10用0代替，J、Q、K大小写皆可，小王用x或X，大王用d或D。");
	printf("\n出牌时可不按顺序输出，只要能组合成符合规矩的顺序即可，如34567可通过输入63754等实现。\n");
	printf("现在按下回车键开始吧！");
	char ch1 = getchar();
	while (1)
	{
		int cards[54];
		int yishi = 0;
		int yishi2 = 0;
		for (int i = 0; i < 54; i++)
			cards[i] = i / 4 + 3;
		cards[53] = 17;
		char shows[18][10] = { "","","","3   ","4   ","5   ","6   ","7   ","8   ","9   ","10   ","J   ","Q   ","K   ","A   ","2   ","小王   ","大王   " };
		int dizhu = 0;
		int pais[21] = { 0 };
		int pais1[21] = { 0 };
		int pais2[21] = { 0 };
		int pais3[21] = { 0 };
		persons person[3];
		srand((unsigned)time(NULL));
		wash(cards);
		distribute(cards, person);
		sort(person);
		show(person, 0, shows, cards);
		call(person, cards, shows);
		if (person[0].dizhu)
			dizhu = 1;
		else if (person[1].dizhu)
			dizhu = 2;
		else
			dizhu = 3;
		int now = dizhu - 1;
		int point = 0;
		pais1[0] = pais2[0] = pais3[0] = -1;
		int cardss[54] = { 0 };
		while (1)
		{
			if (now == 0)
			{
				if (pais[0] == 0)
				{
					if (lastpais(person, now, 1) == 0)
						renji_chupai_last(person, now, pais);
					else
						renji_chupai(person, now, pais, &yishi, &yishi2);
				}
				else
					renji_dapai(person, now, pais, &yishi, &yishi2);
				zhengli(person, now, pais);
				pais1[0] = 0;
				if (pais[0] > 0)
					for (int a = 1; a <= pais[0]; a++)
						pais1[++pais1[0]] = pais[a];
				if (person[now].card[0] == 0)
				{
					show(person, 1, shows, cards);
					if (pais3[0] >= 0)
					{
						printf("你（");
						if (person[2].dizhu)
							printf("地主）：");
						else
							printf("农民）：");
						if (pais3[0])
						{
							for (int a = 1; a <= pais3[0]; a++)
								printf("%s", shows[pais3[a]]);
							printf("\n");
						}
						else
							printf("不要！\n");
					}
					printf("1号（");
					if (person[now].dizhu)
						printf("地主）：");
					else
						printf("农民）：");
					for (int a = 1; a <= pais1[0]; a++)
						printf("%s", shows[pais1[a]]);
					printf("\n");
					if (dizhu == 1)
					{
						printf("地主（1号）获胜！\n很遗憾你输了！\n");
						break;
					}
					else
					{
						if (dizhu == 2)
							printf("农民（1、3号）获胜！\n恭喜你赢了！\n");
						else
							printf("农民（1、2号）获胜！\n很遗憾你输了！\n");
						break;
					}
				}
				else
				{
					if (pais[0] > 0)
					{
						for (int a = 1; a <= pais[0]; a++)
							cardss[point++] = pais[a];
					}
				}
				now++;
			}
			if (now == 1)
			{
				if (pais[0] == 0)
				{
					if (lastpais(person, now, 1) == 0)
						renji_chupai_last(person, now, pais);
					else
						renji_chupai(person, now, pais, &yishi, &yishi2);
				}
				else
					renji_dapai(person, now, pais, &yishi, &yishi2);
				zhengli(person, now, pais);
				pais2[0] = 0;
				if (pais[0] > 0)
					for (int a = 1; a <= pais[0]; a++)
						pais2[++pais2[0]] = pais[a];
				if (person[now].card[0] == 0)
				{
					show(person, 1, shows, cards);
					if (pais3[0] >= 0)
					{
						printf("你（");
						if (person[2].dizhu)
							printf("地主）：");
						else
							printf("农民）：");
						if (pais3[0])
						{
							for (int a = 1; a <= pais3[0]; a++)
								printf("%s", shows[pais3[a]]);
							printf("\n");
						}
						else
							printf("不要！\n");
					}
					if (pais1[0] >= 0)
					{
						printf("1号（");
						if (person[0].dizhu)
							printf("地主）：");
						else
							printf("农民）：");
						if (pais1[0])
						{
							for (int a = 1; a <= pais1[0]; a++)
								printf("%s", shows[pais1[a]]);
							printf("\n");
						}
						else
							printf("不要！\n");
					}
					printf("2号（");
					if (person[now].dizhu)
						printf("地主）：");
					else
						printf("农民）：");
					for (int a = 1; a <= pais2[0]; a++)
						printf("%s", shows[pais2[a]]);
					printf("\n");
					if (dizhu == 2)
					{
						printf("地主（2号）获胜！\n很遗憾你输了！\n");
						break;
					}
					else
					{
						if (dizhu == 1)
							printf("农民（2、3号）获胜！\n恭喜你赢了！\n");
						else
							printf("农民（1、2号）获胜！\n很遗憾你输了！\n");
						break;
					}
				}
				else
				{
					if (pais[0] > 0)
					{
						for (int a = 1; a <= pais[0]; a++)
							cardss[point++] = pais[a];
					}
				}
				now++;
			}
			if (now == 2)
			{
				show(person, 1, shows, cards);
				if (pais3[0] >= 0)
				{
					printf("你（");
					if (person[2].dizhu)
						printf("地主）：");
					else
						printf("农民）：");
					if (pais3[0])
					{
						for (int a = 1; a <= pais3[0]; a++)
							printf("%s", shows[pais3[a]]);
						printf("\n");
					}
					else
						printf("不要！\n");
				}
				if (pais1[0] >= 0)
				{
					printf("1号（");
					if (person[0].dizhu)
						printf("地主）：");
					else
						printf("农民）：");
					if (pais1[0])
					{
						for (int a = 1; a <= pais1[0]; a++)
							printf("%s", shows[pais1[a]]);
						printf("\n");
					}
					else
						printf("不要！\n");
				}
				if (pais2[0] >= 0)
				{
					printf("2号（");
					if (person[1].dizhu)
						printf("地主）：");
					else
						printf("农民）：");
					if (pais2[0])
					{
						for (int a = 1; a <= pais2[0]; a++)
							printf("%s", shows[pais2[a]]);
						printf("\n");
					}
					else
						printf("不要！\n");
				}
				if (pais[0] == 0)
					wochupai(person, pais);
				else
					wodapai(person, pais);
				zhengli(person, now, pais);
				pais3[0] = 0;
				if (pais[0] > 0)
					for (int a = 1; a <= pais[0]; a++)
						pais3[++pais3[0]] = pais[a];
				if (person[now].card[0] == 0)
				{
					show(person, 1, shows, cards);
					printf("你（");
					if (person[2].dizhu)
						printf("地主）：");
					else
						printf("农民）：");
					for (int a = 1; a <= pais3[0]; a++)
						printf("%s", shows[pais3[a]]);
					printf("\n");
					if (dizhu == 3)
					{
						printf("地主（你）获胜！\n恭喜你赢了！\n");
						break;
					}
					else
					{
						if (dizhu == 1)
							printf("农民（2、3号）获胜！\n恭喜你赢了！\n");
						else
							printf("农民（1、3号）获胜！\n恭喜你赢了！\n");
						break;
					}
				}
				else
				{
					if (pais[0] > 0)
					{
						for (int a = 1; a <= pais[0]; a++)
							cardss[point++] = pais[a];
					}
				}
				now = 0;
			}
		}
		printf("\n\n\n");
		int choice1 = 0;
		while (1)
		{
			printf("1.退出程序   2.进入下一局\n请选择一项：");
			scanf_s("%d", &choice1);
			if (choice1 == 1)
				break;
			else if (choice1 == 2)
			{
				for (int i = 0; i < 3; i++)
					if (person[i].card[0])
						for (int a = 1; a <= person[i].card[0]; a++)
							cardss[point++] = person[i].card[a];
				for (int a = 0; a < 54; a++)
					cards[a] = cardss[a];
				break;
			}
			else
			{
				printf("无效输入！\n");
				continue;
			}
		}
		if (choice1 == 1)
			break;
		else
			pais[0] = yishi = yishi2 = 0;
	}
	return 0;
}